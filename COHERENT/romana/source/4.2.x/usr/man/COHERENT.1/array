aarrrraayy -- Definition

An aarrrraayy is a concatenation of  data elements, all of which are of the same
type.  All the elements of an array are stored consecutively in memory, and
each element  within the array  can be addressed  by the array  name plus a
subscript.

For example, the  array iinntt ffoooo[33] has three elements,  each of which is an
iinntt.  The  three iinntts are stored  consecutively in memory, and  each can be
addressed by the  array name ffoooo plus a subscript  that indicates its place
within the  array, as  follows: ffoooo[00], ffoooo[11],  and ffoooo[22]. Note  that the
numbering of elements within an array always begins with `0'.

Arrays,  like other  data  elements, may  be automatic  (aauuttoo), ssttaattiicc,  or
external (eexxtteerrnn).

Arrays can be  multi-dimensional; that is to say, each  element in an array
can itself  be an  array.  To declare  a multi-dimensional array,  use more
than one set of  square brackets.  For example, the multi-dimensional array
ffoooo[33][1100]  is a  two-dimensional array  that has  three elements,  each of
which  is  an array  of  ten  elements.  The  second  sub-script is  always
necessary  in a  multi-dimensional array,  whereas the  first is  not.  For
example, the  form ffoooo[][1100] is acceptable, whereas  ffoooo[1100][] is not.  The
first form is an indefinite  number of ten-element arrays, which is correct
C,  whereas the  second  form is  ten  copies of  an  indefinite number  of
elements, which is illegal.

You can initialize automatic  arrays and structures, provided that you know
the size  of the array, or  of any array contained  within a structure.  An
automatic  array  is  initialized in  the  same  manner  as aggregate,  but
initialization is performed on entry to the routine at run time, instead of
at compile time.

_F_l_e_x_i_b_l_e _A_r_r_a_y_s
A fflleexxiibbllee aarrrraayy is one whose  length is not declared explicitly.  Each has
exactly one empty `[ ]'   array-bound  declaration.    If   the  array   is
multidimensional, the  flexible dimension  of the  array must be  the _f_i_r_s_t
array bound in the declaration; for example:

    int example1[][20]; /* RIGHT */
    int example2[20][]; /* WRONG */

The C language allows you to declare an indefinite number of array elements
of a  set length, but not  a set number of array  elements of an indefinite
length.

Flexible arrays occur in only a few contexts; for example, as parameters:

    char *argv[];
    char p[][8];

as eexxtteerrnn declarations:

    extern int end[];

or as a member of a structure -- usually, though not necessarily, the last:

    struct nlist {
        struct nlist *next;
        char name[];
    };

_E_x_a_m_p_l_e
The  following  program  initializes an  automatic  array,  and prints  its
contents.

main()
{
    int foo[3] = { 1, 2, 3 };

    printf("Here's foo's contents: %d %d %d\n",
         foo[0], foo[1], foo[2]);
}

_S_e_e _A_l_s_o
iinniittiiaalliizzaattiioonn, PPrrooggrraammmmiinngg CCOOHHEERREENNTT, ssttrruucctt
