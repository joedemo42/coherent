bbiitt-ffiieellddss -- Definition

A _b_i_t-_f_i_e_l_d  is a member  of a structure or  uunniioonn that is defined  to be a
cluster  of bits.   It provides  a  way to  represent data  compactly.  For
example, in the following structure

    struct example {
        int member1;
        long member2;
        unsigned int member3 :5;
    }

mmeemmbbeerr33 is declared to be a  bit-field that consists of five bits.  A colon
`:' precedes the integral constant  that indicates the _w_i_d_t_h, or the number
of bits  in the bit-field.   Also, the bit-field declarator  must include a
type, which must be one of iinntt, ssiiggnneedd iinntt, or uunnssiiggnneedd iinntt.

A bit-field that  is not given a name may  not be accessed.  Such an object
is useful as ``padding'' within an object so that it conforms to a template
designed elsewhere.

A bit-field that  is unnamed and has a length  of zero can be used to force
adjacent bit-fields  into separate objects.  For  example, in the following
structure

    struct example {
        int member1;
        int member2 :5;
        int :0;
        int member3 :5;
    };

the zero-length  bit-field forces  mmeemmbbeerr22 and  mmeemmbbeerr33 to be  written into
separate objects.

Finally, it is illegal to take the address of a bit-field.

_S_e_e _A_l_s_o
bbiitt, bbiitt mmaapp, bbyyttee, PPrrooggrraammmmiinngg CCOOHHEERREENNTT
ANSI Standard, section 3.5.2.1

_N_o_t_e_s
Because bit-fields  have many implementation-specific  properties, they are
not considered  to be highly  portable.  Bit-fields use  minimal amounts of
storage, but the amount of computation needed to manipulate and access them
may negate this benefit.  Bit-fields must be kept in integral-sized objects
because many machines cannot  directly access a quantity of storage smaller
than a ``word'' (a word is generally used to store an iinntt).
