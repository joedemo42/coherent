ooppeerraattoorr -- Definition

An ooppeerraattoorr  is a function that  is built into the  C language.  It usually
relates one operand to another.  For example, the statement

    1+2

relates the  operands 11  and 22  through the operation  of addition;  on the
other hand, the statement

    A>B

relates the  operands AA and  BB logically, by  asserting that the  former is
greater than the latter; whereas

    A=B

relates the  operands AA and BB  by assigning the value of  the latter to the
former.  The following is a table of the C operators:

    *       Multiplication
    /       Division
    %       Remainder
    +       Addition
    -       Subtraction

    <       Less than
    <=      Less than or equal to
    >       Greater than
    >=      Greater than or equal to

    &&      Logical AND
    !=      Inequality
    !       Logical negation
    | |     logical OR

    &       Bitwise AND
    ^       Bitwise exclusive OR
    ~       Bitwise complement
    |       Bitwise inclusive OR
    <<      Bitwise shift left
    >>      Bitwise shift right

    =       Assign
    +=      Increment and assign
    -=      Decrement and assign
    *=      Multiply and assign
    /=      Divide and assign
    %=      Modulus and assign
    ++      Increment
    --      Decrement
    ==      Equivalence
    &=      Bitwise AND and assign
    ^=      Bitwise exclusive OR and assign
    |=      Bitwise inclusive OR and assign
    <<=     Bitwise shift left and assign
    >>=     Bitwise shift right and assign

    *       Indirection
    &       Render an address
    ()      Function indicator
    []      Array indicator
    ->      Structure pointer
    .       Structure member
    ? :     Conditional expression

    ssiizzeeooff  size of an object

_P_r_e_c_e_d_e_n_c_e
_P_r_e_c_e_d_e_n_c_e  refers to  the  order in  which  C executes  operators.  The  C
languages assigns  a level of  precedence to each  operator.  Operators are
executed in the order of their precedence level, from highest to lowest.

The  following table  summarizes the  precedence of  C operators.   The are
listed in _d_e_s_c_e_n_d_i_n_g order of  precedence: those listed higher in the table
are executed before those lower in the table.  Operators listed on the same
line have  the same level of precedence,  and the implementation determines
the  order  in which  they  are executed.   If  you use  two  or more  such
operators in the  same expression, you would be wise  to use parentheses to
indicate exactly the order in which you want the operators executed.

    _O_p_e_r_a_t_o_r                          _A_s_s_o_c_i_a_t_i_v_i_t_y

    ()   []   ->   .                  Left to right

    !  ~  ++  --  -  (_t_y_p_e)  *  &  sizeofRight to left

    *  /  %                           Left to right

    +  -                              Left to right

    <<  >>                            Left to right

    <  <=  >  >=                      Left to right

    ==  !=                            Left to right

    &                                 Left to right

    ^                                 Left to right

    |                                 Left to right

    &&                                Left to right

    ||                                Left to right

    ?:                                Right to left

    =  +=  -=  *=  /=  %=             Right to left

    ,                                 Left to right

You  can always  determine precedence  in an  expression by  enclosing sub-
expressions  within   parentheses:  the  expression   enclosed  within  the
innermost parentheses is always executed first.

_S_e_e _A_l_s_o
PPrrooggrraammmmiinngg CCOOHHEERREENNTT, ssiizzeeooff
ANSI Standard, section 6.1, section 6.3
