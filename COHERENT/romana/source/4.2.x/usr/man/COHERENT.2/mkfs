mmkkffss -- Command

Make a new file system
/eettcc/mmkkffss [-bb _b_o_o_t] [-dd] [-ff _n_a_m_e] [-ii _i_n_o_d_e_s] [-mm _a_r_g] [-nn _a_r_g] [-pp _p_a_c_k] _f_i_l_e_s_y_s_t_e_m _p_r_o_t_o

mmkkffss makes a new file system.   _f_i_l_e_s_y_s_t_e_m names the file (normally a block
special file) where  the new file system will reside.   The contents of the
newly created  file system are  described in _p_r_o_t_o.  _p_r_o_t_o can be  either a
number or a file name.

If _p_r_o_t_o is a number, mmkkffss  creates an empty file system (containing only a
root directory) of the size in blocks given by _p_r_o_t_o. The number of i-nodes
is calculated as a percentage of this number.  The command

    /etc/mkfs /dev/fha0 2400

creates a file system on a high-density, 5.25-inch diskette in drive 0.  If
the disk is a high-density, 3.5-inch diskette, use the command:

    /etc/mkfs /dev/fva0 2880

If _p_r_o_t_o is a file name, however, the contents of that file will be used as
a prototype for modeling the new  file system.  This prototype file must be
laid out in the following manner:

_b_o_o_t_s_t_r_a_p__f_i_l_e__n_a_m_e  _f_i_l_e__s_y_s_t_e_m__n_a_m_e  _d_e_v_i_c_e__n_a_m_e
_n_o.__o_f__b_l_o_c_k_s  _n_o.__o_f__i-_n_o_d_e_s  _n   _m
%_b _X_X _X_X _X_X
...
_d_i_r_e_c_t_o_r_y__n_a_m_e
    _d_i_r_e_c_t_o_r_y__n_a_m_e _m_o_d_e _u_s_e_r__i_d _g_r_o_u_p__i_d _c_o_n_t_e_n_t_s
    ...
    $
$

Each line is described below.

The first  line has three  fields.  Field 1,  _b_o_o_t_s_t_r_a_p__f_i_l_e__n_a_m_e, contains
the name of  a file that holds the boot  strap, which must fit into block 0
of the disk.  Field 2, _f_i_l_e__s_y_s_t_e_m__n_a_m_e, gives the name of the file system;
and field  3, _d_e_v_i_c_e__n_a_m_e, gives the name of  file system's physical device
(for example, /ddeevv/hhdd11).  Only the first six characters in field 2 and  the
first 11 in field 3 are significant; all characters after them are ignored.

The second  line contains four  fields.  Field 1,  _n_o.__o_f__b_l_o_c_k_s, gives the
size of the file system in blocks; field 2, _n_o__o_f__i-_n_o_d_e_s, gives the number
of i-nodes in the file system.  Because each file or directory requires one
i-node, this number represents the limit on the number of files that may be
created in the  file system.  A ratio of seven  blocks per i-node generally
works well.

Fields 3 and 4 control free  list interleaving on your disk.  _n is the size
of a  ``virtual cylinder'':  ffsscckk allocates all  the blocks on  one virtual
cylinder before it  advances to the next virtual cylinder.   The value of _n
must be less than or equal to 255, and should evenly divide the actual size
of a  cylinder on the device.   _m tells the system how  many blocks to skip
each  time it  increments a  free list  block number,  i.e., the  free list
``interleave''; _n mod _m must be zero.  Choosing an optimal interleave value
may improve  system performance for  the device.  The optimal  values for _n
and _m are hardware-specific and can be determined by experimentation.

Next,  the third  line and  following begin  with %bb.   These list  the bad
blocks on  your storage device.   One or more  block numbers may  appear on
each line, separated by white space.  These blocks are allocated to the bad
block file (i-node 1).

The remaining lines in the _p_r_o_t_o file define the names, modes, and contents
of the directories  and files in the file system.   These lines are divided
into fields separated by white space (blanks or tabs) as follows:

-> The first field  names the file or directory to  be created.  This field
   is missing on the first line,  which describes the root directory of the
   file system.

-> The second field describes the mode of the file, which is six characters
   long.  The  first character  gives the file  type, that is,  whether the
   file  is  ordinary  (`-'), directory  (`d'),  block  special (`b'),   or
   character special (`c').  The second character is `u' for set user id on
   execution,  and `-' otherwise.  The third character is `g' for set group
   id on  execution,  and  `-' otherwise.   Characters 4 through  6 specify
   permissions  in  octal;  for  example,  664444  specifies  read  and  write
   permission for the owner, read  permission for other users from the same
   group, and read permission for users from other groups.
   If  the  above  file   type  were  a  directory,  subsequent  files  are
   recursively  defined under  that directory, until  the current  level of
   directory is terminated by a line containing a `$' character.

-> The next two fields specify the owner's numerical user id and group id.

-> The  last field  describes file  contents.  For a  directory, it  is not
   needed.  For  an ordinary file, it  is the name of  a COHERENT file that
   will be  copied into  the newly created  file.  For block  or character-
   special  files, there  are two  fields that specify  the numbers  of the
   major and minor devices.

Finally,  each  directory's  description and  the  entire  _p_r_o_t_o file  must
terminate with dollar signs `$'.

The _p_r_o_t_o file need not contain  all of the above fields.  However, it must
contain the name  of the boot block (line 1),  the number of blocks and the
number of  i-nodes (line 2), the  list of bad blocks, the  name of at least
one directory, and the dollar sign that ends the file.

_C_o_m_m_a_n_d-_l_i_n_e _O_p_t_i_o_n_s
mmkkffss recognizes the following command-line options:

-bb _b_o_o_t
   Specifies the file to use as the ``bootstrap'' for the file system.

-dd Preserve file dates and times on the new file system.

-ff _n_a_m_e
   Label the file system with the given _n_a_m_e.  _n_a_m_e must be less than seven
   characters in length.

-ii _i_n_o_d_e_s
   Use _i_n_o_d_e_s as the number of inodes for the file system.

-mm _a_r_g
   Set the number of blocks to skip when incrementing virtual block number.
   This is the same as the _m option as set on line 2 of the prototype file.
   You can use this option if you choose not to use a prototype file.

-nn _a_r_g
   Set  the size  of a  ``virtual cylinder''.   This is the  same as  the _n
   option as set on line 2  of the prototype file.  You can use this option
   if you choose not to use a prototype file.

-pp _p_a_c_k
   Set the file system ``pack name'' to _p_a_c_k.  _p_a_c_k must be less than seven
   characters in length.

_E_x_a_m_p_l_e
The following example specifies  a proto file for a high-density, 5.25-inch
floppy disk; note that this floppy  disk is faulty and contains a number of
bad blocks:

/conf/boot.fha
2400 100
%b 55
%b 185 86
d--755 3 1
     coherent ---644 3 1 /coherent
     tmp     d--777 3 1
     $
     bin     d--755 3 1
             mail   -u-755 0 1 /bin/mail
     $
     dev     d--755 3 1
             tty30  c--644 0 1 3 0
             tty35  c--644 0 1 3 5
             mt0    b--600 0 1 12 0
     $
$

You can use  the command bbaaddssccaann to draw up  the list of bad blocks on your
disk and create a skeleton _p_r_o_t_o file.

_S_e_e _A_l_s_o
bbaaddssccaann, cchhmmoodd, ccoommmmaannddss, ffsscckk, mmoouunntt, rreessttoorr, uunnmmkkffss

_N_o_t_e_s
When the command ffsscckk checks a  file system, it stores files that it cannot
decypher  into directory  lloosstt+ffoouunndd. However,  ffsscckk  cannot modify  a file
system  during  its work.   This  rule  was adopted  to  prevent ffsscckk  from
attempting to  modify a corrupt  file system, and so  making matters worse.
However, this  means that (among other things) ffsscckk  cannot change the size
of directory  lloosstt+ffoouunndd. Thus,  if more files  are detached from  the file
system than  lloosstt+ffoouunndd can hold, ffsscckk must delete  them outright.  If your
newly  created file  system will  hold  a large  number of  transient files
(e.g., a news  system), you should increase the size  of lloosstt+ffoouunndd so that
it has  a fighting chance  of holding all  detached files that  ffsscckk finds.
For example, the following script expands  /lloosstt+ffoouunndd so it can hold up to
500 files:

    su root
    for i in `from 1 to 500`
    do
        touch /lost+found/$i
    done
    rm /lost+found/*

Run this script for each file system whose lloosstt+ffoouunndd directory you wish to
expand.  For example, if you have  a file system mount on directory /uu, run
this script for directory /uu/lloosstt+ffoouunndd instead of for /lloosstt+ffoouunndd.
