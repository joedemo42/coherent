/newbits/bin/du.c
		printf("%D\t%s\n", size, fname);
	printf("%D\t%s\n", blocks, fname);
/newbits/bin/df.c
		printf(", %U", sbp->s_fsize);
	printf("%6U/%6U = ", free, total);
	printf("%2D.%1D%%", percent/10L, percent%10L);
/newbits/bin/prep.c
		printf("%D\t", wordno);
/newbits/bin/awk/awk2.c
	sassign(OFMTp = install("OFMT", (INT)0), "%D");
/newbits/bin/check/dcheck.c
		fprintf(stderr, "Read error %D\n", (long)bn);
		fprintf(stderr, "Write error %D\n", (long)bn);
	printf("Bad block #%D\n", (long)bn);
/newbits/bin/check/icheck.c
		printf("blks=%D, dirb=%D, d=%D, i=%D, ii=%D, iii=%D\n",
		printf("free = %D\n", nfreeb);
			printf("missing = %D\n", nmissing);
			printf("%D dups in free\n", nfdup);
		fprintf(stderr, "Read error %D\n", (long)bn);
		fprintf(stderr, "Write error %D\n", (long)bn);
				printf("%D arg, class=%s, inode=%u\n",
		printf("%D bad, class=%s, inode=%u\n", (long)bn, type, inum);
		printf("%D dup, class=%s, inode=%u\n", (long)bn, type, inum);
/newbits/bin/check/ncheck.c
		fprintf(stderr, "ncheck: Read error %D\n", (long)bn);
	fprintf(stderr, "ncheck: bad block #%D\n", (long)bn);
/newbits/bin/dump/restor.c
		message(1, "volume sync: %D", restime);
/newbits/bin/dump/discbuf.c
			dbfatal("cache read error, block %D", block);
		dbfatal("cache write error, block %D", dbp->db_block);
/newbits/bin/dump/old/discbuf.c
			dbfatal("cache read error, block %D", block);
		dbfatal("cache write error, block %D", dbp->db_block);
/newbits/bin/dump/old/dump.c
		fprintf(stderr, "dump: length is %D ", used);
		fprintf(stderr, "dump: %D inodes, ",  ninodes);
		fprintf(stderr, "%D real blocks, ",   nblocks);
		fprintf(stderr, "%D sparse blocks\n", nsparse);
/newbits/bin/dump/old/restor.c
		message(1, "volume sync: %D", restime);
/newbits/bin/dump/old/old/discbuf.c
			dbfatal("cache read error, block %D", block);
		dbfatal("cache write error, block %D", dbp->db_block);
/newbits/bin/dump/old/old/dump.c
		printf("dump: length is %D ", used);
		printf("dump: %D inodes, ",  ninodes);
		printf("%D real blocks, ",   nblocks);
		printf("%D sparse blocks\n", nsparse);
/newbits/bin/dump/dump.c
		fprintf(stderr, "dump: length is %D ", used);
		fprintf(stderr, "dump: %D inodes, ",  ninodes);
		fprintf(stderr, "%D real blocks, ",   nblocks);
		fprintf(stderr, "%D sparse blocks\n", nsparse);
/newbits/bin/lpr/lpr.c
	sprintf(tfname, "tf%D", unique());
	sprintf(dfname, "df%D", unique());
/newbits/bin/nroff/div.c
	if ((n=tmpseek%DBFSIZE) != 0)
/newbits/bin/nroff/getf.c
		sp->x4.s_sp = &(sp->x4.s_bufp[mp->t_div.m_seek%DBFSIZE]);
/newbits/bin/sh/exec3.c
	prints("%Dm", t/MINUTE);
/newbits/bin/ac.c
	printf("%3D:%02D\n", time/60, time%60);
/newbits/bin/hpr/lpr.c
	sprintf(tfname, "tf%D", unique());
	sprintf(dfname, "df%D", unique());
/newbits/bin/msgs.c
	printf("\nMessage Number %d [%D chars]\n", num, st.st_size);
/newbits/bin/dd.c
	fprintf(stderr, "%D+%D records in\n", nfri, npri);
	fprintf(stderr, "%D+%D records out\n", nfro, npro);
/newbits/bin/m4.c
	sprintf(a->s_body, "%D", x);
/newbits/bin/pr.c
				printf( "%.12s%.5s  %s  Page %d, line %D\n",
/newbits/bin/quot.c
				printf("%8D ", fep->f_nfiles);
			printf("%8D    %s\n", fep->f_nblocks,
				printf("%8D ", totfiles);
			printf("%8D      Total\n", totblocks);
			printf("%8D %8D %10D\n", cep->c_nblocks,
/newbits/bin/sa.c
			printf(" %5D %5D", units(sp->s_utime, sp),
			printf(" %5D", units(sp->s_utime+sp->s_stime, sp));
		printf(" %5D", units(sp->s_etime*HZ, sp));
	printf("%3D.", t/total);
	printf("%1D ", t*10/total);
/newbits/bin/sort.c
		serr("input record #%D exceeds maximum length %d",
/newbits/bin/sum.c
	printf( "%5u %2D", a, (size+BUFSIZ-1)/BUFSIZ);
/newbits/etc/fsck/util.c
char *rgblkerr = "Out of Range Block number: %U  (CONTINUE)";
char *skblkerr = "Can not Seek: Blk num: %U  (CONTINUE)";
char *rdblkerr = "Can not Read: Blk num: %U  (CONTINUE)";
char *wtblkerr = "Can not Write: Blk num: %U  (CONTINUE)";
/newbits/etc/fsck/init.c
 		badsuper("Size check: fsize %U isize %u", fsize, isize);
/newbits/etc/fsck/phase1.c
	printf("Bad block %U, i-number = %u\n", bn, ino);
	printf("Dup Block %U, i-number = %u\n", bn, ino);
Bad Directory Size, size = %D, i-number = %u (Clear i-node)", size, ino) ) {
/newbits/etc/fsck/phase2.c
	printf("%s entry in block %U in directory\n", errname, blocknum);
	printf("Size=%U, Mtime=%s", dip->di_size, ctime(&dip->di_mtime));
/newbits/etc/fsck/phase1b.c
	printf("Dup Block %U, i-number = %u\n", bn, ino);
/newbits/etc/fsck/phase5.c
	printf("Total traversed free blocks     = %U\n", total);	 
	printf("Total free blocks by Superblock = %U\n", sbp->s_tfree);	 
	printf("Running total free blocks       = %U\n", totfree);	 
	report("%U Bad Block%s in Free List\n", badcnt);
	report("%U Dup Block%s in Free List\n", dupcnt);
	report("%U Block%s missing\n", totfree - total);
/newbits/etc/fsck/cleanup.c
	printf("%U blocks ", fsize - isize - totfree);
	printf("%U free\n", totfree);
		printf("Expect roughly %U missing block%s next\n", lostsize,
/newbits/etc/mkfs.c
		return eignore("duplicated bad block %D", b);
		return eignore("boot block (%D) is bad", b);
		return efatal("super block (%D) is bad", b);
		return efatal("first inode block (%D) is bad", b);
	fprintf(stderr, "%d %x %D\n", xp->x_ino, xp->x_mode, xp->x_size);
		fprintf(stderr, "%D", dp[0]);
			fprintf(stderr, "%D", dp[-1]);
			    eignore("filesystem write error at block %D", b);
	fprintf(stderr, "bcache(%D) writes(%D) = {", b1, b2);
/newbits/etc/build/mkdev.c
printf("What is your 4-digit hexadecimal base address [%04X]? ", ss_base);
/newbits/usr/src/examples/rand.c
	printf("%d values above %d in %d trials (%D%%).\n",
/newbits/usr/lib/ndir/libndir/getdents.c
	printf("getdents: Name=%s; inode = %D; offset = %D; len=%d\n",bp->d_name,
/newbits/usr/lib/ndir/libndir/readdir.c
	printf("\tinode = %D\n",dp->d_ino);
printf ("readdir: name: %s; inode %D; offset %D; reclen %d\n",dp->d_name,
/newbits/usr/lib/ndir/libndir/tst.c
		printf ("%D\t",dp->d_ino);
		printf ("%D\t",dp->d_off);
/newbits/conf/tboot/execute.c
	printf("%x:%x + %X = %X\n",
		printf("BAD: %x:%x + %X > %X.\n", 
		printf("OK: %x:%x + %X < %X.\n", 
/src386/bin/db/i8086b.c
		sprintf(wbp, "%04X", v);
/src386/bin/db/i8086d.c
	"ins%Zb %Yb", "ins%Zv %Yv", "outs%Zb %Xb", "outs%Zv %Xv",
	"mov%Zb al,%Ob", "mov%Zv %eax,%Ov", "mov%Zb %Ob,al", "mov%Zv %Ov,%eax",
	"movs%Zb %Xb%Yb", "movs%Zz %Xv%Yv", "cmps%Zb %Xb%Yb", "cmps%Zz %Xv%Yv",
	"lods%Zb %Xb", "lods%Zz %Xv", "scas%Zb %Xb", "scas%Zv %Xv",
	"mov%Zd %Rd,%Cd", "mov%Zd %Rd,%Dd", "mov%Zd %Cd,%Rd", "mov%Zd %Dd,%Rd",
/src386/bin/sa.c
			printf(" %5D %5D", units(sp->s_utime, sp),
			printf(" %5D", units(sp->s_utime+sp->s_stime, sp));
		printf(" %5D", units(sp->s_etime*HZ, sp));
	printf("%3D.", t/total);
	printf("%1D ", t*10/total);
/src386/bin/ps/ps3.0/print.c
		fprintf( fp, " 0x%08X", event);
/src386/bin/ps/ps_b4_krnl68/ps.c
		printf(" 0x%08X", pp->p_event);
/src386/etc/mkdev.c
printf("What is your 4-digit hexadecimal base address [%04X]? ", ss_base);
/src386/etc/Build_401/mkdev.c
printf("What is your 4-digit hexadecimal base address [%04X]? ", ss_base);
/src386/lib/libc/ndir/getdents.c
	printf("getdents: Name=%s; inode = %D; offset = %D; len=%d\n",bp->d_name,
/src386/lib/libc/ndir/readdir.c
	printf("\tinode = %D\n",dp->d_ino);
printf ("readdir: name: %s; inode %D; offset %D; reclen %d\n",dp->d_name,
/src386/lib/libc/ndir/tst.c
		printf ("%D\t",dp->d_ino);
		printf ("%D\t",dp->d_off);
/src386/kernel/coh.386/main.c
		printf("%U\n", _entry);
/src386/kernel/coh.386/seg.c
	printf( "Bad %s segment at %X of len %X\n", t, b, s );
/src386/kernel/io.386/at.c
	printf("at%d%c: bno=%U head=%u cyl=%u <Watchdog Timeout>\n",
		printf("at%d%c: bno=%U head=%u cyl=%u <Track Flagged Bad>\n",
		printf("at%d%c: bno=%U head=%u cyl=%u",
/src386/kernel/io.386/aha.c
		printf( "build: sw:%x, drv:%x, bno:%D  ",
/src386/kernel/io.386/scsi.c
		printf("SCSI %D. blocks of size %d\n", sc.block, sc.blklen);
