head     1.13;
branch   ;
access   ;
symbols  ;
locks    piggy:1.13; strict;
comment  @ * @;


1.13
date     91.12.06.18.31.33;  author piggy;  state Exp;
branches ;
next     1.12;

1.12
date     91.12.06.18.02.09;  author piggy;  state Exp;
branches ;
next     1.11;

1.11
date     91.12.05.15.08.49;  author piggy;  state Exp;
branches ;
next     1.10;

1.10
date     91.12.02.16.36.34;  author piggy;  state Exp;
branches ;
next     1.9;

1.9
date     91.11.26.15.05.34;  author piggy;  state Exp;
branches ;
next     1.8;

1.8
date     91.11.08.11.11.03;  author piggy;  state Exp;
branches ;
next     1.7;

1.7
date     91.11.07.10.37.53;  author piggy;  state Exp;
branches ;
next     1.6;

1.6
date     91.11.06.15.11.10;  author piggy;  state Exp;
branches ;
next     1.5;

1.5
date     91.10.22.10.00.47;  author piggy;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.04.18.06.16;  author piggy;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.03.14.58.56;  author piggy;  state Exp;
branches ;
next     1.2;

1.2
date     91.09.30.13.43.46;  author piggy;  state Exp;
branches ;
next     1.1;

1.1
date     91.09.19.17.11.21;  author piggy;  state Exp;
branches ;
next     ;


desc
@main() for the tertiary boot.  Invoked by code in Startup.s.
@


1.13
log
@Substantial cosmetic changes to the sources code.
@
text
@/* tboot.c -- tertiary boot
 * This is invoked by the secondary boot to do all the things we can't
 * do in just 512 bytes.
 *
 * Includes an interpreter for builtin commands.  Just type "info" or "dir"
 * to get disk information, or a directory listing of "/".
 *
 * Can load an image up to 1 gigabyte in length.  Segments can be as
 * big as the whole file.
 *
 * La Monte H. Yarroll <piggy@@mwc.com>, September 1991
 */

#include <canon.h>
#include <sys/types.h>
#include <sys/dir.h>
#include <sys/ino.h>
#include <sys/inode.h>
#include <l.out.h>
#include <filehdr.h>
#include <string.h>
#include <sys/typed.h>

#define MAIN
#include "tboot.h"
#undef MAIN


/* Potentially communicated information from an earlier tboot.  */
TYPED_SPACE(boot_gift, 8192, T_FIFO_SIC);	/* Static In-Core FIFO.  */

main()
{
	extern uint16 myds;	/* My data segment, from Setup.s.  */
	char cmd_line[BLOCK];		/* Command typed at prompt.  */
	char cmd_name[BLOCK] = "autoboot"; /* File to boot.  */

	ino_t imageinum;		/* inode number of the boot image.  */
	struct inode imageinode;  /* Inode structure for the boot image.  */
	int imageok;		  /* Flag to identify usable executables.  */

	uint16 filemagic;		/* Magic number from file.  */
	struct load_segment imagetable[MAX_SEGS]; /* How to load a file.  */
	struct load_segment *cur_segment; /* Pointer for walking imagetable.  */ 

	uint16 data_seg;	/* Data segment register for image.  */

	uint16 boot_value;      /* Offset of boot_gift into
				 * load image data segment.
				 */

	
	/* Load the kernel here.  */
	sys_base = DEF_SYS_BASE;
	sys_base_set = FALSE;

	puts("\r\nCOHERENT Tertiary boot Version 1.0.5 alpha\r\n");
	/* Look for a valid executable.  */
	do {
		/* Find the file in the file system.  */
		while  ((ino_t) 0 == (imageinum = namei(cmd_name))){

			/* Ask for another name.
			 * Don't generate a message for name "".
			 */
			if (cmd_name[0] != '\0') {
				puts("\r\nCan't find \"");
				puts(cmd_name);
				puts("\".  Please choose another.\r\n");
				puts("If installing COHERENT, please type begin.\r\n");
			}

			/* Fetch new file names, executing them
			 * if they are builtins.  Terminate loop
			 * when we want to try another file name.
			 */
			do {
				puts("? ");
				gets(cmd_line, DIRSIZ);
				puts("\r\n");
				sanity_check("Main command loop");

			} while (interpret(cmd_line));

			/* Extract the cmd_name from the command line.
			 * Do this because strtok is destructive and we
			 * want cmd_line for later use.
			 */
			strcpy(cmd_name, cmd_line);
			strtok(cmd_name, WS);
		}

		/* We've found the image we want to boot--let's open it.  */
		if (0 == iopen(&imageinode, imageinum)) {
			puts("Can't open ");
			puts(cmd_name);
			puts(".\r\n");
			continue;
		}

		/* Read the magic number.  */
		iread(&imageinode, &filemagic,
			(fsize_t) 0, (uint16) sizeof (int));
		canint(filemagic);	/* Harmless on 80386.  */

		/* If we haven't explicitly set sys_base, default it based
		 * on the type of file we are loading.
		 */
		if (!sys_base_set) {
#ifdef VERBOSE
			puts("Assuming default sys_base.\r\n");
#endif /* VERBOSE */
			sys_base = object_sys_base(filemagic);
		}

		imageok = object2load(filemagic, &imageinode, imagetable, &data_seg);

		if (!imageok) {
			puts("File ");
			puts(cmd_name);
			puts(" is not an executable.\r\n");
				puts("Please choose another.\r\n");
			cmd_name[0] = '\0';
		}

		if (imageok && (0 == strcmp(cmd_name, "autoboot"))) {
			puts("Press <SPACE> to abort boot.\r\n");
			imageok = !wait_for_keystroke(WAIT_DELAY, (int) ' ');
			if (!imageok) {
				cmd_name[0] = '\0';
			}
		}
	} while (!imageok);

	/* ASSERTION: imageinode and imagetable describe a valid executable.  */

#ifdef VERBOSE
	puts("OK!  Loading ");
	puts(cmd_name);
	puts("...\r\n");
#endif /* VERBOSE */

	/* Now actually load everything into memory.  */
	for (cur_segment = &imagetable[0]; cur_segment->valid; ++cur_segment) {
		puts(cur_segment->message);

		ifread(&imageinode,
			cur_segment->load_toseg,
			cur_segment->load_tooffset,
			cur_segment->load_offset,
			cur_segment->load_length);
	}

	/* Does the program we just loaded want more info?  */

	/* Look up the variable "boot_gift" in the image.  */	
	puts("\r\nChecking for argument compatibility.\r\n");
	boot_value = object_nlist(filemagic, cmd_name, "boot_gift");


	if (0 != boot_value) {
#ifdef VERBOSE
		puts("Preparing arguments.\r\n");
#endif /* VERBOSE */
		/* Yes, this program can accept more information.  */
		prepare_gift(data_seg, boot_value, cmd_line);
	}

#ifdef VERBOSE
	puts("\r\nRunning ");
	puts(cmd_name);
	puts("...\r\n");
#endif /* VERBOSE */

	/* Run the image (the kernel).  */
	gotoker(SYS_START, sys_base, data_seg);
}
@


1.12
log
@Everything (including int and void functions) is now declared in tboot.h.
Include files are sought in their final homes (<sys/*>).
@
text
@d57 1
a57 1
	puts("\r\nCOHERENT Tertiary boot Version 1.0.4 alpha\r\n");
@


1.11
log
@Updating to 1.0.4 alpha.
Somewhat less verbose, shorter abort timeout, takes only <SPACE> for abort.
@
text
@d22 1
a27 1
#include "typed.h"
@


1.10
log
@Bumped revision number--rootdev code now works properly.
@
text
@d57 1
a57 1
	puts("\r\nCOHERENT Tertiary boot Version 1.0.3 alpha\r\n");
d110 1
d112 1
d127 2
a128 2
			puts("Press any key to abort boot.\r\n");
			imageok = !wait_for_keystroke(WAIT_DELAY);
d137 1
d141 1
d162 1
d164 1
d169 1
d173 1
@


1.9
log
@Revised boot message to make installation less confusing.
Updated version number to go with new boot gift--T_BIOS_ROOTDEV.
@
text
@d57 1
a57 1
	puts("\r\nCOHERENT Tertiary boot Version 1.0.2 alpha\r\n");
@


1.8
log
@Bumped version number.
Better comments, spelling, and a small bug fix in bootlib.m.
@
text
@d57 1
a57 1
	puts("\r\nCOHERENT Tertiary boot Version 1.0.1 alpha\r\n");
d70 1
@


1.7
log
@Spelling of output messages corrected.
@
text
@d57 1
a57 1
	puts("\r\nCOHERENT Tertiary boot Version 1.0 alpha\r\n");
@


1.6
log
@Moved a lot of junk off to other files as part of
adding COFF support.
Added boot gift control code.
Changed the scheme for setting sys_base--it now looks at the type of
file being booted.
@
text
@d152 1
a152 1
	puts("\r\nChecking for argument compatability.\r\n");
@


1.5
log
@Changed iattach() back to iopen().
@
text
@d20 2
a21 1
#include <coff/filehdr.h>
d23 1
d25 1
d27 1
a27 3
#ifndef	NHD
#define	NHD	1			/* # of heads per drive [1 for f9d0]. */
#endif
d29 2
a30 4
#ifndef	NSPT
#define	NSPT	9			/* # of sectors per track on floppy. */
#define	NTRK	40			/* # of tracks on floppy. */
#endif
a31 17
#define ROOTINO 2			/* Root inode # */
#define INOORG	2			/* First inode block. */
#define IBSHIFT 3			/* Shift, inode to blocks */
#define IOSHIFT 6			/* Shift, inode to bytes */
#define INOMASK 0x0007			/* Mask, inode to offset */
#define BUFSIZE 512			/* Block size. */
#define DISK	0x13			/* Disk Interrupt */
#define KEYBD	0x16			/* Keyboard Interrupt */
#define READ1	0x0201			/* read one sector */
#define DEF_SYS_BASE	0x0060		/* System load base paragraph. */
#define SYS_START	0x0100		/* System entry point. */
#define FIRST	8			/* Relative start of partition. */
#define FULLSEG	0xffff			/* Size of a whole 8086 segment. */
#define PPMASK	(unsigned short) 0xfff0 /* Mask for rounding to paragraph.  */

unsigned short sys_base;	/* Segment into which to load the kernel.  */

d34 4
a37 1
	char imagename[5*DIRSIZ+1] = "autoboot";	/* File to boot.  */
d39 2
a40 2
	struct inode imageinode;	/* Inode structure for the boot image.  */
	int imageok;			/* Flag to identify usable executables.  */
d42 1
a42 1
	unsigned int filemagic;		/* Magic number from file.  */
d46 1
a46 1
	unsigned short data_seg;	/* Data segment register for image.  */
d48 6
d55 1
d57 1
a57 2
	puts("\r\nCOHERENT Tertiary boot Version 0.9b\r\n");

d61 9
a69 7
		while  ((ino_t) 0 == (imageinum = namei(imagename))){
			/* Ask for another name.  */
			/* Don't generate a message for name "".  */
			if (imagename[0] != '\0') {
				puts("\r\nCan't find ");
				puts(imagename);
				puts(".  Please choose another.\r\n");
d78 1
a78 1
				gets(imagename, DIRSIZ);
d80 10
a89 1
			} while (interpret(imagename));
d91 1
a91 1
	
d95 1
a95 1
			puts(imagename);
d102 1
a102 1
			(fsize_t) 0, (unsigned short) sizeof (int));
d105 7
a111 14
		switch (filemagic) {
		/* Is this an i386 COFF executable?  */
		case I386MAGIC:
			puts("COFF!  COFF!\r\n");
			imageok = 
				coff2load(&imageinode, imagetable, &data_seg);
			break;
			
		/* Is this an l.out executable?  */
		case L_MAGIC:
			puts("l.out!\r\n");
			imageok =
				lout2load(&imageinode, imagetable, &data_seg);
			break;
d113 3
a115 2
		default:
			imageok = (1==2);
d117 1
a117 1
			puts(imagename);
d119 3
d123 7
a129 4
			puts("Please choose another.\r\n");
			imagename[0] = '\0';
			break;
		} /* switch (filemagic) */
d135 1
a135 1
	puts(imagename);
d149 13
d163 1
a163 1
	puts(imagename);
@


1.4
log
@Removed unneeded variables.
@
text
@d91 1
a91 1
		if (0 == iattach(&imageinode, imageinum)) {
@


1.3
log
@l.out dependencies pulled out.
@
text
@a51 2
	int i;				/* A loop counter.  */

a61 1
	char outbuff[LINESIZE];		/* Place to build output messages.  */
d63 1
a64 2
	sys_base = DEF_SYS_BASE;

@


1.2
log
@Provided for adjustable sys_base.



@
text
@d20 1
d52 4
a56 2
	ino_t imageinum;		/* inode number of the boot image.  */
	struct ldheader imageheader;	/* l.out header for boot image.  */
d58 5
d64 1
a64 1
	int i;				/* A loop counter.  */
a65 5
	/* Holders for arguments to ifread.  */
	unsigned short load_toseg;
	unsigned short load_tooffset;
	fsize_t	load_offset;
	fsize_t load_lenarg;
d67 1
a67 1
	char imagename[5*DIRSIZ+1] = "autoboot";	/* File to boot.  */
d69 1
a69 3
	sys_base = DEF_SYS_BASE;

	puts("\r\nCOHERENT Tertiary boot Version 0.9\r\n");
d102 4
a105 3
		/* Read the header.  */
		iread(&imageinode, &imageheader,
		      (fsize_t) 0, (unsigned short) sizeof(struct ldheader));
d107 14
a120 8
		/* Canonicalize the header.  */
		canint(imageheader.l_magic);
		canint(imageheader.l_flag);
		canint(imageheader.l_machine);
		canvaddr(imageheader.l_entry);
		for(i = 0; i < NLSEG; ++i) {
			cansize(imageheader.l_ssize[i]);
		}
d122 1
a122 4
		/* Is this an l.out executable?  */
		if (L_MAGIC == imageheader.l_magic) {
			imageok = (1==1);
		} else {
d130 2
a131 1
		}
d134 1
a134 1
	/* ASSERTION: the inode in imageinode points at a valid l.out file.  */
d140 3
a142 14
	if (imageheader.l_flag & LF_SEP) { /* if sep i/d executable */
		puts("\r\nLoading code segments...\r\n");
		/* Load the shared and private code segments as one.  */
		load_toseg = sys_base; /* This is where we want the OS.  */
		load_tooffset = 0;
		load_offset = sizeof(struct ldheader); /* Skip the header.  */
		load_lenarg = imageheader.l_ssize[L_SHRI] + /* Both segments as one.  */
			      imageheader.l_ssize[L_PRVI];
		
		ifread(&imageinode, load_toseg, load_tooffset,
			load_offset, load_lenarg);
		
		puts("\r\nLoading data segments...\r\n");
		/* Load both data segments.  */
d144 6
a149 6
		/* Round up to next 16 byte paragraph.  */
		load_toseg = (sys_base +
			(imageheader.l_ssize[L_SHRI] + /* Shared code */
			imageheader.l_ssize[L_PRVI] +  /* Private code */
			15) / 16),
		load_tooffset = 0,
a150 28
		load_offset = (fsize_t) sizeof(struct ldheader) + /* l.out header */
			imageheader.l_ssize[L_SHRI] + /* Shared code */
			imageheader.l_ssize[L_PRVI]; /* Private code */

		load_lenarg = imageheader.l_ssize[L_SHRD] + /* Both segments as one.  */
			imageheader.l_ssize[L_PRVD];

		ifread(&imageinode, load_toseg, load_tooffset,
			load_offset, load_lenarg);
		
	} else { /* if not sep i/d executable */
		
		puts("\r\nLoading all segments...\r\n");
		/* Load the shared and private code segments as one.  */
		load_toseg = sys_base, /* This is where we want the OS.  */
		load_tooffset = 0,
	
		load_offset = (fsize_t) sizeof(struct ldheader), /* Skip the header.  */
		load_lenarg = imageheader.l_ssize[L_SHRI] +
		       imageheader.l_ssize[L_PRVI] +
		       imageheader.l_ssize[L_SHRD] +
		       imageheader.l_ssize[L_PRVD];

		ifread(&imageinode, load_toseg, load_tooffset,
			load_offset, load_lenarg);

	} /* if not sep i/d executable */

a154 11
	/* Be sure to set the data segement appropriately.  */
	if (imageheader.l_flag & LF_SEP) { /* if sep i/d executable */
		data_seg = (unsigned short) (sys_base +
			(imageheader.l_ssize[L_SHRI] +	/* Shared code */
			 imageheader.l_ssize[L_PRVI] +	/* Private code */
			 15) / 16);	/* Rounded up a paragraph.  */
	} else {
		/* Tiny model: ds = cs */
		data_seg = sys_base;
	}

@


1.1
log
@Initial revision
@
text
@a31 1
#define BOOTLC	0x7C00			/* Boot location (ROM). */
d41 1
a41 1
#define SYS_BASE	0x0060		/* System load base paragraph. */
d47 2
d66 2
d137 1
a137 1
		load_toseg = SYS_BASE; /* This is where we want the OS.  */
d150 1
a150 1
		load_toseg = (SYS_BASE +
d170 1
a170 1
		load_toseg = SYS_BASE, /* This is where we want the OS.  */
d190 1
a190 1
		data_seg = (unsigned short) (SYS_BASE +
d196 1
a196 1
		data_seg = SYS_BASE;
d198 1
d200 1
a200 1
	gotoker(SYS_START, SYS_BASE, data_seg);
@
