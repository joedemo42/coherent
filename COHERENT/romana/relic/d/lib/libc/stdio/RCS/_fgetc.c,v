head     1.2;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.2
date     92.02.25.13.49.09;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.04.22.18.18.21;  author bin;  state Exp;
branches ;
next     ;


desc
@initial version provided by stevesf 
@


1.2
log
@update by stevesf for preserving exit status
@
text
@/*
 * libc/stdio/_fgetc.c
 * C Standard I/O Library internals.
 * Unbuffered input.
 */

#include <stdio.h>
#include <errno.h>

extern	int	_fputt();

int
_fgetc(fp) register FILE *fp;
{
	register unsigned char s[1];
	register int n, oerrno;

	if (stdout->_pt==&_fputt)	/* special kludge */
		fflush(stdout);
	fp->_cc = 0;
	oerrno = errno;			/* save old errno */
	errno = 0;
	n = EOF;			/* return value in case error */
	switch (read(fileno(fp), s, 1)) {
	case -1:			/* error */
		if (errno != EINTR)
			fp->_ff |= _FERR;
		break;
	case 0:				/* EOF */
		fp->_ff |= _FEOF;
		break;
	default:			/* success */
		n = s[0];
		break;
	}
	if (errno == 0)
		errno = oerrno;		/* preserve errno if no error */
	return n;
}

/* end of libc/stdio/_fgetc.c */
@


1.1
log
@Initial revision
@
text
@d2 3
a4 2
 * Standard I/O Library Internals
 * Unbuffered input
d10 2
d13 1
a13 2
_fgetc(fp)
register FILE	*fp;
d15 2
a16 2
	register unsigned char	s[1];
	extern	int	_fputt();
d18 1
a18 1
	if (stdout->_pt==&_fputt)		/* special kludge */
d21 1
d23 1
d25 1
a25 1
	case -1:
d29 1
a29 1
	case 0:
d32 3
a34 2
	default:
		return (s[0]);
d36 3
a38 1
	return (EOF);
d40 2
@
