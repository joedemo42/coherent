head     1.2;
access   ;
symbols  ;
locks    bin:1.2;
comment  @ * @;


1.2
date     90.04.23.23.24.24;  author bin;  state Exp;
branches ;
next	1.1;

1.1
date     90.04.23.23.22.49;  author bin;  state Exp;
branches ;
next	;


desc
@Initial MWC RCS revision.
@


1.2
log
@steve 4/23/90
Replaced lseek parameter 1 with manifest constant SEEK_CUR.
@
text
@/*
 * Standard I/O Library Internals
 * initialize file for I/O
 *	decide if buffered
 *	allocate buffer if required
 *	stuff appropriate get/put functions
 *	reset char count
 */

#include <stdio.h>


void
finit(fp)
register FILE	*fp;
{
	register int	tty;
	extern	int	_fgetc();
	extern	int	_fputc();
	extern	int	_fgetb();
	extern	int	_fputb();
	extern	int	_fputt();

	if (fp->_bp == NULL
	 && (fp->_ff&_FSTBUF || (tty=isatty(fileno(fp))) && fp!=stdout
	    || (fp->_bp = malloc(BUFSIZ)) == NULL)) {
		fp->_gt = &_fgetc;
		fp->_pt = &_fputc;
	} else if ((fp->_ff&_FSTBUF)==0 && tty && fp==stdout) {
		fp->_gt = &_fgetb;
		fp->_pt = &_fputt;
		fp->_dp = fp->_cp = fp->_bp;
		fp->_cc = 0;
	} else {
		fp->_gt = &_fgetb;
		fp->_pt = &_fputb;
		fp->_dp = fp->_cp = fp->_bp + boffset(fileno(fp));
		fp->_cc = 0;
	}
}

static
int
boffset(fd)
int	fd;
{
	extern	long	lseek();
	register long	off;

	if ((off=lseek(fd, 0L, SEEK_CUR))==-1L)
		return (0);
	else
		return ((unsigned)off%BUFSIZ);
}

int
_fginit(fp)
register FILE	*fp;
{
	finit(fp);
	return ((*fp->_gt)(fp));
}

int
_fpinit(c, fp)
register char	c;
register FILE	*fp;
{
	finit(fp);
	return ((*fp->_pt)(c, fp));
}


/*
 * Close all files (called from exit)
 */

void
_finish()
{
	register FILE	**fpp;

	for (fpp = &_fp[_NFILE-1]; fpp>=&_fp[0]; --fpp)
		if (*fpp!=NULL)
			fclose(*fpp);
}
@


1.1
log
@Initial revision
@
text
@d50 1
a50 1
	if ((off=lseek(fd, 0L, 1))==-1L)
@
