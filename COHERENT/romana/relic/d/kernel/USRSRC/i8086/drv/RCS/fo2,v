head     1.1;
branch   ;
access   ;
symbols  ;
locks    bin:1.1; strict;
comment  @# @;


1.1
date     91.06.10.10.22.29;  author bin;  state Exp;
branches ;
next     ;


desc
@initial version prov by hal
@



1.1
log
@Initial revision
@
text
@/usr/src/sys/coh/bio.c: 			sleep((char *)bp, CVBLKIO, IVBLKIO, SVBLKIO);
/usr/src/sys/coh/bio.c: 			sleep((char *)&bufneed, CVBLKIO, IVBLKIO, SVBLKIO);
/usr/src/sys/coh/bio.c: 		sleep((char *)bp, CVBLKIO, IVBLKIO, SVBLKIO);
/usr/src/sys/coh/bio.c: 		sleep((char *)bp, CVBLKIO, IVBLKIO, SVBLKIO);
/usr/src/sys/coh/clist.c: 		sleep((char *)&cltwant, CVCLIST, IVCLIST, SVCLIST);
/usr/src/sys/coh/pipe.c: 		sleep((char *)&ip->i_prx, CVPIPE, IVPIPE, SVPIPE);
/usr/src/sys/coh/pipe.c: 			sleep((char *)&ip->i_pwx, CVPIPE, IVPIPE, SVPIPE);
/usr/src/sys/coh/poll.c: 			 * Wake process if it is sleeping.
/usr/src/sys/coh/proc.c:  * wakes us up.  Since it is possible for many people to sleep on the
/usr/src/sys/coh/proc.c:  * was waiting for has completed and if not, go to sleep again.  `cl'
/usr/src/sys/coh/proc.c:  * of the sleep.  `sr' is the swap value that allows us to get swapped
/usr/src/sys/coh/proc.c: sleep(e, cl, sl, sr)
/usr/src/sys/coh/proc.c: 	 * Get ready to go to sleep and do so.
/usr/src/sys/coh/proc.c:  * Defer function to wake up all processes sleeping on the event `e'.
/usr/src/sys/coh/proc.c:  * Wake up all processes sleeping on the event `e'.
/usr/src/sys/coh/proc.c: 		sleep((char *)g, CVGATE, IVGATE, SVGATE);
/usr/src/sys/coh/seg.c: 			sleep((char *)bp, CVBLKIO, IVBLKIO, SVBLKIO);
/usr/src/sys/coh/sig.c: 		sleep((char *)&pts.pt_busy, CVPTSET, IVPTSET, SVPTSET);
/usr/src/sys/coh/sig.c: 			sleep((char *)&pts.pt_req, CVPTRET, IVPTRET, SVPTRET);
/usr/src/sys/coh/sys1.c:  * Pause.  Go to sleep on a channel that nobody will wakeup so that only
/usr/src/sys/coh/sys1.c: 		sleep((char *)&u, CVPAUSE, IVPAUSE, SVPAUSE);
/usr/src/sys/coh/sys1.c: 		sleep((char *)ppp, CVWAIT, IVWAIT, SVWAIT);
/usr/src/sys/coh/sys2.c: 		sleep( &cprocp->p_polls, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/aha.c: 		sleep( ccb, CVBLKIO, IVBLKIO, SVBLKIO );
/usr/src/sys/i8086/drv/alx.c:    	  		sleep((char *)(&AL_H_CLOSE), CVTTOUT, IVTTOUT,
/usr/src/sys/i8086/drv/alx.c: 	   	  		sleep((char *)(&tp->t_open), CVTTOUT, IVTTOUT,
/usr/src/sys/i8086/drv/alx.c: 		sleep((char *)&AL_TIM, CVTTOUT, IVTTOUT, SVTTOUT);
/usr/src/sys/i8086/drv/alx.c: 		sleep((char *)&drvl[maj].d_time, CVTTOUT, IVTTOUT, SVTTOUT);
/usr/src/sys/i8086/drv/alx.c: 	 * (Re)start output, wake sleeping processes, etc.
/usr/src/sys/i8086/drv/dg.c:  * Use kernel function sleep(), which is NOT the system call by that name.
/usr/src/sys/i8086/drv/dg.c: 	sleep((char *)&delay_tim, CVPAUSE, IVPAUSE, SVPAUSE);
/usr/src/sys/i8086/drv/dmareq.c: 		sleep((char *)bp, CVBLKIO, IVBLKIO, SVBLKIO);
/usr/src/sys/i8086/drv/gc.c: 			sleep((char *)&hstim, CVTTOUT, IVTTOUT, SVTTOUT);
/usr/src/sys/i8086/drv/hs.c: 			sleep((char *)&hstim, CVTTOUT, IVTTOUT, SVTTOUT);
/usr/src/sys/i8086/drv/lp.c:  * sleep for a while.
/usr/src/sys/i8086/drv/lp.c: 			sleep((char *)p, 0, 0, 0);
/usr/src/sys/i8086/drv/lp.c: 		 * Check for sleeping process on ready printer.
/usr/src/sys/i8086/drv/mm.c: 				sleep((char*) &istty.t_oq,
/usr/src/sys/i8086/drv/ms.c: 		sleep(&u_stts, 0x7fff, 0x7fff, 0);
/usr/src/sys/i8086/drv/msg.c:  * Msgsnd() now checks for queue removal after waking from sleep.
/usr/src/sys/i8086/drv/msg.c:  * since system calls are synchronous unless they sleep or are interrupted.
/usr/src/sys/i8086/drv/msg.c: 		 * Wakeup processes sleeping on the removed message queue.
/usr/src/sys/i8086/drv/msg.c: 			sleep( qp, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/msg.c: 			sleep( msqs, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/msg.c: 		sleep( qp, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/rp.c: 		sleep( rp->q_igate, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/rp.c: 			sleep( rp->q_ogate, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/rp.c: 		sleep( rp->q_igate, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/rs.c: 			sleep( &rstty.rt_crefc,
/usr/src/sys/i8086/drv/rs.c: 			sleep( &rstty.rt_drefc, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/rs.c: 		sleep( &rstty.rt_irefc, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/rs.c: 		sleep( &rstty.rt_orefc, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/rs.c: 			sleep( &rstty.rt_drefc, CVTTOUT, IVTTOUT, SVTTOUT);
/usr/src/sys/i8086/drv/sem.c: 	sleep( ep, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/ss.c: #define LOPRI_RETRIES	5	/* # of retries with sleep between tries */
/usr/src/sys/i8086/drv/ss.c: 	sleep((char *)&delay_tim, CVPAUSE, IVPAUSE, SVPAUSE);
/usr/src/sys/i8086/drv/st.c: 		sleep( &st, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/st.c: 		sleep( &st, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/st.c: 		sleep( &st, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/st.c:  *		Wake sleeping processes if appropriate.
/usr/src/sys/i8086/drv/st.c: 		sleep( &st, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/drv/tn.c: 		sleep( &tp->RxReq[code], CVTTIN, IVTTIN, SVTTIN );
/usr/src/sys/i8086/drv/tn.c: 		sleep( &tp->TxReq, CVTTOUT, IVTTOUT, SVTTOUT );
/usr/src/sys/i8086/src/clist.s: 	call	sleep_
/usr/src/sys/ker/swap.c: 		sleep((char *)&stimer, CVSWAP, IVSWAP, SVSWAP);
/usr/src/sys/ttydrv/tty.c: 			sleep((char *)&tp->t_oq, CVTTOUT, IVTTOUT, SVTTOUT);
/usr/src/sys/ttydrv/tty.c: 			sleep((char *)&tp->t_iq, CVTTIN, IVTTIN, SVTTIN);
/usr/src/sys/ttydrv/tty.c: 			sleep((char *)&tp->t_oq, CVTTOUT, IVTTOUT, SVTTOUT);
/usr/src/sys/ttydrv/tty.c: 			sleep((char *)&tp->t_oq, CVTTOUT, IVTTOUT, SVTTOUT);
/usr/src/sys/ldrv/ldmain.c: 		sleep( (char *)&nopen, CVSWAP, IVSWAP, SVSWAP );
/usr/src/sys/ldrv/ldswap.c: 		sleep( (char *)&stimer, CVSWAP, IVSWAP, SVSWAP );
@
