head     1.1;
branch   ;
access   ;
symbols  ;
locks    bin:1.1; strict;
comment  @ * @;


1.1
date     91.06.10.10.28.14;  author bin;  state Exp;
branches ;
next     ;


desc
@initial version prov by hal
@



1.1
log
@Initial revision
@
text
@/*
 * File:	ssqtest.c
 *
 * Purpose:	unit test of routines in ssqueue.c
 *
 * $Log$
 */

/*
 * Includes.
 */
#include <stdio.h>
#include <coherent.h>
#include <sys/buf.h>
#include <scsiwork.h>

/*
 * Definitions.
 *	Constants.
 *	Macros with argument lists.
 *	Typedefs.
 *	Enums.
 */

/*
 * Global Data.
 *	Import Variables.
 *	Export Variables.
 *	Local Variables.
 */

/*
 * Functions.
 *	Import Functions.
 *	Export Functions.
 *	Local Functions.
 */
extern char * calloc();
extern void ssq_wr_tail();
extern scsi_work_t * ssq_rd_head();
extern scsi_work_t * ssq_rm_head();

void main();

/*
 * main()
 */
void main()
{
	char cmd;
	int node_num = 0;
	scsi_work_t * sw;

	do {
		printf("<w>rite/<r>ead/<d>elete/<q>uit: ");
		scanf(" %c", &cmd);
		switch(cmd){
		case 'w':
			sw = (scsi_work_t *)calloc(1, sizeof(*sw));
			node_num++;
			sw->sw_type = node_num;
			ssq_wr_tail(sw);
			printf("Node #%2d written to tail of queue\n", node_num);
			break;
		case 'r':
			if (sw = ssq_rd_head())
				printf("Node #%2d read from head of queue\n", sw->sw_type);
			else
				printf("Can't read head of queue - queue empty\n");
			break;
		case 'd':
			if (sw = ssq_rm_head()) {
				free(sw);
				printf("Node #%2d deleted from head of queue\n", sw->sw_type);
			} else
				printf("Can't delete head of queue - queue empty\n");
			break;
		}
	} while (cmd != 'q');
	printf("Done\n");
}
@
