head     1.5;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.5
date     91.04.17.03.49.56;  author root;  state Exp;
branches ;
next	1.4;

1.4
date     91.04.16.01.47.29;  author root;  state Exp;
branches ;
next	1.3;

1.3
date     91.03.25.19.05.25;  author root;  state Exp;
branches 1.3.1.1;
next	1.2;

1.2
date     91.03.25.13.04.04;  author root;  state Exp;
branches ;
next	1.1;

1.1
date     91.03.22.17.39.06;  author root;  state Exp;
branches ;
next	;

1.3.1.1
date     91.04.11.15.59.53;  author root;  state Exp;
branches ;
next	;


desc
@Queueing routines for HD device driver.
@


1.5
log
@Turn off debug printing.
@
text
@/*
 * File:	ssqueue.c
 *
 * Purpose:
 *	Queueing routines for Seagate SCSI driver.
 *	Should be generalizable for other hard drives.
 *
 * $Log:	/usr/src/sys/i8086/drv/RCS/ssqueue.c,v $
 * Revision 1.4	91/04/16  01:47:29	root
 * Use BUF rather than scsi_work_t as queue element type.
 * 
 * Revision 1.3.1.1	91/04/11  15:59:53	root
 * debug printing added
 * 
 * Revision 1.3	91/03/25  19:05:25	root
 * run at high priority
 * 
 * Revision 1.2	91/03/25  13:04:04	root
 * Minor code fixes.  Now passes unit test.
 * 
 * Revision 1.1	91/03/22  17:39:06	root
 * Initial code - not tested yet
 * 
 */

/*
 * Includes.
 */
#include <coherent.h>
#include <sys/buf.h>

/*
 * Definitions.
 *	Constants.
 *	Macros with argument lists.
 *	Typedefs.
 *	Enums.
 */

/*
 * Global Data.
 *	Import Variables.
 *	Export Variables.
 *	Local Variables.
 */
static BUF	* ssq_head;	/* point to first node */
static BUF	* ssq_tail;	/* point to last node */
static int		ssq_count;	/* number of nodes in the queue */

/*
 * Functions.
 *	Import Functions.
 *	Export Functions.
 *	Local Functions.
 */
void ssq_wr_tail();
BUF * ssq_rd_head();
BUF * ssq_rm_head();

/*
 * Debug macros.
 */
#if 0
#define QSIZE	printf("Q%d:", ssq_count)
#else
#define QSIZE
#endif

/*
 * ssq_wr_tail()
 *
 * Append a BUF object to the doubly-linked queue.
 * Object to be inserted has been allocated by the caller.
 * Run at high priority.
 */
void ssq_wr_tail(bp)
BUF * bp;
{
	int s;

	s = sphi();
	if (ssq_count == 0) {
		ssq_head = ssq_tail = bp;
		bp->b_actf = bp->b_actl = NULL;
	} else {
		ssq_tail->b_actf = bp;
		bp->b_actf = NULL;
		bp->b_actl = ssq_tail;
		ssq_tail = bp;
	}
	ssq_count++;
QSIZE;
	spl(s);
}

/*
 * ssq_rd_head()
 *
 * Nondestructively fetch the head entry in the queue - i.e., this routine
 * does not remove an entry from the queue (see ss_rm_head() for that).
 * Return NULL if queue is empty, else return pointer to head item.
 */
BUF * ssq_rd_head()
{
	return ssq_head;
}

/*
 * ssq_rm_head()
 *
 * Delete head item from the queue.  Return a pointer to the node deleted,
 * or NULL if the queue was already empty.
 * Run at high priority.
 *
 * This routine does NOT deallocate the node.  That must be done by the
 * calling function after this routine runs.
 */
BUF * ssq_rm_head()
{
	BUF * ret;
	int s;

	s = sphi();
	if (ssq_count > 0) {
		ret = ssq_head;
		if (ssq_count == 1) {
			ssq_head = ssq_tail = NULL;
		} else {
			ssq_head = ssq_head->b_actf;
			ssq_head->b_actl = NULL;
		}
		ssq_count--;
QSIZE;
	} else
		ret = NULL;
	spl(s);

	return ret;
}
@


1.4
log
@Use BUF rather than scsi_work_t as queue element type.
@
text
@d9 3
d63 1
a63 1
#if 1
@


1.3
log
@run at high priority
@
text
@d9 6
a27 1
#include <scsiwork.h>
d43 2
a44 2
static scsi_work_t	* ssq_head;	/* point to first node */
static scsi_work_t	* ssq_tail;	/* point to last node */
d54 2
a55 2
scsi_work_t * ssq_rd_head();
scsi_work_t * ssq_rm_head();
d58 9
d69 1
a69 1
 * Append a scsi_work_t object to the doubly-linked queue.
d73 2
a74 2
void ssq_wr_tail(sw)
scsi_work_t * sw;
d80 2
a81 2
		ssq_head = ssq_tail = sw;
		sw->sw_actf = sw->sw_actl = NULL;
d83 4
a86 4
		ssq_tail->sw_actf = sw;
		sw->sw_actf = NULL;
		sw->sw_actl = ssq_tail;
		ssq_tail = sw;
d89 1
d100 1
a100 1
scsi_work_t * ssq_rd_head()
d115 1
a115 1
scsi_work_t * ssq_rm_head()
d117 1
a117 1
	scsi_work_t * ret;
d126 2
a127 2
			ssq_head = ssq_head->sw_actf;
			ssq_head->sw_actl = NULL;
d130 1
@


1.3.1.1
log
@debug printing added
@
text
@a8 3
 * Revision 1.3	91/03/25  19:05:25	root
 * run at high priority
 * 
a52 9
 * Debug macros.
 */
#if 1
#define QSIZE	printf("Q%d:", ssq_count)
#else
#define QSIZE
#endif

/*
a74 1
QSIZE;
a114 1
QSIZE;
@


1.2
log
@Minor code fixes.  Now passes unit test.
@
text
@d9 3
d57 1
d62 3
d75 1
d95 1
d103 1
d105 1
d117 1
@


1.1
log
@Initial code - not tested yet
@
text
@d8 4
a11 1
 * $Log$
d18 1
d101 1
a101 1
			ssq_head->sw_actl = NULL
@
