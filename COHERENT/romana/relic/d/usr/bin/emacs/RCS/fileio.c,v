head     1.4;
branch   ;
access   ;
symbols  ;
locks    bin:1.4;
comment  @ * @;


1.4
date     91.07.16.14.00.06;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     91.03.28.15.15.44;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     91.02.07.15.43.17;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.02.06.20.15.04;  author bin;  state Exp;
branches ;
next     ;


desc
@src pulled from 310 ship disk
@


1.4
log
@cef changed warning messages when read/write permissions are not proper
@
text
@/*
 * The routines in this file read and write ASCII files from the
 * disk.  All of the knowledge about files are here.  A better message
 * writing scheme should be used.
 */
#include	<stdio.h>
#include	"ed.h"
#include	<access.h>

FILE	*ffp;				/* File pointer, all functions.	*/

/*
 * Open a file for reading.
 */
ffropen(fn)
uchar	*fn;
{
	if ((ffp=fopen(fn, "r")) == NULL)
		if (access(fn, AEXISTS)) /* access returns 0 on success */
			return (FIOFNF); /* new file */
		else
			return (FIOERR); /* error */
	return (FIOSUC);
}

/*
 * Open a file for writing.
 * Return TRUE if all is well, and FALSE on error (cannot create).
 */
ffwopen(fn, w)
uchar	*fn, *w;
{
#if	VMS
	register int	fd;

	if ((fd=creat(fn, 0666, "rfm=var", "rat=cr")) < 0
	|| (ffp=fdopen(fd, w)) == NULL) {
#else
	if ((ffp=fopen(fn, w)) == NULL) {
#endif
		mlwrite("Cannot open file for writing");
		return (FIOERR);
	}
	return (FIOSUC);
}

/*
 * Close a file.
 * Should look at the status in all systems.
 */
ffclose()
{
#if	V7
	if (fclose(ffp) != FALSE) {
		mlwrite("Error closing file");
		return (FIOERR);
	}
	return (FIOSUC);
#endif
	fclose(ffp);
	return (FIOSUC);
}

/*
 * Write a line to the already opened file.  The "buf" points to the
 * buffer, and the "nbuf" is its length, less the free newline.
 * Return the status.
 * Check only at the newline.
 */
ffputline(buf, nbuf)
#ifdef	SLOW
register uchar	buf[];
#else
uchar	buf[];
#endif
{
	register int	i;

#ifdef	SLOW
	for (i=0; i<nbuf; ++i)
		putc(buf[i]&0xFF, ffp);
#else
	fwrite(buf, 1, nbuf, ffp);
#endif
	putc('\n', ffp);
	if (ferror(ffp) != FALSE) {
		mlwrite("Write I/O error");
		return (FIOERR);
	}
	return (FIOSUC);
}

/*
 * Read a line from a file and store the bytes in the supplied buffer.
 * The "nbuf" is the length of the buffer.  Complain about long lines
 * and lines at the end of the file that don't have a newline present.
 * Check for I/O errors too.  Return status.
 */
ffgetline(buf, nbuf)
register uchar	buf[];
{
	register int	c;
	register int	i;

	i = 0;
#ifdef	SLOW
	while ((c=getc(ffp))!=EOF && c!='\n') {
		if (i >= nbuf-1) {
			mlwrite("File has long line");
			buf[i] = 0;
			ungetc(c, ffp);
			return (FIOSUC);	/* Make long lines load	*/
		}
		buf[i++] = c;
	}
#else
	if (fgets(buf, nbuf, ffp) != NULL) {
		for (i=0; i<nbuf-1; i++) {
			if ((c = buf[i]) == '\n') {
				buf[i] = 0;
				goto lineread;
			}
		}
		mlwrite("File has long line");
		buf[i] = 0;
		return FIOSUC;
	} else
		c = EOF;
lineread:
#endif
	if (c == EOF) {
		if (ferror(ffp) != FALSE) {
			mlwrite("File read error");
			return (FIOERR);
		}
		if (i != 0) {
			mlwrite("File has funny line at EOF");
			buf[i]=0;		/* Make funny line show up. */
			return (FIOSUC);
		}
		return (FIOEOF);
	}
	buf[i] = 0;
	return (FIOSUC);
}
@


1.3
log
@cef modified for 8 bit character support
@
text
@d8 1
d19 4
a22 1
		return (FIOFNF);
@


1.2
log
@emacs updated by cef for 8 bit character support
@
text
@d52 1
a52 1
		return(FIOERR);
d54 1
a54 1
	return(FIOSUC);
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
char	*fn;
d27 1
a27 1
char	*fn, *w;
d68 1
a68 1
register char	buf[];
d70 1
a70 1
char	buf[];
d96 1
a96 1
register char	buf[];
@
