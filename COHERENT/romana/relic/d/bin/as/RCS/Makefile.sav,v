head     1.1;
access   ;
symbols  ;
locks    bin:1.1;
comment  @ * @;


1.1
date     91.02.12.15.23.07;  author bin;  state Exp;
branches ;
next	;


desc
@new version from stevesf for v310
@



1.1
log
@Initial revision
@
text
@# AS -- make file.
# TARG needs to be defined as the target procesor so that the right
# asmch.h gets included in asm.h

CC = exec /bin/cc
AS = exec /bin/as
CFLAGS = -O -I$(HOME) -I/usr/src/include -I$(HOME)/$(TARG) -c
ASFLAGS = -gox
LDFLAGS =
HOME = .
PDP = pdp11
M68 = m6000
Z01 = z8001
Z02 = z8002
I48 = i8048
I86 = i8086
I89 = i8089
PDPAS = /usr/bin/pdp11as
M68AS = /usr/bin/m68000as
Z01AS = /usr/bin/z8001as
Z02AS = /usr/bin/z8002as
I48AS =
I86AS = /usr/bin/i8086as
I89AS = 

PDPOBJS = $(PDP)/asm.o $(PDP)/subr.o $(PDP)/sym.o $(PDP)/data.o $(PDP)/asmlex.o \
	$(PDP)/list.o $(PDP)/asmexpr.o \
	$(PDP)/asmout.o $(PDP)/pst.o $(PDP)/machine.o $(PDP)/grindy.o \
	$(PDP)/as.vers.o

M68OBJS = $(M68)/asm.o $(M68)/subr.o $(M68)/sym.o $(M68)/data.o \
	$(M68)/asmlex.o $(M68)/list.o $(M68)/asmexpr.o $(M68)/grindy.o \
	$(M68)/machine.o $(M68)/pst.o $(M68)/asmout.o $(M68)/as.vers.o

Z01OBJS = $(Z01)/asm.o $(Z01)/subr.o $(Z01)/sym.o $(Z01)/data.o $(Z01)/asmlex.o \
	$(Z01)/list.o $(Z01)/asmexpr.o $(Z01)/grindy.o \
	$(Z01)/machine.o $(Z01)/pst.o $(Z01)/asmout.o $(Z01)/as.vers.o

Z02OBJS = $(Z02)/asm.o $(Z02)/subr.o $(Z02)/sym.o $(Z02)/data.o $(Z02)/asmlex.o \
	$(Z02)/list.o $(Z02)/asmexpr.o $(Z02)/grindy.o \
	$(Z02)/machine.o $(Z02)/pst.o $(Z02)/asmout.o $(Z02)/as.vers.o


I48OBJS = $(I48)/asm.o $(I48)/subr.o $(I48)/sym.o $(I48)/data.o $(I48)/asmlex.o \
	$(I48)/list.o $(I48)/asmexpr.o $(I48)/grindy.o \
	$(I48)/machine.o $(I48)/pst.o $(I48)/asmout.o $(I48)/as.vers.o

I86OBJS = $(I86)/asm.o $(I86)/subr.o $(I86)/sym.o $(I86)/data.o $(I86)/asmlex.o \
	$(I86)/list.o $(I86)/asmexpr.o $(I86)/grindy.o \
	$(I86)/machine.o $(I86)/pst.o $(I86)/asmout.o $(I86)/addr.o \
	$(I86)/as.vers.o

I89OBJS = $(I89)/asm.o $(I89)/subr.o $(I89)/sym.o $(I89)/data.o $(I89)/asmlex.o \
	$(I89)/list.o $(I89)/asmexpr.o $(I89)/grindy.o \
	$(I89)/machine.o $(I89)/pst.o $(I89)/asmout.o $(I89)/addr.o $(I89)/as.vers.o

$(PDP)/as:	$(PDPOBJS)
	$(CC) $(LDFLAGS) -o $(PDP)/as $(PDPOBJS)

$(M68)/as:	$(M68OBJS) 
	$(CC) $(LDFLAGS) -o $(M68)/as $(M68OBJS)

$(Z01)/as:	$(Z01OBJS)
	$(CC) $(LDFLAGS) -o $(Z01)/as $(Z01OBJS)

$(Z02)/as:	$(Z02OBJS)
	$(CC) $(LDFLAGS) -o $(Z02)/as $(Z02OBJS)

$(I48)/as:	$(I48OBJS)
	$(CC) $(LDFLAGS) -o $(I48)/as $(I48OBJS)

$(I86)/as:	$(I86OBJS)
	$(CC) $(LDFLAGS) -o $(I86)/as $(I86OBJS)

$(I89)/as:	$(I89OBJS)
	$(CC) $(LDFLAGS) -o $(I89)/as $(I89OBJS)

$(TARG)/grindy.o: asm.h grindy.c
	$(CC) $(CFLAGS) grindy.c
	mv grindy.o $(TARG)

# This kludge was put in because pdp11's grindy is made from a .s instead
# of a .c, and a way was needed to keep make from getting confused about
# the different ways to make $(TARG)/grindy.o.
$(TARG)/grindy.s.o: $(TARG)/grindy.s
	$(AS) $(ASFLAGS) grindy.s.o $(TARG)/grindy.s
	mv grindy.s.o $(TARG)/grindy.s.o

$(TARG)/subr.o: asm.h subr.c
	$(CC) $(CFLAGS) subr.c
	mv subr.o $(TARG)

$(TARG)/sym.o: asm.h sym.c
	$(CC) $(CFLAGS) sym.c
	mv sym.o $(TARG)

$(TARG)/data.o: asm.h data.c
	$(CC) $(CFLAGS) data.c
	mv data.o $(TARG)

$(TARG)/asmlex.o: asm.h asmlex.c
	$(CC) $(CFLAGS) asmlex.c
	mv asmlex.o $(TARG)

$(TARG)/asm.o: asm.h asm.c
	$(CC) $(CFLAGS) asm.c
	mv asm.o $(TARG)

$(TARG)/list.o: asm.h list.c
	$(CC) $(CFLAGS) list.c
	mv list.o $(TARG)

$(TARG)/asmexpr.o: asm.h asmexpr.c
	$(CC) $(CFLAGS) asmexpr.c
	mv asmexpr.o $(TARG)

$(TARG)/asmout.o: asm.h $(TARG)/asmout.c
	$(CC) $(CFLAGS) $(TARG)/asmout.c
	mv asmout.o $(TARG)

$(TARG)/pst.o: asm.h $(TARG)/pst.c
	$(CC) $(CFLAGS) $(TARG)/pst.c
	mv pst.o $(TARG)

$(TARG)/machine.o: asm.h $(TARG)/machine.c
	$(CC) $(CFLAGS) $(TARG)/machine.c
	mv machine.o $(TARG)

$(TARG)/promsplit.o: $(TARG)/promsplit.c
	$(CC) $(CFLAGS) $(TARG)/promsplit.c
	mv promsplit.o $(TARG)

$(TARG)/addr.o: asm.h $(TARG)/addr.c
	$(CC) $(CFLAGS) $(TARG)/addr.c
	mv addr.o $(TARG)

PDPSRCS = asm.c subr.c sym.c data.c asmlex.c list.c asmexpr.c \
	$(PDP)/asmout.c $(PDP)/pst.c $(PDP)/machine.c $(PDP)/grindy.s

M68SRCS = asm.c subr.c sym.c data.c asmlex.c list.c asmexpr.c grindy.c \
	$(M68)/machine.c $(M68)/pst.c $(M68)/asmout.c

Z01SRCS = asm.c subr.c sym.c data.c asmlex.c list.c asmexpr.c grindy.c \
	$(Z01)/machine.c $(Z01)/pst.c $(Z01)/asmout.c

Z02SRCS = asm.c subr.c sym.c data.c asmlex.c list.c asmexpr.c grindy.c \
	$(Z02)/machine.c $(Z02)/pst.c $(Z02)/asmout.c

I48SRCS = asm.c subr.c sym.c data.c asmlex.c list.c asmexpr.c grindy.c \
	$(I48)/machine.c $(I48)/pst.c $(I48)/asmout.c

I86SRCS = asm.c subr.c sym.c data.c asmlex.c list.c asmexpr.c grindy.c \
	$(I86)/machine.c $(I86)/pst.c $(I86)/asmout.c $(I86)/addr.c

I89SRCS = asm.c subr.c sym.c data.c asmlex.c list.c asmexpr.c grindy.c \
	$(I89)/machine.c $(I89)/pst.c $(I89)/asmout.c $(I89)/addr.c

$(PDP)/as.vers.o: $(PDPSRCS)
	version `pwd` $(PDP)/as $(PDPSRCS) > $(PDP)/as.vers.s
	$(AS) -o $(PDP)/as.vers.o $(PDP)/as.vers.s
	rm $(PDP)/as.vers.s

$(M68)/as.vers.o: $(M68SRCS)
	version `pwd` $(M68)/as $(M68SRCS) > $(M68)/as.vers.s
	$(AS) -o $(M68)/as.vers.o $(M68)/as.vers.s
	rm $(M68)/as.vers.s

$(Z01)/as.vers.o: $(Z01SRCS)
	version `pwd` $(Z01)/as $(Z01SRCS) > $(Z01)/as.vers.s
	$(AS) -o $(Z01)/as.vers.o $(Z01)/as.vers.s
	rm $(Z01)/as.vers.s

$(Z02)/as.vers.o: $(Z02SRCS)
	version `pwd` $(Z02)/as $(Z02SRCS) > $(Z02)/as.vers.s
	$(AS) -o $(Z02)/as.vers.o $(Z02)/as.vers.s
	rm $(Z02)/as.vers.s

$(I48)/as.vers.o: $(I48SRCS)
	version `pwd` $(I48)/as $(I48SRCS) > $(I48)/as.vers.s
	$(AS) -o $(I48)/as.vers.o $(I48)/as.vers.s
	rm $(I48)/as.vers.s

$(I86)/as.vers.o: $(I86SRCS)
	version `pwd` $(I86)/as $(I86SRCS) > $(I86)/as.vers.s
	$(AS) -o $(I86)/as.vers.o $(I86)/as.vers.s
	rm $(I86)/as.vers.s

$(I89)/as.vers.o: $(I89SRCS)
	version `pwd` $(I89)/as $(I89SRCS) > $(I89)/as.vers.s
	$(AS) -o $(I89)/as.vers.o $(I89)/as.vers.s
	rm $(I89)/as.vers.s
@
