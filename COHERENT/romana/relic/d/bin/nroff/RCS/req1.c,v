head     1.6;
branch   ;
access   ;
symbols  ;
locks    bin:1.6;
comment  @ * @;


1.6
date     93.04.05.08.32.18;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     91.09.11.07.39.03;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     91.05.29.15.24.58;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     91.04.16.17.50.25;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.19.20.51.10;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.02.04.16.55.27;  author bin;  state Exp;
branches ;
next     ;


desc
@init ver prov by stevesf
@


1.6
log
@Steve various fixes and fwtable changes.
@
text
@/*
 * req1.c
 * Nroff/Troff.
 * Requests (a-m).
 */

#include <ctype.h>
#include "roff.h"

/*
 * User abort.
 */
req_ab()
{
	register char *bp;

	bp = nextarg(miscbuf, NULL, 0);
	if (*bp != '\0')
		fprintf(stderr, "%s\n", bp);
	else
		fprintf(stderr, "User abort\n");
	leave(1);
}

/*
 * Turn adjust mode on and set adjust type.
 */
req_ad(argc, argv) int argc; char *argv[];
{
	adm = 1;
	if (argc < 2)
		return;
	switch (argv[1][0]) {
	case 'l':
		adj = LJUS;
		return;
	case 'c':
		adj = CJUS;
		return;
	case 'r':
		adj = RJUS;
		return;
	case 'b':
	case 'u':
		adj = FJUS;
		return;
	default:
		printe("bad adjustment type");
		return;
	}
}

/*
 * Assign format.
 */
req_af(argc, argv) int argc; char *argv[];
{
	register REG *rp;
	int n;
	char name[2];
	register char *p, c;

	argname(argv[1], name);
	rp = getnreg(name);
	if (index("iIaA", c=argv[2][0])) {
		rp->n_reg.r_form = c;
		return;
	}
	if (isascii(c) && isdigit(c)) {
		n = '0';
		p = &argv[2][1];
		while (isascii(c = *p++) && isdigit(*p))
			;
		if (p-argv[2] > 9) {
			printe("field with too large");
			return;
		}
		rp->n_reg.r_form = '0' + p-argv[2];
	}
}

/*
 * Append to macro.
 */
req_am(argc, argv) int argc; char *argv[];
{
	register REG *rp;
	register MAC *mp;
	char name[2];

	argname(argv[1], name);
	if ((rp=findreg(name, RTEXT)) == NULL) {
		rp = makereg(name, RTEXT);
		mp = &rp->t_reg.r_macd;
	} else {
		for (mp = &rp->t_reg.r_macd;
		     mp->t_div.m_next;
		     mp=mp->t_div.m_next)
			;
		mp->t_div.m_next = (MAC *)nalloc(sizeof (*mp));
		mp = mp->t_div.m_next;
	}
	deftext(mp, argv[2]);
}

/*
 * Append to string.
 */
req_as(argc, argv) int argc; char *argv[];
{
	register REG *rp;
	register MAC *mp;
	char name[2];
	register char *cp;

	argname(argv[1], name);
	if ((rp=findreg(name, RTEXT)) == NULL) {
		rp = makereg(name, RTEXT);
		mp = &rp->t_reg.r_macd;
	} else {
		for (mp = &rp->t_reg.r_macd; mp->t_div.m_next; mp=mp->t_div.m_next)
			;
		mp->t_div.m_next = (MAC *)nalloc(sizeof *mp);
		mp = mp->t_div.m_next;
	}
	cp = nalloc(strlen(argv[2]) + 1);
	strcpy(cp, argv[2]);
	mp->t_div.m_next = NULL;
	mp->t_div.m_type = MTEXT;
	mp->t_div.m_core = cp;
}

/*
 * Embolden.					(.bd)	$$TO_DO$$
 */
req_bd(argc, argv) int argc; char *argv[];
{
	printu(".bd");
}

/*
 * Overstrike bold command.
 * !V7.
 */
req_bo(argc, argv) int argc; char *argv[];
{
	if (argc == 1)
		enb++;
	else
		enb = atoi(argv[1]);
}

/*
 * Begin page.
 */
req_bp(argc, argv) int argc; char *argv[];
{
	setbreak();
	if (argc >= 2) {
		npn = numb(argv[1], SMUNIT, SDUNIT);
		pspace();
		return;
	}
	if (nsm == 0)
		pspace();
}

/*
 * Break.
 */
req_br()
{
	setbreak();
}

/*
 * Set nobreak control character.
 */
req_c2(argc, argv) int argc; char *argv[];
{
	nbc = argc>1 ? argv[1][0] : '\'';
}

/*
 * Set control character.
 */
req_cc(argc, argv) int argc; char *argv[];
{
	ccc = argc>1 ? argv[1][0] : '.';
}

/*
 * Center all text.
 */
req_ce(argc, argv) int argc; char *argv[];
{
	setbreak();
	cec = number(argv[1], SMUNIT, SDUNIT, 0, 0, 1);
}

/*
 * Change trap location.
 */
req_ch(argc, argv) int argc; char *argv[];
{
	register TPL **tpp, *tp;
	register DIV *dp;
	int rpos, apos;
	char name[2];

	dp = mdivp;
	argname(argv[1], name);
	for (tpp = &dp->d_stpl; tp = *tpp; tpp = &tp->t_next) {
		if (name[0]==tp->t_name[0] && name[1]==tp->t_name[1]) {
			if (dp->d_trap == tp)
				dp->d_trap = tp->t_next;
			if (dp->d_ctpp == tp)
				dp->d_ctpp = tp->t_next;
			*tpp = tp->t_next;
			nfree(tp);
			break;
		}
	}
	if (argc >= 3) {
		rpos = numb(argv[2], SMVLSP, SDVLSP);
		apos = rpos>=0 ? rpos : pgl+rpos;
		for (tpp = &dp->d_stpl; tp = *tpp; tpp = &tp->t_next) {
			if (apos <= tp->t_apos)
				break;
		}
		tp = (TPL *)nalloc(sizeof (TPL));
		tp->t_rpos = rpos;
		tp->t_apos = apos;
		tp->t_name[0] = name[0];
		tp->t_name[1] = name[1];
		tp->t_next = *tpp;
		*tpp = tp;
		if (dp->d_trap==tp->t_next && apos>=0)
			dp->d_trap = tp;
		if (dp->d_ctpp==tp->t_next && apos>=dp->d_rpos)
			dp->d_ctpp = tp;
	}
}

/*
 * Copy input verbatim to output.
 * !V7.
 * Added by steve 12/21/90, usage modified 6/19/91.
 */
req_co(argc, argv) int argc; char *argv[];
{
	register char *cp, *endmark;
	register int c, i;
	char *cp1;

	putchar('\n');
	for (i = 1; i < argc; i++)
		printf("%d ", number(argv[i], SMUNIT, SDUNIT, 0, 0, 0));
	cp = endmark = ".co";
	while ((c = getl(1)) != EOF) {
		if (c == *cp) {			/* match next endmark char */
			cp++;
			continue;
		} else if (c == '\n' && *cp == '\0')
			return;			/* matched endmark, done */
		for (cp1 = endmark; cp1 < cp; )
			putchar(*cp1++);	/* copy matched portion */
		putchar(c);			/* copy this character */
		cp = endmark;			/* try again from start */
	}
	printe(".co: unexpected EOF before %s", endmark);
}

/*
 * Set constant character space mode.
 */
req_cs(argc, argv) int argc; char *argv[];
{
	char name[2];
	register int n, ems;

	argname(argv[1], name);
	if ((n = font_number(name, ".cs: ")) < 0)
		return;
	ems = number(argv[3], SMPOIN, SDPOIN, 0, 0, unit(SMEMSP, SDEMSP));
	dev_cs(n, numb(argv[2], (long)ems, 36L));
}

/*
 * Continous underline.
 * This just does a .ul.
 * This is wrong, .cu is supposed to underline spaces as well as words.
 */
req_cu(argc, argv) int argc; char *argv[];
{
	req_ul(argc, argv);
}

/*
 * Divert and append output to macro.
 */
req_da(argc, argv) int argc; char *argv[];
{
	register REG *rp;
	register MAC *mp;
	char name[2];

	if (argc < 2) {
		enddivn();
		return;
	}
	argname(argv[1], name);
	newdivn(name);
	if ((rp=findreg(name, RTEXT)) == NULL) {
		rp = makereg(name, RTEXT);
		cdivp->d_seek = tmpseek;
		mp = &rp->t_reg.r_macd;
		mp->t_div.m_next = NULL;
	} else {
		cdivp->d_maxh = rp->t_reg.r_maxh;
		cdivp->d_maxw = rp->t_reg.r_maxw;
		for (mp = &rp->t_reg.r_macd; mp->t_div.m_next; mp=mp->t_div.m_next)
			;
	}
	mp->t_div.m_type = MDIVN;
	mp->t_div.m_size = 0;
	mp->t_div.m_core = NULL;
	mp->t_div.m_seek = tmpseek;
	cdivp->d_macp = mp;
}

/*
 * Define a special character.
 * Added by steve 4/16/91.
 */
req_dc(argc, argv) int argc; char *argv[];
{
	char name[2];

	argname(argv[1], name);
	spc_def(name, (argc < 3) ? "" : argv[2]);
}

/*
 * Define a macro.
 */
req_de(argc, argv) int argc; char *argv[];
{
	register REG *rp;
	char name[2];

	argname(argv[1], name);
	rp = makereg(name, RTEXT);
	deftext(&rp->t_reg.r_macd, argv[2]);
}

/*
 * Divert output to macro.
 */
req_di(argc, argv) int argc; char *argv[];
{
	register REG *rp;
	char name[2];

	if (argc < 2) {
		enddivn();
		return;
	}
	argname(argv[1], name);
	newdivn(name);
	rp = makereg(name, RTEXT);
	cdivp->d_macp = &rp->t_reg.r_macd;
	cdivp->d_seek = tmpseek;
	rp->t_reg.r_macd.t_div.m_next = NULL;
	rp->t_reg.r_macd.t_div.m_type = MDIVN;
	rp->t_reg.r_macd.t_div.m_size = 0;
	rp->t_reg.r_macd.t_div.m_core = NULL;
	rp->t_reg.r_macd.t_div.m_seek = tmpseek;
}

/*
 * Define a string.
 */
req_ds(argc, argv) int argc; char *argv[];
{
	register REG *rp;
	char name[2];
	register char *cp;

	argname(argv[1], name);
	rp = makereg(name, RTEXT);
	cp = nalloc(strlen(argv[2]) + 1);
	strcpy(cp, argv[2]);
	rp->t_reg.r_macd.t_div.m_next = NULL;
	rp->t_reg.r_macd.t_div.m_type = MTEXT;
	rp->t_reg.r_macd.t_div.m_core = cp;
}

/*
 * Set a diversion trap.			(.dt)	$$TO_DO$$
 */
req_dt(argc, argv) int argc; char *argv[];
{
	printu(".dt");
}

/*
 * Set escape character.
 */
req_ec(argc, argv) int argc; char *argv[];
{
	esc = argc>1 ? argv[1][0] : '\\';
}

/*
 * Else part of if-else.
 */
req_el(argc, argv) int argc; char *argv[];
{
	if (iestackx < 0) {
		printe(".el without .ie");
		return;
	}
	do_cond(!iestack[iestackx--], nextarg(miscbuf, NULL, 0));
}

/*
 * Set end macro.
 */
req_em(argc, argv) int argc; char *argv[];
{
	argname(argv[1], endtrap);
}

/*
 * Turn off escape mechanism.
 */
req_eo()
{
	esc = '\0';
}

/*
 * Change environments.
 */
req_ev(argc, argv) int argc; char *argv[];
{
	register int old, new;

	if (argc < 2) {
		dprintd(DBGENVR, "pop environment\n");
		if (envs == 0) {
			printe("cannot pop environment");
			return;
		}
		old = envstak[envs];
		new = envstak[--envs];
	} else {
		new = numb(argv[1], SMUNIT, SDUNIT);
		dprint2(DBGENVR, "push environment %d\n", new);
		if (new < 0 || new >= ENVS) {
			printe("environment does not exist");
			return;
		}
		if (envs >= ENVSTACK) {
			printe("environments stacked too deeply");
			return;
		}
		old = envstak[envs];
		envstak[++envs] = new;
	}
	dprint2(DBGENVR|DBGFILE, "writing environment %d\n", old);
	envsave(old);
	if (envinit[new] == 0) {
		dprint2(DBGENVR, "initializing env %d\n", new);
		envset();
		envinit[new] = 1;
		setfont("R", 1);
	} else {
		dprint2(DBGENVR|DBGFILE, "reading environment %d\n", new);
		envload(new);
	}
}

/*
 * Exit from nroff.
 */
req_ex()
{
	leave(0);
}

/*
 * Flush the buffers (used for transparent flushing...)
 * !V7.
 */
req_fb()
{
	flushl(linebuf, llinptr);	/* Flush the buffer... */
	llinptr = linebuf;		/* Reset the buffer... */
}

/*
 * Set field delimiter and pad character.	(.fc)	$$TO_DO$$
 */
req_fc(argc, argv) int argc; char *argv[];
{
	printu(".fc");
}

/*
 * Display a list of fonts to standard error.
 * !V7.
 */
req_fd()
{
	font_display();
}

/*
 * Turn on fill mode.
 */
req_fi()
{
	setbreak();
	fill = 1;
}

/*
 * Flush.
 */
req_fl()
{
	setbreak();
}

/*
 * Define font at position.
 */
req_fp(argc, argv) int argc; char *argv[];
{
	register int n;

	n = argv[1][0] - '0';
	if ((1 <= n) && (n <= 9)) {
		mapfont[n][0] = argv[2][0];
		mapfont[n][1] = argv[2][1];
	} else
		printe("font position out of range");

}

/*
 * Set current font.
 */
req_ft(argc, argv) int argc; char *argv[];
{
	char name[2];

	argname(argv[1], name);
	setfont(name, 1);
}

/*
 * Force font size.
 */
req_fz(argc, argv) int argc; char *argv[];
{
	if (argc != 3)
		printe(".fz: requires font name and size");
	else
		dev_fz(argv[1], argv[2]);
}

/*
 * Hyphenation mode.				(.hc)	$$TO_DO$$
 */
req_hc(argc, argv) int argc; char *argv[];
{
	printu(".hc");
}

/*
 * Hyphenation indicator character.		(.hw)	$$TO_DO$$
 */
req_hw(argc, argv) int argc; char *argv[];
{
	printu(".hw");
}

/*
 * Hyphenation exception words.			(.hy)	$$TO_DO$$
 */
req_hy(argc, argv) int argc; char *argv[];
{
	printu(".hy");
}

/*
 * If part of if-else.
 */
req_ie(argc, argv) int argc; char *argv[];
{
	if (iestackx >= IESTACKSIZE-1)
		printe(".ie nested more than %d levels", IESTACKSIZE);
	else
		iestack[++iestackx] = req_if(argc, argv);
}

/*
 * If (conditional execution of command).
 * This returns the condition and is called from 'req_ie'.
 */
req_if()
{
	int not, con;
	unsigned char charbuf[CBFSIZE];
	register int c;
	register unsigned char *bp, *cp, *cp1, *cp2;

	bp = (unsigned char *)nextarg(miscbuf, NULL, 0);

	/* Look for leading '!'. */
	if (*bp == '!') {
		bp++;
		not = 1;
	} else
		not = 0;

	/* Look for built-ins. */
	switch (*bp++) {
	case 'e':			/* Current page number is even. */
		con = !(pno % 2);
		break;
	case 'l':
		con = lflag;		/* Landscape mode. */
		break;
	case 'n':			/* Formatter is Nroff. */
		con = (ntroff == NROFF);
		break;
	case 'o':			/* Current page number is odd. */
		con = pno % 2;
		break;
	case 'p':
		con = pflag;		/* PostScript mode. */
		break;
	case 't':			/* Formatter is Troff. */
		con = (ntroff == TROFF);
		break;
	default:
		c = *--bp;			/* first character */
		if ((isascii(c) && isdigit(c)) || c == '(' || c == '+' || c == '-') {
			/* Numeric expression. */
			bp = (unsigned char *)nextarg(bp, charbuf, CBFSIZE);
			con = numb(charbuf, SMUNIT, SDUNIT) != 0;
			break;
		}

		/* String comparison. */
		con = 0;
		if (c == '\0')
			break;
		cp1 = ++bp;			/* start of first string */
		if ((cp = index(cp1, c)) == NULL)
			break;
		cp2 = ++cp;			/* start of second string */
		if ((cp = index(cp2, c)) == NULL)
			break;
		bp = cp + 1;			/* bp points after third c */
		if (cp - cp2 != (cp2-1) - cp1)
			break;			/* lengths differ, unequal */
		con = strncmp(cp1, cp2, cp - cp2) == 0;	/* compare strings */
	}
	if (not)
		con = !con;
	do_cond(con, bp);
	return con;
}

/*
 * Ignore.
 */
req_ig(argc, argv) int argc; char *argv[];
{
	deftext(NULL, argv[1]);
}

/*
 * Set indent.
 */
req_in(argc, argv) int argc; char *argv[];
{
	setval(&ind, &oldind, argv[1], SMEMSP, SDEMSP);
	setbreak();
}


/*
 * Set an input line count trap.
 */
req_it(argc, argv) int argc; char *argv[];
{
	if (argc < 3) {
		inpltrc = 0;
		return;
	}
	inpltrc = numb(argv[1], SMUNIT, SDUNIT);
	argname(argv[2], inptrap);
}

/*
 * Leader repetition character.
 */
req_lc(argc, argv) int argc; char *argv[];
{
	ldc = (argc < 1) ? '\0' : argv[1][0];
}

/*
 * Load a font width table.
 * !V7.
 * Added by steve 12/12/90.
 */
req_lf(argc, argv) int argc; char *argv[];
{
	if (argc < 3) {
		printe(".lf: requires fontname and filename");
		return;
	}
	load_font(argv[1], argv[2]);
	if (argc == 4)
		dev_fz(argv[1], argv[3]);
}

/*
 * Set ligature mode.
 */
req_lg(argc, argv) int argc; char *argv[];
{
	lgm = numb(argv[1], SMUNIT, SDUNIT) > 0;
}

/*
 * Set line length.
 */
req_ll(argc, argv) int argc; char *argv[];
{
	setval(&lln, &oldlln, argv[1], SMEMSP, SDEMSP);
}

/*
 * Set line spacing.
 */
req_ls(argc, argv) int argc; char *argv[];
{
	setval(&lsp, &oldlsp, argv[1], SMUNIT, SDUNIT);
}

/*
 * Set title length.
 */
req_lt(argc, argv) int argc; char *argv[];
{
	setval(&tln, &oldtln, argv[1], SMEMSP, SDEMSP);
}

/*
 * Set margin character.
 */
req_mc(argc, argv) int argc; char *argv[];
{
	if (argc < 2) {
		mrc = '\0';
	} else {
		mrc = argv[1][0];
#ifdef	mfn
		/* Margin font number (if required later...) */
		mfn = curfont;
#endif
	}
	if (argc > 2)
		mar = number(argv[2], SMEMSP, SDEMSP, mar, 0, 0);
}

/*
 * Mark vertical place internally in diversion or in number register.
 */
req_mk(argc, argv) int argc; char *argv[];
{
	register REG *rp;
	char name[2];

	if (argc == 1) {
		cdivp->d_mk = cdivp->d_rpos;
		return;
	}
	argname(argv[1], name);
	if ((rp=findreg(name, RNUMR)) == NULL) {
		rp = makereg(name, RNUMR);
		rp->n_reg.r_incr = 1;
		rp->n_reg.r_form = '1';
	}
	rp->n_reg.r_nval = cdivp->d_rpos;
}

/* end of req1.c */
@


1.5
log
@provided by stevesf
@
text
@d291 2
d296 1
a296 1
	ulc = INFINITY;
@


1.4
log
@mods prov by stevesf
@
text
@d193 1
a193 1
 * Centre all text.
d248 1
a248 1
 * Added by steve 12/21/90.
d252 2
a253 3
	char endmark[MSCSIZE];
	register char *cp;
	register int c;
d256 4
a259 2
	strcpy(endmark, (argc == 1) ? ".co" : argv[1]);
	cp = endmark;
d283 1
a283 1
	if ((n = font_number(name, ".fz: ")) < 0)
d567 5
a571 2
	char name[2];
	register int n;
a572 5
	argname(argv[1], name);
	if ((n = font_number(name, ".fz: ")) >= 0)
		dev_fz(n, argv[2]);
}

d724 1
a724 1
	if (argc != 3) {
d729 2
@


1.3
log
@steve updated
@
text
@@


1.2
log
@prov by stevesf for ver 311
@
text
@d148 3
a150 4
		enbldn++;
	else {
		enbldn = atoi(argv[1]);
	}
d160 1
a160 1
		npn = number(argv[1], SMUNIT, SDUNIT, 0, 0, 0);
d225 1
a225 1
		rpos = number(argv[2], SMVLSP, SDVLSP, 0, 0, 0);
d285 1
a285 1
	dev_cs(n, number(argv[2], (long)ems, 36L, 0, 0, 0));
d405 3
a407 26
	char charbuf[CBFSIZE], c;
	register char *bp, *cp;

	bp = nextarg(miscbuf, NULL, 0);
	if (!lastcon) {
		cp = charbuf;
		if (*bp == EBEG)
			bp++;
		while (c = *bp++) {
			if (cp < &charbuf[CBFSIZE-2])
				*cp++ = c;
		}
		*cp++ = '\n';
		*cp++ = '\0';
		cp = duplstr(charbuf);
		adscore(cp);
		strp->x3.s_srel = cp;
	} else {
		if (*bp == EBEG) {
			ifeflag = 1;
			while (getf(0) != EEND)
				;
			ifeflag = 0;
			while (getf(0) != '\n')
				;
		}
d409 1
d444 1
a444 1
		new = number(argv[1], SMUNIT, SDUNIT, 0, 0, 0);
d446 1
a446 1
		if (new<0 || new>=ENVSIZE) {
d450 1
a450 1
		if (envs >= EVSSIZE) {
d458 1
a458 3
	lseek(fileno(tmp), (long) old * sizeof (ENV), 0);
	if (write(fileno(tmp), &env, sizeof (env)) != sizeof (env))
		panic("cannot write environment");
d465 1
a465 4
		lseek(fileno(tmp), (long) new * sizeof (ENV), 0);
		if (read(fileno(tmp), &env, sizeof (env)) != sizeof (env))
			panic("cannot read environment");
		devfont(fontype);
d510 1
a510 1
	fil = 1;
d590 4
a593 1
	lastcon = req_if(argc, argv);
d603 1
a603 1
	char charbuf[CBFSIZE], endc;
d605 1
a605 2
	register unsigned char *bp;
	register char *cp;
d608 2
a609 1
	not = 0;
d613 4
a616 1
	}
d618 1
a618 1
	case 'e':	/* Current page number is even. */
d621 1
a621 1
	case 'n':	/* Formatter is Nroff. */
d624 1
a624 1
	case 'o':	/* Current page number is odd. */
d627 1
a627 1
	case 't':	/* Formatter is Troff. */
d631 3
a633 2
		--bp;
		if (isascii(*bp) && isdigit(*bp)) {
d635 1
a635 1
			con = number(charbuf, SMUNIT, SDUNIT, 0, 0, 0) > 0;
d638 4
a641 2
		if ((endc = *bp) == '\0') {
			con = 1;
d643 10
a652 24
		}
		bp++;
		cp = charbuf;
		while ((c = *bp++) != endc) {
			if (c == '\0') {
				--bp;
				break;
			}
			if (cp < &charbuf[CBFSIZE-1])
				*cp++ = c;
		}
		*cp++ = '\0';
		cp = charbuf;
		con = 1;
		while ((c = *bp++) != endc) {
			if (c == '\0') {
				--bp;
				break;
			}
			if (c == *cp)
				cp++;
			else
				con = 0;
		}
a653 2
	while (isascii(*bp) && isspace(*bp))
		bp++;
d656 2
a657 26
	if (con) {
		cp = charbuf;
		if (*bp == EBEG)
			bp++;
		while (c = *bp++) {
			if (cp < &charbuf[CBFSIZE-2])
				*cp++ = c;
		}
		*cp++ = '\n';
		*cp++ = '\0';
		cp = duplstr(charbuf);
		adscore(cp);
		strp->x3.s_srel = cp;
	} else {
		if (*bp++ == EBEG) {
			while (*bp != '\0') if (*bp++ == EEND)
				return (con);
			ifeflag = 1;
			while (getf(0) != EEND)
				;
			ifeflag = 0;
			while (getf(0) != '\n')
				;
		}
	}
	return (con);
d673 1
a673 5
	register int n;

	n = ind;
	ind = number(argv[1], SMEMSP, SDEMSP, ind, 0, oldind);
	oldind = n;
d687 1
a687 1
	inpltrc = number(argv[1], SMUNIT, SDUNIT, 0, 0, 0);
d692 1
a692 1
 * Leader repetition character.			(.lc)	$$TO_DO$$
d696 1
a696 1
	printu(".lc");
d718 1
a718 1
	lgm = number(argv[1], SMUNIT, SDUNIT, 0, 0, 0) > 0;
d726 2
a727 1
	register int n;
a728 5
	n = lln;
	lln = number(argv[1], SMEMSP, SDEMSP, lln, 0, oldlln);
	oldlln = n;
}

d734 2
a735 1
	register int n;
a736 5
	n = lsp;
	lsp = number(argv[1], SMUNIT, SDUNIT, lsp, 0, oldlsp);
	oldlsp = n;
}

d742 2
a743 1
	register int n;
a744 5
	n = tln;
	tln = number(argv[1], SMEMSP, SDEMSP, tln, 0, oldtln);
	oldtln = n;
}

@


1.1
log
@Initial revision
@
text
@d2 1
d6 1
a6 1
#include <stdio.h>
a8 7
#include "code.h"
#include "div.h"
#include "env.h"
#include "esc.h"
#include "reg.h"
#include "str.h"
#include "codebug.h"
d21 1
a21 1
		fprintf(stderr, "User Abort\n");
d28 1
a28 2
req_ad(argc, argv)
char *argv[];
d48 1
a48 1
		printe("Bad adjustment type");
d56 1
a56 2
req_af(argc, argv)
char *argv[];
d66 1
a66 1
		rp->r_form = c;
d72 1
a72 1
		while (isascii(c=*p++) && isdigit(*p))
d75 1
a75 1
			printe("Field with too large");
d78 1
a78 1
		rp->r_form = '0' + p-argv[2];
d85 1
a85 2
req_am(argc, argv)
char *argv[];
d94 1
a94 1
		mp = &rp->r_macd;
d96 3
a98 1
		for (mp=&rp->r_macd; mp->m_next; mp=mp->m_next)
d100 2
a101 2
		mp->m_next = nalloc(sizeof (*mp));
		mp = mp->m_next;
d109 1
a109 2
req_as(argc, argv)
char *argv[];
d119 1
a119 1
		mp = &rp->r_macd;
d121 1
a121 1
		for (mp=&rp->r_macd; mp->m_next; mp=mp->m_next)
d123 2
a124 2
		mp->m_next = nalloc(sizeof *mp);
		mp = mp->m_next;
d128 3
a130 3
	mp->m_next = NULL;
	mp->m_type = MTEXT;
	mp->m_core = cp;
d134 21
d157 1
a157 2
req_bp(argc, argv)
char *argv[];
d180 1
a180 2
req_c2(argc, argv)
char *argv[];
d188 1
a188 2
req_cc(argc, argv)
char *argv[];
d196 1
a196 2
req_ce(argc, argv)
char *argv[];
d205 1
a205 2
req_ch(argc, argv)
char *argv[];
d214 1
a214 1
	for (tpp=&dp->d_stpl; tp=*tpp; tpp=&tp->t_next) {
d228 1
a228 1
		for (tpp=&dp->d_stpl; tp=*tpp; tpp=&tp->t_next) {
d232 1
a232 1
		tp = nalloc(sizeof (TPL));
d247 28
a275 1
 * Note that the second argument (font) is ignored.
d277 1
a277 1
req_cs(argc, argv)
d279 2
a280 3
	printe(".cs not implimented yet");
/*
	register int ems;
d282 3
d286 1
a286 2
	csz = number(argv[2], (long)ems, (long)1, 0, 0, 0);
*/
d292 1
a292 2
req_cu(argc, argv)
char *argv[];
d300 1
a300 2
req_da(argc, argv)
char *argv[];
d315 2
a316 2
		mp = &rp->r_macd;
		mp->m_next = NULL;
d318 3
a320 3
		cdivp->d_maxh = rp->r_maxh;
		cdivp->d_maxw = rp->r_maxw;
		for (mp=&rp->r_macd; mp->m_next; mp=mp->m_next)
d323 4
a326 4
	mp->m_type = MDIVN;
	mp->m_size = 0;
	mp->m_core = NULL;
	mp->m_seek = tmpseek;
d333 1
a333 2
req_de(argc, argv)
char *argv[];
d340 1
a340 1
	deftext(&rp->r_macd, argv[2]);
d346 1
a346 2
req_di(argc, argv)
char *argv[];
d358 1
a358 1
	cdivp->d_macp = &rp->r_macd;
d360 5
a364 5
	rp->r_macd.m_next = NULL;
	rp->r_macd.m_type = MDIVN;
	rp->r_macd.m_size = 0;
	rp->r_macd.m_core = NULL;
	rp->r_macd.m_seek = tmpseek;
d370 1
a370 2
req_ds(argc, argv)
char *argv[];
d380 3
a382 3
	rp->r_macd.m_next = NULL;
	rp->r_macd.m_type = MTEXT;
	rp->r_macd.m_core = cp;
d386 1
a386 1
 * Set a diversion trap.	(.dt)	$$TO_DO$$
d388 1
a388 2
req_dt(argc, argv)
char *argv[];
d396 1
a396 2
req_ec(argc, argv)
char *argv[];
d404 1
a404 2
req_el(argc, argv)
char *argv[];
d414 1
a414 1
		while (c=*bp++) {
d422 1
a422 1
		strp->s_srel = cp;
d438 1
a438 2
req_em(argc, argv)
char *argv[];
d452 1
a452 1
 * Change enviroments.
d454 1
a454 2
req_ev(argc, argv)
char *argv[];
d461 1
a461 1
			printe("Cannot pop enviroment");
d470 1
a470 1
			printe("Enviroment does not exist");
d474 1
a474 1
			printe("Enviroments stacked too deeply");
d483 1
a483 1
		panic("Cannot write enviroment");
d492 2
a493 3
			panic("Cannot read enviroment");
		addidir(DFONT, fontype);
		addidir(DPSZE, psz);
d506 27
d550 1
a550 1
 * Define font at position
d552 1
a552 2
req_fp(argc, argv)
char *argv[];
d554 1
a554 1
	register n;
d557 5
d563 1
a563 4
	if ((n <= 8) && (n >= 1))
		mapfont[n] = argv[2][0];
	else
		printe("Font position out of range");
a564 1
}
d568 1
a568 2
req_ft(argc, argv)
char *argv[];
d577 37
d616 1
a616 2
req_ie(argc, argv)
char *argv[];
d623 1
a623 1
 * This returns the condition and is called from `req_ie'.
d633 1
a633 1
	bp = nextarg(miscbuf, NULL, 0);
d655 1
a655 1
			bp = nextarg(bp, charbuf, CBFSIZE);
d659 1
a659 1
		if ((endc=*bp) == '\0') {
d665 1
a665 1
		while ((c=*bp++) != endc) {
d676 1
a676 1
		while ((c=*bp++) != endc) {
d695 1
a695 1
		while (c=*bp++) {
d703 1
a703 1
		strp->s_srel = cp;
d722 1
a722 2
req_ig(argc, argv)
char *argv[];
d730 1
a730 2
req_in(argc, argv)
char *argv[];
d744 1
a744 2
req_it(argc, argv)
char *argv[];
d755 22
d779 1
a779 2
req_lg(argc, argv)
char *argv[];
d787 1
a787 2
req_ll(argc, argv)
char *argv[];
d799 1
a799 2
req_ls(argc, argv)
char *argv[];
d811 1
a811 2
req_lt(argc, argv)
char *argv[];
d823 1
a823 2
req_mc(argc, argv)
char *argv[];
d825 11
a835 2
	mrc = argv[1][0];
	mar = number(argv[2], SMEMSP, SDEMSP, mar, 0, 0);
d841 1
a841 2
req_mk(argc, argv)
char *argv[];
d853 2
a854 2
		rp->r_incr = 1;
		rp->r_form = '1';
d856 1
a856 1
	rp->r_nval = cdivp->d_rpos;
d858 2
@
