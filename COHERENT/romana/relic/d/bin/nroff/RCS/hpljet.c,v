head     1.1;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.1
date     91.02.04.16.51.47;  author bin;  state Exp;
branches ;
next	;


desc
@init ver prov by stevesf
@



1.1
log
@Initial revision
@
text
@/*
 * Nroff/Troff.
 * Hewlett-Packard LaserJet 2686A driver.
 */
#include <stdio.h>
#include <ctype.h>
#include "roff.h"
#include "code.h"
#include "char.h"
#include "env.h"
#include "font.h"

#define	bool	int
#define	not	!
#define	TRUE	(0==0)
#define FALSE	(not TRUE)
#define	LINEH	(720 / 6)		/* amount moved by line feed */
#define	LBIAS	(11*720/80)		/* laser printer horiz. bias */
#define	QUANTA	300			/* actual device resolution */
#define RESET	"\033E"			/* Resets laser printer */
#define	VARIABLE	1		/* Variable spacing	*/
#define	FIXED		0		/* Fixed spacing	*/

/*
 * The typedef fwtab is used to hold data on a font.
 * The entries in f_width * f_psz * f_num / f_den should
 * be the widths in atomic units (thus, if the table is
 * in 300ths of an inch then f_psz * f_num / f_den should be
 * 12/5).
 */
typedef struct	fwtab {
	char		*f_cmd;		/* command to select font */
	char		*f_descr;	/* printable name for font */
	int		f_varsp;	/* variable space flag	*/
	int		f_psz;		/* point size (internal units) */
	long		f_num,		/* width table numerator */
			f_den;		/* width table denominator */
	unsigned char	f_width[99];	/* width table */
}	fwtab;


/*
 * Laser printer initialization string.  This string performs the following
 * functions:
 *	reset printer
 *	6 lines per inch
 *	66 lines per page
 *	clear margins
 *	0 top margin
 *	66 lines text length
 *	move to horizontal 0
 *	move to vertical 0
 *	select font B
 */
static char	linit[]	= "\
\033E\
\033&l6D\
\033&l66P\
\0339\
\033&l0E\
\033&l66F\
\033&a0H\
\033&a0V\
\033&l0O\033(0U\033(s1p10v0s0b5T\
";

/*
 * The string lmove is used to move vertically or horizontally.
 * It is used by
 *	printf(lmove, arg, 'V');		for vertical movement
 *	printf(lmove, arg-LBIAS, 'H');		for horizontal movement
 */
static char	lmove[]	= "\033&a%d%c";
#define	LVmove(x)	printf(lmove, (x), 'V')
#define	LHmove(x)	printf(lmove, (x)-LBIAS, 'H')

/*
 * Device parameters.
 */
int	ntroff	=	TROFF;		/* Programme is TROFF type */

long	sinmul	=	720;		/* Multiplier for inch */
long	sindiv	=	1;		/* Divisor for inch */

long	semmul	=	1;		/* Multiplier for em space */
long	semdiv	=	1;		/* Divisor for em space */

long	senmul	=	1;		/* Multiplier for en space */
long	sendiv	=	2;		/* Divisor for en space */

long	snrmul	=	1;		/* Narrow space (mul) */
long	snrdiv	=	6;		/* Narrow space (div) */

long	shrmul	=	12;		/* Horizontal resolution (mul) */
long	shrdiv	=	5;		/* Horizontal resolution (div) */

long	svrmul	=	12;		/* Vertical resolution (mul) */
long	svrdiv	=	5;		/* Vertical resolution (div) */

int	nncount =	0;		/* New-name count for fonts */

/*
 * Table to convert from the internal character set to ASCII.
 */
char intasc[] ={
	0,	'0',	'1',	'2',	'3',	'4',	'5',	'6',
	'7',	'8',	'9',	'A',	'B',	'C',	'D',	'E',
	'F',	'G',	'H',	'I',	'J',	'K',	'L',	'M',
	'N',	'O',	'P',	'Q',	'R',	'S',	'T',	'U',
	'V',	'W',	'X',	'Y',	'Z',	'a',	'b',	'c',
	'd',	'e',	'f',	'g',	'h',	'i',	'j',	'k',
	'l',	'm',	'n',	'o',	'p',	'q',	'r',	's',
	't',	'u',	'v',	'w',	'x',	'y',	'z',	'!',
	'"',	'#',	'$',	'%',	'&',	'(',	')',	'*',
	'+',	',',	'-',	'.',	'/',	':',	';',	'<',
	'=',	'>',	'?',	'@@',	'[',	'\\',	']',	'^',
	'_',	'{',	'|',	'}',	'~',	'`',	'\'',	'\'',
	'`',	'^',	'-'
};

/*
 * For mapping user fonts to real fonts.
 */
FTB fontab[] ={
/* Standard (default) font names...	*/
	{ 'R', '\0', TRMED },
	{ 'I', '\0', TRITL },
	{ 'B', '\0', TRBLD },
	{ 'S', '\0', TRSML },
	{ 'L', '\0', LPTR },
	{ 'H', '\0', HELV },
#ifndef	OLDHP
	{ 'G', '\0', IBMGRAPH }, /* IBM Graphics, 12 pt */
#endif
/* Times-roman	*/
	{ 'T', 'R', TRMED },
	{ 'T', 'I', TRITL },
	{ 'T', 'B', TRBLD },
	{ 'T', 'S', TRSML },
/* Helvetica */
	{ 'H', 'R', HELV },
/* Prestige Elite */
#ifndef	OLDHP
	{ 'L', 'R', LPROMAN },
	{ 'L', 'I', LPITALIC }, /* Line printer italic */
	{ 'L', 'B', LPBOLD },	/* Line printer bold */
	{ 'L', 'G', IBMGRAPH }, /* IBM Graphics, 12 pt */
	{ 'L', 'S', LPTINY },	/* Tiny line printer	*/
	{ 'L', 'M', LPMATH },	/* Math font		*/
#if	0
	/* This font can be added quickly!	*/
	{ 'L', 'X', PIFONT },	/* PI font		*/
#endif
/* Line Printer */
#endif
	{ 'L', 'P', LPTR },	/* Line printer */
/* Courier */
	{ 'C', 'M', COURMED },
#ifndef	OLDHP
	{ 'C', 'V', COURBOLD },	/* Courier Medium (12pt) Bold 	*/
/* Century-schoolbook */
	{ 'C', 'R', CENROMAN },	/* Century schoolbook Roman 10 pt. */
	{ 'C', 'I', CENITALIC }, /* Century schoolbook Italics 10 pt. */
	{ 'C', 'B', CENBOLD },  /* Century schoolbook Bold 10 pt. */
	{ 'S', 'R', SCHROMAN },	/* Century schoolbook Roman 12 pt. */
	{ 'S', 'I', SCHITALIC }, /* Century schoolbook Italics 12 pt. */
	{ 'S', 'B', SCHBOLD },	/* Century schoolbook bold 12 pt. */
	{ 'C', 'L', CENLARGE }, /* Century schoolbook Bold 14.0 pt. */
	{ 'C', 'H', CENHUGE },	/* Century schoolbook Bold 18.0 pt. */
/* Zapf Humanist */
	{ 'Z', 'B', ZAPBOLD },	/* Zapf Humanist Bold 12.0 pt. */
	{ 'Z', 'L', ZAPLARGE }, /* Zapf Humanist Bold 14.0 pt. */
/* MWC font	*/
	{ 'M', 'W', MWCLOGO },	/* MWC logo font	*/
#endif
/* Expansion */
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
	{ '\0' },
/* Termination */
	{ '\0' }
};

#define	NNMAX	23

/*
 * Driver font information (indexed by font number).
 */
fwtab	dfont[]	= {
	{
#ifdef	CART
				/* 92286F Tms Rmn medium upright */
		"\033&l0O\033(0U\033(s1p10v0s0b5T",
		"Times Roman 10pt [CART]",
		VARIABLE,
		100,
		(long)3, (long)125,
		{
		0,	23,	23,	23,	23,	23,	23,	23,
		23,	23,	23,	35,	29,	31,	34,	30,
		28,	36,	35,	16,	20,	36,	30,	42,
		35,	33,	26,	33,	34,	22,	30,	37,
		34,	38,	36,	33,	31,	21,	25,	21,
		25,	21,	19,	23,	25,	14,	17,	25,
		13,	37,	25,	23,	25,	24,	18,	17,
		15,	25,	24,	34,	24,	24,	20,	12,
		15,	30,	23,	35,	35,	15,	16,	22,
		23,	14,	23,	12,	21,	10,	12,	24,
		24,	24,	22,	39,	13,	21,	14,	24,
		35,	16,	8,	17,	26,	12,	12,	12,
		12,	24,	23
#else
		"\033&l0O\033(0U\033(s1p10v0s0b5T",
		"Times Roman 10pt [RAM]",
		VARIABLE,
		100,
		(long)3, (long)125,
		{
			  0, 20, 20, 20, 20, 20, 20, 20,
			 20, 20, 20, 31, 28, 29, 33, 29,
			 25, 33, 34, 15, 18, 30, 26, 39,
			 31, 33, 25, 33, 31, 22, 27, 34,
			 31, 40, 31, 31, 29, 20, 22, 18,
			 22, 20, 13, 20, 22, 11, 11, 21,
			 11, 34, 22, 22, 22, 22, 16, 16,
			 13, 22, 18, 28, 18, 18, 18, 13,
			 13, 32, 20, 39, 34, 16, 16, 20,
			 34, 10, 14, 10, 21, 11, 11, 34,
			 34, 34, 20, 40, 13, 21, 13, 20,
			 20, 21, 20, 21, 34, 10, 10, 10,
			 10, 20, 14
#endif
		}
	},
	{
#ifdef	CART
				/* 92286F Tms Rmn medium italic */
		"\033&10O\033(0U\033(s1p10v1s0b5T",
		"Times Roman 10pt italic [CART]",
		VARIABLE,
		100,
		(long)3, (long)125,
		{
		0,	23,	23,	23,	23,	23,	23,	23,
		23,	23,	23,	30,	29,	31,	33,	29,
		29,	30,	35,	19,	24,	31,	30,	40,
		33,	33,	28,	33,	32,	28,	30,	33,
		31,	35,	34,	29,	33,	23,	22,	20,
		26,	20,	21,	25,	23,	14,	21,	24,
		15,	36,	23,	22,	24,	22,	18,	19,
		14,	22,	19,	31,	26,	23,	23,	17,
		18,	27,	23,	32,	32,	20,	20,	21,
		23,	11,	24,	12,	31,	18,	17,	31,
		26,	31,	21,	42,	24,	13,	24,	23,
		33,	22,	7,	21,	25,	10,	10,	10,
		10,	23,	24
#else
		"\033&10O\033(0U\033(s1p10v1s0b5T",
		"Times Roman 10pt italic [RAM]",
		VARIABLE,
		100,
		(long)3, (long)125,
		{
			  0, 20, 20, 20, 20, 20, 20, 20,
			 20, 20, 20, 29, 27, 28, 31, 28,
			 25, 33, 32, 15, 16, 28, 27, 36,
			 31, 32, 25, 32, 28, 23, 26, 30,
			 27, 36, 28, 25, 28, 21, 21, 18,
			 22, 18, 12, 17, 22, 11, 11, 20,
			 11, 34, 22, 22, 21, 21, 13, 16,
			 11, 22, 18, 27, 17, 17, 16, 12,
			 14, 32, 20, 40, 29, 16, 16, 20,
			 34, 10, 13, 10, 21, 11, 11, 34,
			 34, 34, 19, 41, 17, 21, 17, 20,
			 20, 21, 20, 21, 34, 10, 10, 10,
			 10, 20, 13
#endif
		}
	},
	{
#ifdef	CART
				/* 92286B Tms Rmn bold upright */
		"\033&10O\033(0U\033(s1p10v0s1b5T",
		"Times Roman 10pt bold [CART]",
		VARIABLE,
		100,
		(long)3, (long)125,
		{
		0,	24,	24,	24,	24,	24,	24,	24,
		24,	24,	24,	34,	32,	31,	32,	29,
		27,	35,	37,	18,	24,	33,	29,	39,
		33,	34,	28,	34,	33,	26,	33,	35,
		33,	40,	32,	31,	32,	23,	24,	21,
		24,	21,	19,	23,	27,	14,	17,	26,
		14,	36,	25,	23,	24,	24,	18,	16,
		16,	24,	20,	31,	24,	23,	20,	14,
		17,	28,	24,	39,	34,	18,	19,	18,
		24,	14,	24,	14,	22,	12,	12,	25,
		26,	25,	22,	40,	13,	22,	14,	26,
		33,	16,	8,	17,	30,	12,	12,	12,
		12,	26,	24
#else
		"\033&10O\033(0U\033(s1p10v0s1b5T",
		"Times Roman 10pt bold [RAM]",
		VARIABLE,
		100,
		(long)3, (long)125,
		{
			  0, 20, 20, 20, 20, 20, 20, 20,
			 20, 20, 20, 27, 27, 29, 30, 27,
			 25, 31, 32, 16, 20, 31, 26, 39,
			 30, 32, 25, 32, 29, 24, 26, 30,
			 26, 38, 29, 26, 27, 21, 22, 18,
			 23, 18, 13, 20, 23, 12, 13, 22,
			 12, 34, 23, 21, 23, 22, 18, 18,
			 14, 23, 19, 26, 19, 18, 18, 13,
			 14, 32, 20, 32, 32, 16, 16, 20,
			 34, 10, 13, 10, 21, 11, 11, 34,
			 34, 34, 20, 40, 18, 21, 18, 20,
			 20, 21, 20, 21, 34, 10, 10, 10,
			 10, 20, 13
#endif
		}
	},
	{
#ifdef	CART
				/* 92286B Tms Rmn small */
		"\033&10O\033(0U\033(s1p8.0v0s-1b5T",
		"Times Roman 8pt [CART]",
		VARIABLE,
		80,
		(long)3, (long)100,
		{
		0,	18,	18,	18,	18,	18,	18,	18,
		18,	18,	18,	26,	25,	25,	27,	24,
		23,	28,	26,	13,	18,	27,	22,	32,
		26,	27,	24,	27,	26,	20,	25,	26,
		26,	36,	26,	26,	22,	18,	20,	16,
		20,	16,	11,	18,	20,	10,	13,	19,
		10,	29,	20,	18,	20,	19,	14,	14,
		14,	20,	19,	25,	19,	19,	16,	10,
		15,	29,	18,	29,	27,	14,	14,	18,
		27,	10,	16,	10,	18,	10,	10,	27,
		27,	27,	17,	27,	10,	18,	10,	18,
		36,	20,	9,	20,	18,	10,	10,	10,
		10,	18,	16
#else
		"\033&10O\033(0U\033(s1p8.0v0s-1b5T",
		"Times Roman 8pt [RAM]",
		VARIABLE,
		80,
		(long)3, (long)100,
		{
			  0, 16, 16, 16, 16, 16, 16, 16,
			 16, 16, 16, 25, 23, 23, 27, 23,
			 20, 27, 27, 12, 14, 24, 21, 31,
			 25, 27, 20, 27, 25, 18, 22, 27,
			 25, 32, 25, 25, 23, 16, 18, 14,
			 18, 16, 11, 16, 18,  9,  9, 17,
			  9, 27, 18, 18, 18, 18, 13, 13,
			 11, 18, 15, 22, 15, 15, 14, 11,
			 12, 25, 16, 31, 27, 13, 13, 16,
			 28,  8, 11,  8, 16,  9,  9, 28,
			 28, 28, 16, 33, 11, 16, 11, 16,
			 16, 17, 16, 17, 28,  8,  8,  8,
			  8, 16, 11
#endif
		}
	},
	{
#ifdef	CART
				/* 92286B Helvetica */
		"\033&l0O\033(0U\033(s1p14.4v0s1b4T",
		"Helvetica 14.4pt bold [CART]",
		VARIABLE,
		144,
		(long)1, (long)60,
		{
		0,	33,	33,	33,	33,	33,	33,	33,
		33,	33,	33,	43,	41,	41,	44,	37,
		34,	42,	43,	16,	27,	44,	31,	54,
		43,	45,	40,	45,	40,	39,	43,	41,
		44,	61,	42,	41,	39,	31,	34,	29,
		33,	29,	20,	33,	34,	15,	20,	32,
		15,	52,	34,	33,	34,	34,	22,	29,
		24,	34,	32,	48,	32,	32,	28,	22,
		28,	55,	33,	58,	50,	26,	26,	33,
		33,	18,	30,	18,	31,	18,	18,	51,
		51,	51,	35,	52,	22,	31,	20,	33,
		47,	28,	12,	28,	42,	18,	18,	18,
		18,	33,	30
#else
		"\033&l0O\033(0U\033(s1p14v0s3b4T",
		"Helvetica 14pt bold [RAM]",
		VARIABLE,
		140,
		(long)3, (long)175,
		{
			  0, 33, 33, 33, 33, 33, 33, 33,
			 33, 33, 33, 39, 41, 43, 42, 38,
			 35, 45, 43, 18, 32, 40, 34, 51,
			 43, 46, 39, 46, 41, 39, 34, 42,
			 38, 54, 38, 34, 34, 33, 36, 31,
			 36, 32, 18, 35, 35, 15, 15, 32,
			 15, 51, 35, 34, 36, 36, 22, 31,
			 18, 35, 31, 44, 30, 31, 28, 19,
			 19, 45, 33, 50, 41, 22, 22, 29,
			 48, 17, 19, 17, 29, 18, 18, 48,
			 48, 48, 32, 57, 22, 29, 22, 33,
			 33, 29, 33, 29, 48, 15, 15, 15,
			 15, 33, 19
#endif
		}
	},
	{
#define	LW	18			/* 92286F Line Ptr medium upright */
		"\033&l0O\033(0U\033(sp16.66h8.5vsbT",
		"Line Ptr 16.66 pitch, 8.5pt [CART]",
		FIXED,
		85,
		(long)12, (long)425,
		{
		0,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW,	LW,	LW,	LW,	LW,	LW,
		LW,	LW,	LW
		}
	},
#ifndef	CW
#define	CW	30
#endif
	{
					/* Internal Courier medium upright */
		"\033&l0O\033(8U\033(s0p10h12v0s0b0T",
		"Courier 12pt [INTERNAL]",
		FIXED,
		120,
		(long)2, (long)100,
		{
		0,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW
		}
	}
#ifndef	OLDHP
	,{
					/* Internal Courier medium bold */
		"\033&l0O\033(8U\033(s0p10h12v0s1b0T",
		"Courier 12pt bold [INTERNAL]",
		FIXED,
		120,
		(long)2, (long)100,
		{
		0,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW,	CW,	CW,	CW,	CW,	CW,
		CW,	CW,	CW
		}
	},
	{				/* soft Century Schoolbook Roman 10pt */
		"\033&l0O\033(0U\033(s1p9.8v0s0b23T",
		"Century Schoolbook 10pt [RAM]",
		VARIABLE,
		98,
		(long)6, (long)245,
		{
			  0, 22, 22, 22, 22, 22, 22, 22,
			 22, 22, 22, 30, 29, 29, 32, 29,
			 27, 32, 35, 14, 23, 32, 27, 39,
			 34, 32, 27, 32, 30, 25, 28, 32,
			 30, 41, 29, 27, 25, 21, 23, 18,
			 23, 20, 13, 21, 25, 12, 12, 23,
			 12, 37, 25, 21, 23, 23, 18, 18,
			 15, 25, 21, 32, 22, 21, 19, 11,
			 13, 32, 22, 34, 33, 15, 15, 21,
			 34, 11, 14, 11, 20, 11, 11, 34,
			 34, 34, 18, 41, 15, 20, 15, 22,
			 20, 21, 20, 21, 34, 11, 11, 11,
			 11, 22, 14
		}
	},
	{				/* soft Century Schoolbook italic 10pt */
		"\033&l0O\033(0U\033(s1p9.8v1s0b23T",
		"Century Schoolbook 10pt italic [RAM]",
		VARIABLE,
		98,
		(long)6, (long)245,
		{
			  0, 22, 22, 22, 22, 22, 22, 22,
			 22, 22, 22, 28, 29, 29, 32, 30,
			 27, 32, 35, 17, 24, 30, 27, 38,
			 32, 32, 28, 32, 31, 27, 29, 33,
			 28, 38, 29, 27, 27, 22, 21, 18,
			 23, 18, 14, 22, 24, 13, 12, 23,
			 13, 35, 25, 22, 22, 22, 18, 19,
			 14, 24, 21, 30, 20, 19, 18, 11,
			 14, 32, 22, 34, 36, 14, 14, 21,
			 34, 11, 13, 11, 20, 11, 11, 34,
			 34, 34, 20, 41, 14, 20, 14, 22,
			 20, 20, 20, 20, 34, 11, 11, 11,
			 11, 22, 13
		}
	},
	{				/* soft Century Schoolbook bold 10pt */
		"\033&l0O\033(0U\033(s1p9.8v0s3b23T",
		"Century Schoolbook 10pt bold [RAM]",
		VARIABLE,
		98,
		(long)6, (long)245,
		{
			  0, 24, 24, 24, 24, 24, 24, 24,
			 24, 24, 24, 31, 32, 32, 34, 31,
			 29, 34, 36, 18, 26, 33, 30, 39,
			 34, 34, 31, 34, 34, 27, 28, 34,
			 31, 40, 30, 29, 27, 25, 26, 22,
			 26, 24, 16, 24, 28, 15, 14, 27,
			 15, 41, 28, 25, 26, 25, 20, 20,
			 18, 26, 24, 35, 24, 24, 21, 12,
			 15, 32, 24, 35, 33, 17, 17, 21,
			 34, 12, 13, 12, 21, 12, 12, 34,
			 34, 34, 21, 41, 17, 21, 17, 24,
			 20, 21, 20, 21, 34, 12, 12, 12,
			 12, 24, 13
		}
	},
	{				/* soft Century Schoolbook Roman 12pt */
		"\033&l0O\033(0U\033(s1p12v0s0b23T",
		"Century Schoolbook 12pt [RAM]",
		VARIABLE,
		120,
		(long)1, (long)50,
		{
			  0, 27, 27, 27, 27, 27, 27, 27,
			 27, 27, 27, 34, 35, 35, 39, 35,
			 33, 39, 41, 20, 27, 38, 33, 46,
			 41, 39, 35, 39, 36, 30, 36, 40,
			 35, 48, 35, 33, 30, 26, 28, 22,
			 28, 26, 17, 26, 31, 15, 14, 29,
			 15, 45, 30, 26, 28, 28, 22, 22,
			 20, 30, 26, 39, 26, 26, 24, 13,
			 16, 38, 27, 40, 40, 18, 18, 25,
			 42, 13, 16, 13, 25, 13, 13, 42,
			 42, 42, 22, 50, 18, 25, 18, 27,
			 25, 25, 25, 25, 42, 13, 13, 13,
			 13, 27, 16
		}
	},
	{				/* soft Century Schoolbook italic 12pt */
		"\033&l0O\033(0U\033(s1p12v1s0b23T",
		"Century Schoolbook 12pt italic [RAM]",
		VARIABLE,
		120,
		(long)1, (long)50,
		{
			  0, 27, 27, 27, 27, 27, 27, 27,
			 27, 27, 27, 33, 36, 35, 39, 36,
			 34, 39, 42, 21, 29, 37, 34, 46,
			 40, 39, 34, 39, 38, 33, 35, 41,
			 33, 46, 34, 32, 33, 28, 27, 22,
			 30, 22, 17, 28, 30, 17, 16, 28,
			 17, 44, 30, 25, 27, 27, 22, 23,
			 17, 30, 25, 38, 25, 23, 22, 13,
			 17, 38, 27, 42, 42, 17, 17, 25,
			 42, 13, 16, 13, 25, 13, 13, 42,
			 42, 42, 25, 50, 17, 25, 17, 27,
			 25, 25, 25, 25, 42, 13, 13, 13,
			 13, 27, 16
		}
	},
	{				/* soft Century Schoolbook bold 12pt */
		"\033&l0O\033(0U\033(s1p12v0s3b23T",
		"Century Schoolbook 12pt bold [RAM]",
		VARIABLE,
		120,
		(long)1, (long)50,
		{
			  0, 30, 30, 30, 30, 30, 30, 30,
			 30, 30, 30, 37, 39, 39, 41, 38,
			 36, 41, 43, 23, 34, 41, 36, 49,
			 42, 41, 38, 41, 41, 35, 37, 41,
			 36, 49, 36, 36, 33, 30, 32, 28,
			 33, 29, 20, 30, 34, 18, 18, 33,
			 18, 49, 34, 31, 33, 33, 26, 24,
			 22, 34, 29, 43, 30, 29, 27, 15,
			 16, 38, 30, 42, 41, 20, 20, 25,
			 42, 15, 16, 15, 25, 15, 15, 42,
			 42, 42, 26, 50, 20, 25, 20, 30,
			 25, 25, 25, 25, 42, 15, 15, 15,
			 15, 30, 16
		}
	},
	{				/* soft Century Schoolbook bold 14 pt */
		"\033&l0O\033(0U\033(s1p14v0s3b23T",
		"Century Schoolbook 14pt bold [RAM]",
		VARIABLE,
		139,
		(long)12, (long)695,
		{
			  0, 34, 34, 34, 34, 34, 34, 34,
			 34, 34, 34, 44, 45, 45, 49, 44,
			 42, 48, 51, 25, 37, 47, 42, 56,
			 48, 48, 44, 48, 47, 39, 41, 48,
			 43, 55, 41, 40, 38, 35, 37, 32,
			 38, 33, 24, 35, 40, 21, 20, 38,
			 21, 57, 40, 35, 38, 37, 30, 28,
			 25, 38, 35, 51, 35, 34, 31, 17,
			 19, 45, 34, 49, 47, 24, 24, 29,
			 48, 17, 19, 17, 29, 17, 17, 48,
			 48, 48, 30, 58, 24, 29, 24, 34,
			 29, 29, 29, 29, 48, 17, 17, 17,
			 17, 34, 19
		}
	},
	{				/* soft Century Schoolbook bold 18 pt */
		"\033&l0O\033(0U\033(s1p18v0s3b23T",
		"Century Schoolbook 18pt bold [RAM]",
		VARIABLE,
		180,
		(long)1, (long)75,
		{
			  0, 44, 44, 44, 44, 44, 44, 44,
			 44, 44, 44, 57, 58, 58, 62, 57,
			 54, 62, 65, 33, 48, 61, 54, 73,
			 63, 62, 57, 62, 61, 52, 53, 63,
			 58, 72, 54, 54, 50, 46, 49, 41,
			 49, 43, 31, 44, 51, 27, 26, 49,
			 28, 73, 51, 45, 49, 48, 38, 36,
			 33, 50, 45, 66, 45, 43, 40, 22,
			 25, 58, 44, 63, 61, 30, 30, 37,
			 63, 22, 25, 22, 38, 22, 22, 63,
			 63, 63, 39, 75, 30, 38, 30, 44,
			 37, 37, 37, 37, 63, 22, 22, 22,
			 22, 44, 25
		}
	},
	{				/* soft Zapf Humanist Bold 12pt */
		"\033&l0O\033(0U\033(s1p12v0s3b17T",
		"Zapf Humanist 12pt bold [RAM]",
		VARIABLE,
		120,
		(long)1, (long)50,
		{
			  0, 28, 28, 28, 28, 28, 28, 28,
			 28, 28, 28, 30, 31, 33, 38, 26,
			 25, 37, 39, 17, 17, 32, 23, 45,
			 37, 42, 30, 42, 32, 28, 27, 37,
			 30, 48, 29, 27, 30, 26, 29, 24,
			 29, 27, 16, 26, 29, 13, 13, 27,
			 13, 44, 29, 29, 30, 29, 19, 21,
			 17, 29, 25, 38, 25, 24, 24, 14,
			 16, 38, 28, 42, 36, 17, 17, 25,
			 42, 14, 16, 14, 25, 14, 14, 42,
			 42, 42, 22, 50, 17, 25, 17, 28,
			 25, 25, 25, 25, 42, 14, 14, 14,
			 14, 28, 16
		}
	},
	{				/* soft Zapf Humanist Bold 13.9pt */
		"\033&l0O\033(0U\033(s1p13.9v0s3b17T",
		"Zapf Humanist 13.9pt bold [RAM]",
		VARIABLE,
		139,
		(long)12, (long)695,
		{
			  0, 32, 32, 32, 32, 32, 32, 32,
			 32, 32, 32, 34, 34, 38, 44, 29,
			 28, 42, 44, 18, 19, 35, 27, 52,
			 41, 48, 35, 48, 36, 32, 32, 42,
			 35, 56, 34, 33, 35, 30, 34, 28,
			 34, 30, 18, 30, 34, 16, 16, 31,
			 16, 52, 34, 33, 35, 34, 21, 25,
			 21, 34, 29, 44, 27, 29, 28, 16,
			 19, 45, 32, 49, 41, 19, 19, 29,
			 48, 16, 19, 16, 29, 16, 16, 48,
			 48, 48, 25, 58, 19, 29, 19, 32,
			 29, 29, 29, 29, 48, 16, 16, 16,
			 16, 32, 19
		}
	},
	{			/* Prestige elite 10pt, italic	*/
#define	PW	25
		"\033&l0O\033(0U\033(sp12h10v0s0b8T",
		"Prestige Elite 12 pitch, 10pt [RAM]",
		FIXED,
		100,
		(long)3, (long)125,
		{
		0,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW
		}
	},
	{
		"\033&l0O\033(0U\033(sp12h10v1s0b8T",
		"Prestige Elite 12 pitch, 10pt italic [RAM]",
		FIXED,
		100,
		(long)3, (long)125,
		{
		0,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW
		}
	},
	{
		"\033&l0O\033(0U\033(sp12h10v0s3b8T",
		"Prestige Elite 12 pitch, 10pt bold [RAM]",
		FIXED,
		100,
		(long)3, (long)125,
		{
		0,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW,	PW,	PW,	PW,	PW,	PW,
		PW,	PW,	PW
		}
	},
	{
		"\033&l0O\033(4Q\033(s0p12h12v0s0b0T",
		"IBM PC monochrome graphics 12 pitch, 12pt [RAM]",
		FIXED,
		120,
		(long)2, (long)100,
		{
			  0, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0, 25, 25,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25,  0,  0,  0, 25,  0,  0,  0,
			  0, 25,  0
		}
	},
	{
		"\033&l0O\033(8U\033(s1p17.8v0s3b0T",
		"MWC Logo 17.8pt bold [RAM]",
		VARIABLE,
		180,
		(long)1, (long)75,
		{
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0, 80,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0
		}

	},
	{
		"\033&l0O\033(0U\033(sp16h7vsb8T",
		"Prestige Elite 16.66 pitch, 8.5pt [RAM]",
		FIXED,
		85,
		(long)12, (long)425,
		{
			  0, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18, 18, 18, 18, 18, 18,
			 18, 18, 18
		}
	},
	{
		"\033&l0O\033(0A\033(s0p12h10v0s0b8T",
		"Math 12 pitch, 10pt [RAM]",
		FIXED,
		120,
		(long)2, (long)100,
		{
			  0, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25
		}
	}
#if	0
	/* This font can be added quickly...	*/
	,{
		"\033&l0O\033(15U\033(s0p12h10v0s0b8T",
		"Publishing Icons 12 pitch, 10pt [RAM]",
		FIXED,
		120,
		(long)2, (long)100,
		{
			  0, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25, 25, 25, 25, 25, 25,
			 25, 25, 25
		}
	}
#endif
#endif
};


/*
 * Set up the non constant parameters that are dependent on a
 * particular device.  Namely pointsize and font.
 * Initializes the laser printer.
 */
devparm()
{
	CODE	cb;

	printf("%s", linit);
	cb.c_code = DFONT;
	cb.c_iarg = TRMED;
	flushl(&cb, &cb + 1);
	devfont(TRMED);
}


/*
 * Given a font, consisting of the font number, set the new font
 * to the one given.
 */
devfont(font)
unsigned	font;
{
	register fwtab	*fp;

	if (font >= sizeof(dfont)/sizeof(*dfont))
		panic("Bad font %d at devfont", font);
	newfont = font;
	fp = &dfont[font];
	swdmul = fp->f_num;
	swddiv = fp->f_den;
	fonwidt = fp->f_width;
	devpsze(fp->f_psz);
}


/*
 * Change the pointsize to the one specified.
 */
devpsze(n)
{
	psz = newpsz = n;
}


/*
 * Change the vertical spacing.
 */
devvlsp()
{
	vls = unit(SMINCH, 6*SDINCH);
}


/*
 * Given a pointer to a buffer containing stream directives
 * and a pointer to the end of the buffer, print the buffer
 * out.
 */
flushl(buffer, bufend)
CODE *buffer;
CODE *bufend;
{
	register CODE	*cp;
	register fwtab	*fp;
	register int	n;
	static int	hposd,		/* device horiz. pos (u's) */
			hpost,		/* troff horiz. pos (u's) */
			vposd,		/* device ver. pos (u's) */
			vpost,		/* troff ver. pos (u's) */
			font	= -1;	/* current CODE font */
	static unsigned char *wtab;	/* current CODE width table */
	static long	wnum,
			wden;
	static int	wpsz;

	for (cp=buffer; cp<bufend; cp++) {
		switch (cp->c_code) {
		case DNULL:		/* Null code */
		case DHYPH:		/* place to hyphenate */
			continue;
		case DHMOV:		/* move horizontal */
		case DPADC:		/* paddable character */
			hpost += cp->c_iarg;
			if (hpost < 0)
				hpost = 0;
			continue;
		case DVMOV:		/* move vertically */
			vpost += cp->c_iarg;
			if (vpost < 0)
				vpost = 0;
			continue;
		case DFPOS:		/* Fix position */
			LVmove(vposd);
			LHmove(hposd);
			continue;
		case DFONT:		/* change font */
			if (cp->c_iarg == font)
				continue;
			if ((unsigned)cp->c_iarg
				>= sizeof(dfont) / sizeof(*dfont))
				panic("Bad font %d in code stream",
					cp->c_iarg);
			font = cp->c_iarg;
			fp = &dfont[font];
			wtab = fp->f_width;
			wnum = fp->f_num * fp->f_psz;
			wden = fp->f_den;
			wpsz = fp->f_psz;
			printf("%s", fp->f_cmd);
			continue;
		case DTRAN:			/* Transparent character */
			putchar(cp->c_iarg);
			continue;
		case DTRAB:			/* trans line (dag)	*/
			{
				char *tp;
				tp = cp->c_bufp;
				while (*tp)
					putchar( *tp++ );
				free(cp->c_bufp);
				continue;
			}
		case DPSZE:		/* change  pointsize */
			/* not implimented yet (Henry) */
			if (cp->c_iarg != wpsz)
#if	0
				printu("Code DPSZE");
#else
				continue;
#endif
			continue;
		case DSPAR:		/* space  down and return */
			hpost = 0;
			vpost += cp->c_iarg;
			if (vpost < 0)
				vpost = 0;
			while (vposd + LINEH <= vpost) {
				putchar('\n');
				vposd += LINEH;
				hposd = 0;
			}
			continue;
		default:		/* print something */
			/*
			 * If we need to, we now note we are on a new page.
			 * Note, the laser goes to funny places when it
			 * crosses a page boundary.
			 */
			if (vpost >= pgl) {
				vpost %= pgl;
				vposd = vpost;
				printf(lmove, vposd, 'V');
				hposd = hpost;
				if (hposd < LBIAS)
					hposd = LBIAS;
				printf(lmove, hposd-LBIAS, 'H');
			} else {
				if (vpost != vposd) {
					vposd = vpost;
					printf(lmove, vposd, 'V');
				}
				if (hpost != hposd) {
					hposd = hpost;
					if (hposd < LBIAS)
						hposd = LBIAS;
					printf(lmove, hposd-LBIAS, 'H');
				}
			}
			n = cp->c_code;
			if (n == DHYPC)
				n = CMINUS;
			if (n <= 0 || n >= sizeof(intasc))
				panic("Bad directive %d", n);
			hpost += cp->c_move;
			hposd += unit(wnum*wtab[n], wden);
			{		/* dag's bold hack	*/
			  int q;
			  q = n;
			  n = intasc[n];
			  putchar(n);
			  if (enbldn != 0) {	/* dag's enbolden...	*/
				LVmove(vposd - enbldn);
				LHmove(hposd - unit(wnum*wtab[q], wden));
				putchar(n);
				LHmove(hposd-(unit(wnum*wtab[q],wden)-enbldn));
				putchar(n);
				LVmove(vposd);
				LHmove(hposd-(unit(wnum*wtab[q],wden)-enbldn));
				putchar(n);
				LHmove(hposd);
			  }
			}
		}
	}
}

/*
 * Print proper escape sequence to reset the laser printer so that the
 * last page is ejected.
 *
 */

void
resetdev()
{
	printf(RESET);
}

/*
 * List all the font names descriptions in this version
 */
void font_display()
{
	register FTB *fntb = fontab;
	register int a, b;

	fprintf(stderr, "Fonts available in this version:\n");
	while ((b=fntb->f_name[0]) != 0) {
		if ((a = fntb->f_name[1]) == 0)
			a = 0x20;
		fprintf(stderr," %c%c %s\n", b,a, dfont[fntb->f_font].f_descr);
		fntb++;
	}
}

/*
 * Return the number of the named font, or -1 if none. (name is a, b)
 */
int font_number(a, b)
{
	register FTB *fntb = fontab;

	while ((fntb->f_name[0] != a) || (fntb->f_name[1] != b)) {
		if (fntb->f_name[0] == '\0')
			return -1;
		fntb++;
	}
	return (fntb->f_font);
}

/*
 * Assign a font number to a name.  If there is no font of that name,
 * add one.  This depends on enough extras in the font table.  It does
 * not check.
 */
int assign_font(a, b, c)
register int a, b;
int c;
{
	register FTB *fntb = fontab;
	while ((fntb->f_name[0] != a) || (fntb->f_name[1] != b)) {
		if (fntb->f_name[0] == '\0') {
			if (nncount++ >= NNMAX) {
				printe("no room for new font name %c%c",
						a, ((b) ? b : ' '));
				return;
			}
			fntb->f_name[0] = a;
			fntb->f_name[1] = b;
			fntb->f_font    = c;
			return -1;
		}
		fntb++;
	}
	a = fntb->f_font;
	fntb->f_font = c;
	return (a);
}

/*
 * Return true if font is variable spaced
 */
int is_varspace(t)
int t;
{
	return (dfont[t].f_varsp == VARIABLE);
}
@
