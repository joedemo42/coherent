head     1.5;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.5
date     91.09.11.07.35.59;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     91.05.29.15.22.11;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     91.04.16.17.47.31;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.19.20.11.12;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.02.04.16.51.09;  author bin;  state Exp;
branches ;
next     ;


desc
@init ver prov by stevesf
@


1.5
log
@provided by stevesf
@
text
@/*
 * extern.c
 * Nroff/Troff.
 * Global variables.
 */

#include "roff.h"

/* Miscellaneous globals, declared in roff.h. */
int		A_reg;			/* .A register			*/
int		a_reg;			/* .a register			*/
char		*argv0;			/* "nroff" or "troff"		*/
int		bracelevel;		/* Level of \{ \} nesting	*/
int		byeflag;		/* True when exiting		*/
int		dbglvl;			/* Debug level			*/
int		dflag;			/* Debug flag			*/
char		diskbuf[DBFSIZE];	/* Disk buffer for temp file	*/
char		endtrap[2];		/* End macro name		*/
char		esc;			/* Escape character		*/
int		escflag;		/* Last character was escaped	*/
int		iestack[IESTACKSIZE];	/* .ie condition stack		*/
int		iestackx;		/* .ie condition stack index	*/
int		infalse;		/* True in false conditional	*/
int		lflag;			/* Landscape mode		*/
char		miscbuf[MSCSIZE];	/* Miscellaneous buffer		*/
int		nbrflag;		/* Don't allow command to break	*/
unsigned	npn;			/* Next page number		*/
int		n_reg;			/* .n register			*/
int		oldbracelevel;		/* Old level of \{ \} nesting	*/
int		oldpof;			/* Old page offset		*/
unsigned	pct;			/* Page counter			*/
int		pflag;			/* Generate PostScript output	*/
unsigned	pgl;			/* Page length			*/
int		pof;			/* Page offset			*/
SPECIAL		*spc_list;		/* Special characters		*/
int		svs;			/* Saved space			*/
FILE		*tmp;			/* Temp file pointer		*/
unsigned long	tmpseek;		/* Pointer into temp file	*/
int		T_reg;			/* .T register			*/
int		varsp;			/* Variable spacing		*/
int		xflag;			/* Suppress page eject on exit	*/
#if	ZKLUDGE
int		Zflag;			/* PS save/restore kludge	*/
#endif

/* Code global, declared in code.h. */
CODE		codeval;

/* Diversion globals, declared in div.h. */
DIV		*cdivp;			/* Pointer to diversion stack	*/
DIV		*mdivp;			/* Pointer to main diversion	*/

/* Environment globals, declared in env.h. */
ENV		env;			/* Current environment		*/
int		envinit[ENVSIZE];	/* If initialized		*/
int		envs;			/* Environment stack index	*/
int		envstak[ENVSTACK];	/* Environment stack		*/

/* Hyphenation globals, declared in hyphen.h. */
char		hindbuf[WORSIZE];
char		hletbuf[WORSIZE];
char		hyphbuf[WORSIZE];

/* Register globals, declared in reg.h. */
REG		*nrctreg;		/* Character type		*/
REG		*nrdlreg;		/* Max width of last diversion	*/
REG		*nrdnreg;		/* Height of last diversion	*/
REG		*nrdwreg;		/* Day of the week		*/
REG		*nrdyreg;		/* Day of the month		*/
REG		*nrhpreg;		/* Current horizontal place	*/
REG		*nrlnreg;		/* Output line number		*/
REG		*nrmoreg;		/* Month			*/
REG		*nrnlreg;		/* Position of last printed line */
REG		*nrpnreg;		/* Current page number		*/
REG		*nrsbreg;		/* Depth of string below base	*/
REG		*nrstreg;		/* Height of string above base	*/
REG		*nryrreg;		/* Year				*/
REG		*regt[RHTSIZE];		/* Register hash table		*/

/* Input stack global, declared in str.h. */
STR		*strp;			/* Input stack			*/

/* end of extern.c */
@


1.4
log
@mods prov by stevesf
@
text
@d42 3
@


1.3
log
@steve updated
@
text
@d13 3
a15 2
int		byeflag;		/* True when exiting.		*/
int		dbglvl;			/* Debug level.			*/
d23 1
a23 1
int		ifeflag;		/* True in false conditional	*/
d29 1
d35 1
@


1.2
log
@update prov by stevesf for ver 311
@
text
@d20 2
a22 1
int		lastcon;		/* Last condition of if/else	*/
d37 1
d51 1
a51 1
int		envstak[EVSSIZE];	/* Environment stack		*/
@


1.1
log
@Initial revision
@
text
@d2 1
d6 1
a6 1
#include <stdio.h>
a7 5
#include "code.h"
#include "env.h"
#include "div.h"
#include "reg.h"
#include "str.h"
d9 28
a36 5
/*
 * Temp file.
 */
FILE		*tmp;			/* Temp file pointer */
unsigned long	tmpseek;		/* Pointer into temp file */
d38 2
a39 7
/*
 * Expressions.
 */
int		experr;			/* Got an error */
int		expmul;			/* Default unit multiplier */
int		expdiv;			/* Default unit divisor */
char		*expp;			/* Pointer in expression */
d41 3
a43 6
/*
 * Enviroments.
 */
ENV		env;			/* Current enviroment */
int		envstak[EVSSIZE];	/* Enviroment stack */
int		envs;			/* Enviroment stack index */
d45 5
a49 5
/*
 * Process.
 */
int		nbrflag;		/* Don't allow command to break */
int		escflag;		/* Last character was escaped */
d51 4
a54 18
/*
 * Miscellaneous.
 */
char		miscbuf[MSCSIZE];	/* Miscellaneous buffer */
int		pof;			/* Page offset */
int		oldpof;			/* Old page offset */
unsigned	pgl;			/* Page length */
unsigned	pct;			/* Page counter */
unsigned	npn;			/* Next page number */
char		esc;			/* Escape character */
char		endm[2];		/* End macro */
DIV		*mdivp;			/* Pointer to main diversion */
DIV		*cdivp;			/* Pointer to diversion stack */
STR		*strp;			/* Input stack */
char		lbomsg[]	= "Line buffer overflow";	/* Message for chkcode macro */
int		curfont,		/* Current font type */
		curpsz;			/* Current point size */
int		mapfont[8] = { 'R', 'I', 'B', 'S', 'H', 'L', 0, 0};
d56 15
a70 4
/*
 * A null string.
 */
char		*null 	= "";
d72 2
a73 37
/*
 * These should be commented.
 */
CODE		codeval;
int		svs;
char		endtrap[2];
int		outflag;
int		lastcon;
REG		*regt[RHTSIZE];
REG		*nrpnreg;		/* Page number register?	*/
REG		*nrctreg;
REG		*nrdlreg;
REG		*nrdnreg;
REG		*nrdwreg;
REG		*nrdyreg;
REG		*nrhpreg;
REG		*nrlnreg;
REG		*nrmoreg;
REG		*nrnlreg;
REG		*nrsbreg;
REG		*nrstreg;
REG		*nryrreg;
int		envinit[ENVSIZE];
int		byeflag;
int		ifeflag;
int		ntrflag;
int		debflag;
char		hyphbuf[WORSIZE];
char		hletbuf[WORSIZE];
char		hindbuf[WORSIZE];
int		d00flag = 0;
char		diskbuf[DBFSIZE];
int		antflag = 0;
int		tntflag = 0;
extern int	ntroff;			/* Initialized in tty.c */
int		nrorval;
int		arorval;
d75 1
a75 1
int		dbglvl = 0;		/* Debug level.		*/
@
