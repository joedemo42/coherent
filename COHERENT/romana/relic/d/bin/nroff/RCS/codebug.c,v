head     1.1;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.1
date     91.02.04.16.50.04;  author bin;  state Exp;
branches ;
next	;


desc
@init ver prov by stevesf
@



1.1
log
@Initial revision
@
text
@#ifndef	DDEBUG
#define	DDEBUG	0
#endif

#if	(DDEBUG != 0)
#include	<stdio.h>
#include	"codebug.h"

#if	(DDEBUG & DBGCODE)
#include	"code.h"

static char *codtab[] = {
	"DNULL",
	"DHMOV (move horizontal)",
	"DVMOV (move vertical)",
	"DFONT (change font)",
	"DPSZE (change pointsize)",
	"DSPAR (space down and return)",
	"DPADC (Paddable character)",
	"DHYPH (Place to hyphenate)",
	"DHYPC (Hyphen character)"
	};

codebug(code, parm1, parm2)
{
	extern char intasc[];

	if (code <= 0) {
		printd(DBGCODE, "%s %u %d\n", codtab[-code], parm1, parm2);
	} else {
		printd(DBGCODE, "%c (width=%d)\n", intasc[code], parm1);
	}
}
#endif

static char *dbgtbl[] = {
	"CHECKpoints", "REGisterS", "REGister eXecution", "output CODEs",
	"DIVeRsions", "FILEs", "FUNCtions", "CHARacters", "PROCess trace",
	"MACro eXecution", "MISCelaneous", "MOVEment", "ENViRonment",
	"CALL tracing"
};

printd(lvl, fmt)
int lvl;
char *fmt;
{
	if (lvl & dbglvl)
		fprintf(stderr, "%r", &fmt);
}

void dbginit()
{
	register int t=dbglvl;
	register int j;
	register int m=1;

	if (dbglvl == 0)
		return;
	for (j=0; j<15; j++) {
		if (t & m)
			fprintf(stderr, "debugging %s\n", dbgtbl[j]);
		m <<= 1;
	}
}
#endif
@
