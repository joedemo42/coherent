head     1.6;
branch   ;
access   ;
symbols  ;
locks    bin:1.6;
comment  @ * @;


1.6
date     93.04.05.08.31.22;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     91.09.11.07.35.51;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     91.05.29.15.21.47;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     91.04.16.17.46.38;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.19.20.09.52;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.02.04.16.50.36;  author bin;  state Exp;
branches ;
next     ;


desc
@init ver prov by stevesf
@


1.6
log
@Steve various fixes and fwtable changes.
@
text
@/*
 * env.c
 * Nroff/Troff.
 * Environments.
 */

#include "roff.h"

/*
 * Initialize the current environment.
 * The new environment inherits the values of all
 * environmental variables which are not initialized here:
 * this includes fcsz, fpsz, tfn, ufn, ufp.
 */
envset()
{
	register int inc, i, n;

	/* Set output line, default font and pointsize, vertical spacing. */
	tln = lln = (lflag) ? unit(9*SMINCH, SDINCH) : unit(13*SMINCH, 2*SDINCH);
	setline();
	curfont = 0;
	fon[0] = 'R';
	fon[1] = '\0';
	if (ntroff == TROFF) {
		psz = unit(10*SMPOIN, SDPOIN);	/* default point size = 10pt */
		vls = unit(11*SMPOIN, SDPOIN);	/* default leading 11 on 10 */
	}

	/* Set default tab stops. */
	tab[0].t_pos = 0;
	tab[0].t_jus = LJUS;
	inc = n = unit(8*SMINCH, 10*SDINCH);
	for (i=1; i<TABSIZE-1; i++) {
		env.e_tab[i].t_pos = n;
		env.e_tab[i].t_jus = LJUS;
		n += inc;
	}
	tab[TABSIZE-1].t_pos = 0;
	tab[TABSIZE-1].t_jus = NJUS;

	/* Set other variables. */
	adj = FJUS;
	adm = 1;
	ccc = '.';
	cec = 0;
	csz = 0;
	enb = 0;
	fill = 1;
	hic = EHYP;
	hyp = 1;
	hypf = 0;
	ind = 0;
	inpltrc = 0;
	inptrap[0] = '\0';
	ldc = '.';
	lgm = (ntroff == NROFF) ? 0 : 1;
	lmn = 0;
	lni = 0;
	lnn = 0;
	lns = 0;
	lsp = 1;
	mar = unit(SMEMSP, SDEMSP);
	mrc = '\0';
	mrch = '\0';
	nbc = '\'';
	nnc = 0;
	spcnt = 0;
	ssz = sszmul = (ntroff == NROFF) ? unit(SMEMSP, SDEMSP)
					 : unit(SMEMSP * 12, SDEMSP * 36);
	sszdiv = psz;	
	tbc = '\0';
	tbs = 0;
	tif = 0;
	tin = 0;
	tpc = '%';
	ulc = 0;
	oldfon[0] = fon[0];
	oldfon[1] = fon[1];
	oldind = ind;
	oldlln = lln;
	oldlsp = lsp;
	oldpsz = psz;
	oldtln = tln;
	oldvls = vls;
}

/*
 * Save environment n.
 */
envsave(n) int n;
{
	lseek(fileno(tmp), (long) n * sizeof (ENV), 0);
	if (write(fileno(tmp), &env, sizeof (env)) != sizeof (env))
		panic("cannot write environment");
}

/*
 * Restore environment n.
 * Bug: in troff, restoring a saved environment does not set
 * fpsz[n] for a font n loaded in the new environment.
 */
envload(n) int n;
{
	lseek(fileno(tmp), (long) n * sizeof (ENV), 0);
	if (read(fileno(tmp), &env, sizeof (env)) != sizeof (env))
		panic("cannot read environment");
	dev_font(curfont);
}

/* end of env.c */
@


1.5
log
@provided by stevesf
@
text
@d68 1
@


1.4
log
@mods prov by stevesf
@
text
@a67 1
	spcnt = 0;
@


1.3
log
@steve updated
@
text
@d13 1
a13 1
 * this includes fcsz, fpsz, tbf, ufn, ufp.
d15 1
a15 1
setenvr()
d19 1
a19 1
	/* Set output line, default font, pointsize, vertical spacing. */
d22 7
a28 3
	setfont("R", 1);
	devpsze(unit(10*SMPOIN, SDPOIN));
	devvlsp(psz+10);		/* default leading is 11 on 10 */
d57 1
a57 1
	lgm = 0;
d63 1
a63 2
	mar = ssz = (ntroff == NROFF) ? unit(SMENSP, SDENSP)
				      : unit(SMEMSP * 12, SDEMSP * 36);
d69 3
a82 2
	oldmar = mar;
	oldssz = ssz;
d108 1
a108 1
	devfont(fontype);
@


1.2
log
@update prov by stevesf
@
text
@d11 3
d19 2
a20 1
	hypf = 0;
a21 2
	preexls = 0;
	posexls = 0;
d25 2
d37 3
a39 5
	lln = (lflag) ? unit(9*SMINCH, SDINCH) : unit(13*SMINCH, 2*SDINCH);
	ind = 0;
	tin = 0;
	tif = 0;
	fil = 1;
d41 1
a41 1
	adj = FJUS;
d43 4
a46 6
	ulc = 0;
	uft[0] = 'I';
	uft[1] = '\0';
	ufn = font_number(uft, NULL);
	mws = (ntroff == NROFF) ? unit(SMENSP, SDENSP) : unit(SMEMSP * 12, SDEMSP * 36);
	lsp = 1;
d48 5
a52 3
	tln = lln;
	mar = mws;
	csz = 0;
d54 2
a56 1
	lmn = 0;
d58 6
a63 1
	lni = 0;
d65 7
a71 2
	inpltrc = 0;
	inptrap[0] = '\0';
d74 1
a74 2
	oldpsz = psz;
	oldvls = vls;
a75 2
	oldind = ind;
	oldmws = mws;
d77 3
d81 1
a81 11
	oldmar = mar;
	ccc = '.';
	nbc = '\'';
	tbc = '\0';
	ldc = '.';
	ldrspc = 0;
	oldrspc = ldrspc;
	hic = EHYP;
	tpc = '%';
	mrc = '\0';
	mrch = '\0';
d84 23
@


1.1
log
@Initial revision
@
text
@d2 1
d4 1
a4 1
 * Enviroments.
d6 1
a6 1
#include <stdio.h>
a7 3
#include "code.h"
#include "env.h"
#include "esc.h"
d10 1
a10 2
 * Save enviroment parameters that might be destroyed when processing
 * a single line of text and initialise for a new line.
d12 1
a12 2
/*
newenvr()
a13 35
	register ENV *ep;

	ep = nalloc(sizeof (ENV));
#ifdef	STRUCTCPY
	*ep = env;
#else
	copystr(ep, &env, sizeof (ENV), 1);
#endif
	setline();
	return(ep);
}
*/

/*
 * Restore enviroment parameters that were previously saved with
 * the function `newenvr'.
 */
/*
resenvr(ep)
register ENV *ep;
{
#ifdef	STRUCTCPY
	env = *ep;
#else
	copystr(&env, ep, sizeof (ENV), 1);
#endif
	nfree(ep);
}
*/

/*
 * Initialise the current enviroment.
 */
setenvr()
{
d21 2
a22 2
	setpsze(unit(10*SMPOIN, SDPOIN));
	devvlsp(newpsz);
d33 1
a33 1
	lln = unit(13*SMINCH, 2*SDINCH);
d44 2
a45 4
	if (ntroff == NROFF)
		mws = unit(SMENSP, SDENSP);
	else
		mws = unit(SMEMSP * 12, SDEMSP * 36);
d49 1
a49 1
	mar = 0;
d78 1
d81 1
a81 38
/*
 * Given a font name, change font.
 */
setfont(name, setflag)
char name[2];
{
	register FTB *fp;

	if ((name[0] >= '1') && (name[0] <='8'))
		name[0] = mapfont[name[0] - '0' - 1];

	if (name[0]=='P' && name[1]=='\0') {
		name[0] = oldfon[0];
		name[1] = oldfon[1];
	}
	fp = fontab;
	while (fp->f_name[0]!=name[0] || fp->f_name[1]!=name[1]) {
		if (fp++->f_name[0] == '\0') {
			printe("Cannot find font");
			return;
		}
	}
	devfont(fp->f_font);
	if (setflag) {
		oldfon[0] = fon[0];
		oldfon[1] = fon[1];
		fon[0] = name[0];
		fon[1] = name[1];
	}
}

/*
 * Set the current pointsize.
 */
setpsze(n)
{
	devpsze(n);
}
@
