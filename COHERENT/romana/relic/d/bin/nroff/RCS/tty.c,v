head     1.5;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.5
date     91.09.11.07.39.40;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     91.05.29.15.25.47;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     91.04.16.17.53.05;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.19.20.53.13;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.02.04.16.57.06;  author bin;  state Exp;
branches ;
next     ;


desc
@init ver prov by stevesf
@


1.5
log
@provided by stevesf
@
text
@/*
 * tty.c
 * Nroff.
 * nroff output writer, aka TTY driver.
 */

#include <ctype.h>
#include "roff.h"

/* Font indices. */
#define	FONTR	0			/* Roman			*/
#define	FONTB	1			/* Bold				*/
#define	FONTI	2			/* Italic			*/

/* Special escape sequences. */
#define	RLF	"\0337"			/* Reverse line feed		*/
#define	HRLF	"\0338"			/* Half reverse line feed	*/
#define	HLF	"\0339"			/* Half line feed		*/
#define	LF	"\033B"			/* Line feed			*/

/*
 * Device parameters.
 */
int	ntroff	=	NROFF;		/* Programme is NROFF type	*/
long	semmul	=	3;		/* Multiplier for em space	*/
long	semdiv	=	5;		/* Divisor for em space		*/
long	senmul	=	3;		/* Multiplier for en space	*/
long	sendiv	=	5;		/* Divisor for en space		*/
long	shrmul	=	12;		/* Horizontal resolution (mul)	*/
long	shrdiv	=	1;		/* Horizontal resolution (div)	*/
long	sinmul	=	120;		/* Multiplier for inch		*/
long	sindiv	=	1;		/* Divisor for inch		*/
long	snrmul	=	0;		/* Narrow space (mul)		*/
long	snrdiv	=	1;		/* Narrow space (div)		*/
long	svrmul	=	20;		/* Vertical resolution (mul)	*/
long	svrdiv	=	1;		/* Vertical resolution (div)	*/

/*
 * Map user fontnames to font numbers.
 */
FTB fontab[NFNAMES] ={
	{ 'R',  '\0', FONTR },
	{ 'B',  '\0', FONTB },
	{ 'I',  '\0', FONTI }
};
static	char	*font_names[NFNAMES] = { "Roman", "Bold", "Italic" };

/*
 * Initialize nroff-specific parameters.
 */
dev_init()
{
	swdmul	= 1;			/* multiplier for width table */
	swddiv	= 20;			/* divisor for width table */
	vls = psz = unit(SMINCH, 6*SDINCH);

	/* Sanity check: width() below assumes swdmul*psz == swddiv. */
	if (swdmul * psz != swddiv)
		panic("botch: swdmul=%d psz=%d swddiv=%d", swdmul, psz, swddiv);
}

/*
 * Compute the scaled width of a character:
 *	width(c) == unit(swdmul*fonwidt[c]*psz, swddiv).
 * For nroff, swdmul*psz == swddiv and fonwidt[i] is constant, so it's trivial.
 */
int
width(c) register int c;
{
	return (c < NWIDTH) ? 12 : 0;
}

/*
 * Given a font number, change to the given font.
 */
dev_font(n) register int n;
{
	addidir(DFONT, curfont = n);
}

/*
 * Given a pointer to a buffer containing stream directives
 * and a pointer to the end of the buffer, print the buffer
 * out.
 */
flushl(buffer, bufend) CODE *buffer; CODE *bufend;
{
	static int hpos, hres, vres, font;
	register CODE *cp;
	register int i, n;
	char *tp;

#if	(DDEBUG & DBGFUNC)
	printd(DBGFUNC, "flushl: hpos=%d, hres=%d, vres=%d, font=%d\n",
		hpos, hres, vres, font);
#endif
	for (cp = buffer; cp < bufend; cp++) {
		i = cp->l_arg.c_iarg;
#if	(DDEBUG & DBGCODE)
		codebug(cp->l_arg.c_code, i);
#endif
#if	0
		fprintf(stderr, "output: %d arg=%d\n", cp->l_arg.c_code, i);
#endif
		switch (cp->l_arg.c_code) {
		case DNULL:
		case DHYPH:
			continue;
		case DHMOV:
		case DPADC:
			hres += i;
			if ((hpos += i) < 0) {
				hres -= hpos;
				hpos = 0;
			}
			continue;
		case DVMOV:
			vres += i;
			continue;
		case DFONT:
			font = i;
			continue;
		case DPSZE:
			continue;
		case DSPAR:
			hpos = hres = 0;
			vres += i;
			if (vres >= 0) {
				n = (vres+10) / 20;
				vres -= n*20;
				while (n--)
					putchar('\n');
			} else {
				putchar('\r');
				n = (-vres+9)/20;
				vres += n*20;
				while (n--)
					printf(RLF);
			}
			continue;
		case DTRAB:			/* transparent line */
			tp = cp->b_arg.c_bufp;
			while (*tp)
				putchar(*tp++);
			free(cp->b_arg.c_bufp);
			continue;
		default:
			if (vres >= 0) {
				vres += 5;
				n = (vres) / 20;
				while (n--)
					printf(LF);
				if (vres%20/10)
					printf(HLF);
			} else {
				vres -= 5;
				n = (-vres)/20;
				while (n--)
					printf(RLF);
				if (-vres%20/10)
					printf(HRLF);
			}
			vres = 0;
			if (hres >= 0) {
				n = (hres+6) / 12;
				hres -= n*12;
				while (n--)
					putchar(' ');
			} else {
				n = (-hres+5)/12;
				hres += n*12;
				while (n--)
					putchar('\b');
			}
			if (cp->l_arg.c_code==DHYPC)
				n = '-';
			else
				n = cp->l_arg.c_code;
			if (n < 0 || n >= NWIDTH)
				panic("bad directive %d", n);
			if ((font != FONTR)
			&&  (isascii(n))
			&&  (isupper(n) || islower(n) || isdigit(n)))
				switch (font) {
				case FONTB:
					printf("%c\b", n);
					break;
				case FONTI:
#if	1
					printf("_\b");
#else
					n |= 0x80;
#endif
					break;
#if	0
				case HELV:
					printf("_\b");
					break;
#endif
				default:
					panic("bad font %d", font);
				}
			putchar(n);
			hres += cp->c_arg.c_move-12;
			hpos += cp->c_arg.c_move;
		}
	}
}

/*
 * Display available fonts.
 */
void
font_display()
{
	register FTB *p;
	register int a, b;

	fprintf(stderr, "Fonts available in this version:\n");
	for (p = fontab; p < &fontab[NFNAMES]; p++) {
		if ((a = p->f_name[0]) == 0)
			break;
		if ((b = p->f_name[1]) == 0)
			b = ' ';
		fprintf(stderr," %c%c %s\n", a, b, font_names[p->f_font]);
	}
	fprintf(stderr, "Fonts may be renamed with the .rf request.\n");
}

/*
 * The following troff functions are nops for nroff.
 */
#if	ZKLUDGE
dev_close(){}
#endif
dev_cs(){}
dev_fz(){}
dev_ps(){}		/* psz initialized in devinit() */
newpsze(){}
load_font(){}


/* end of tty.c */
@


1.4
log
@mods prov by stevesf
@
text
@d46 1
d100 1
a100 1
		codebug(cp->l_arg.c_code, i, cp->c_csp);
d216 12
a227 3
	fprintf(stderr,
"Fonts available in this version:\n R  Roman\n I  Italic\n B  Bold\n"
		);
d233 3
d242 1
@


1.3
log
@steve updated
@
text
@d3 2
a4 2
 * Nroff/Troff.
 * TTY driver.
d10 5
d16 4
a19 4
#define	RLF	"\0337"			/* Reverse line feed */
#define	HRLF	"\0338"			/* Half reverse line feed */
#define	HLF	"\0339"			/* Half line feed */
#define	LF	"\033B"			/* Line feed */
d24 13
a36 13
int	ntroff	=	NROFF;		/* Programme is NROFF type */
long	semmul	=	3;		/* Multiplier for em space */
long	semdiv	=	5;		/* Divisor for em space */
long	senmul	=	3;		/* Multiplier for en space */
long	sendiv	=	5;		/* Divisor for en space */
long	shrmul	=	12;		/* Horizontal resolution (mul) */
long	shrdiv	=	1;		/* Horizontal resolution (div) */
long	sinmul	=	120;		/* Multiplier for inch */
long	sindiv	=	1;		/* Divisor for inch */
long	snrmul	=	0;		/* Narrow space (mul) */
long	snrdiv	=	1;		/* Narrow space (div) */
long	svrmul	=	20;		/* Vertical resolution (mul) */
long	svrdiv	=	1;		/* Vertical resolution (div) */
d42 3
a44 3
	{ 'R',  '\0', TRMED },
	{ 'I',  '\0', TRITL },
	{ 'B',  '\0', TRBLD }
d48 1
a48 2
 * Width table.
 * Initialized in devinit().
d50 1
a50 6
unsigned char widtab[NWIDTH];

/*
 * Set up the non-constant parameters that depend on a particular device.
 */
devinit()
a51 5
	register int i;

	for (i = 0; i < NWIDTH; i++)
		widtab[i] = 12;		/* initialize font width table */
	fonwidt = widtab;		/* width table for all fonts */
d75 1
a75 1
devfont(n) register int n;
d77 1
a77 2
	nlindir++;
	addidir(DFONT, fontype = n);
a80 18
 * Change the pointsize to the one specified.
 * A nop for nroff.
 */
devpsze(n) int n;
{
	/* psz initialized in devinit() */
}

/*
 * Change the vertical spacing.
 * A nop for nroff.
 */
devvlsp(n)
{
	/* vls initialized in devinit() */
}

/*
d180 1
a180 1
			if ((font != TRMED)
d184 1
a184 1
				case TRBLD:
d187 1
a187 1
				case TRITL:
d216 1
a216 1
		"Fonts available in this version:\n R  Roman\n I  Italic\n B  Bold\n"
d225 1
a227 1
void resetdev(){}
@


1.2
log
@update prov by stevesf for ver 311
@
text
@d10 6
d44 1
a44 1
 * Initialized in devparm().
d51 1
a51 1
devparm()
d60 5
a64 3
	devfont(TRMED);
	oldpsz = psz = unit(SMINCH, 6*SDINCH);
	vls = unit(SMINCH, 6*SDINCH);
d68 11
d83 1
d93 1
a93 1
	/* psz initialized in devparm() */
d102 1
a102 1
	/* vls initialized in devparm() */
d110 1
a110 3
flushl(buffer, bufend)
CODE *buffer;
CODE *bufend;
d112 4
a115 6
	static int hpos;
	static int hres;
	static int vres;
	static int font;
	register CODE	*cp;
	register int	n;
d121 2
a122 1
	for (cp=buffer; cp<bufend; cp++) {
d124 1
a124 1
		codebug(cp->l_arg.c_code, cp->l_arg.c_iarg, cp->c_csp);
d127 1
a127 1
		fprintf(stderr, "output: %d arg=%d\n", cp->l_arg.c_code, cp->l_arg.c_iarg);
d135 2
a136 2
			hres += cp->l_arg.c_iarg;
			if ((hpos+=cp->l_arg.c_iarg)<0) {
d142 1
a142 1
			vres += cp->l_arg.c_iarg;
d145 1
a145 1
			font = cp->l_arg.c_iarg;
d151 1
a151 1
			vres += cp->l_arg.c_iarg;
d162 1
a162 1
					printf("\0337");
d165 6
d176 1
a176 1
					printf("\033B");
d178 1
a178 1
					printf("\0339");
d183 1
a183 1
					printf("\0337");
d185 1
a185 1
					printf("\0338");
a253 6
int
is_varspace(t) int t;
{
	return 0;
}

@


1.1
log
@Initial revision
@
text
@d2 1
d6 1
a6 1
#include <stdio.h>
a8 5
#include "code.h"
#include "char.h"
#include "env.h"
#include "font.h"
#include "codebug.h"
a13 2
long	sinmul	=	120;		/* Multiplier for inch */
long	sindiv	=	1;		/* Divisor for inch */
d18 4
a23 2
long	shrmul	=	12;		/* Horizontal resolution (mul) */
long	shrdiv	=	1;		/* Horizontal resolution (div) */
d28 1
a28 1
 * For mapping user fonts to real fonts.
d30 1
a30 1
FTB fontab[] ={
d33 1
a33 2
	{ 'B',  '\0', TRBLD },
	{ '\0' }
a35 8
/* Some names for the fonts */
char *fnames[] = {
	"Medium",
	"Italic",
	"Bold",
	"Nothing"
};

d37 2
a38 1
 * Table to convert from the internal character set to ASCII.
d40 1
a40 12
char intasc[] ={
	  0,  '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',
	'9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',
	'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',
	'T',  'U',  'V',  'W',  'X',  'Y',  'Z',  'a',  'b',  'c',
	'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',
	'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',
	'x',  'y',  'z',  '!',  '"',  '#',  '$',  '%',  '&',  '(',
	')',  '*',  '+',  ',',  '-',  '.',  '/',  ':',  ';',  '<',
	'=',  '>',  '?',  '@@',  '[', '\\',  ']',  '^',  '_',  '{',
	'|',  '}',  '~',  '`', '\'', '\'',  '`',  '^',  '-'
};
d43 1
a43 1
 * Width table.
a44 17
unsigned char widtab[] ={
	  0,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
	 12,   12,   12,   12,   12,   12,   12,   12,   12
};

/*
 * Set up the non constant parameters that are dependent on a
 * particular device.  Namely pointsize and font.
 */
d47 7
d55 2
d60 1
a60 2
 * Given a font, consisting of the font number, set the new font
 * to the one given.
d62 1
a62 1
devfont(font)
d64 1
a64 4
	swdmul	= 1;		/* Multiplier for width tables */
	swddiv	= 20;		/* Divisor for width tables */
	fonwidt = widtab;
	newfont = font;
d69 1
d71 1
a71 1
devpsze(n)
d73 1
a73 1
	psz = newpsz = unit(SMINCH, 6*SDINCH);
d78 1
d82 1
a82 1
	vls = unit(SMINCH, 6*SDINCH);
d94 4
a97 1
	static int	hpos=0, hres=0, vres=0, font=0;
d100 1
d107 1
a107 1
		codebug(cp->c_code, cp->c_iarg, cp->c_csp);
d109 4
a112 1
		switch (cp->c_code) {
d118 2
a119 2
			hres += cp->c_iarg;
			if ((hpos+=cp->c_iarg)<0) {
d125 1
a125 1
			vres += cp->c_iarg;
d127 2
a128 1
		case DFPOS:
a129 3
		case DFONT:
			font = cp->c_iarg;
			continue;
a131 12
		case DTRAN:			/* trans char (dag)	*/
			putchar(cp->c_iarg);
			continue;
		case DTRAB:			/* trans line (dag)	*/
			{
				char *tp;
				tp = cp->c_bufp;
				while (*tp)
					putchar( *tp++ );
				free(cp->c_bufp);
				continue;
			}
d134 1
a134 1
			vres += cp->c_iarg;
d176 2
a177 2
			if (cp->c_code==DHYPC)
				n = CMINUS;
d179 3
a181 4
				n = cp->c_code;
			if (n<=0 || n>=sizeof intasc)
				panic("Bad directive %d", n);
			n = intasc[n];
d190 1
d192 3
d196 5
d202 1
a202 1
					panic("Bad font %d", font);
d205 2
a206 9
			if (enbldn) {		/* Universal bolding.	*/
				int q;
				for (q=0; q<enbldn; q++) {
					printf("\b");
					putchar(n);
				}
			}
			hres += cp->c_move-12;
			hpos += cp->c_move;
d212 1
a212 2
 *	Reset device before leaving. Unecessary in nroff.
 *
a213 1

d215 1
a215 1
resetdev()
d217 3
a219 1
	return;
d223 1
a223 1
 * A bunch of dummy routines for TROFF compatibility
d225 8
a232 1
assign_font()
d234 1
a234 1
	printe(".rf not in NROFF");
d237 1
a237 26
/*
 * Return false.
 */
int is_varspace()
{
	return (0==1);
}

int font_number()
{
	return 0;
}

font_display()
{
	register FTB *fntb = fontab;
	register char a, b;

	fprintf(stderr, "Fonts available in NROFF\n");
	while ((a=fntb->f_name[0]) != 0) {
		if ((b = fntb->f_name[1]) == 0)
			b = ' ';
		fprintf(stderr, " %c%c %s\n", a, b, fnames[fntb->f_font]);
		fntb++;
	}
}
@
