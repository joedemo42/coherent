head     1.4;
branch   ;
access   ;
symbols  ;
locks    bin:1.4;
comment  @ * @;


1.4
date     93.04.05.08.35.27;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     91.04.16.18.01.09;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.19.20.04.59;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.02.08.15.37.08;  author bin;  state Exp;
branches ;
next     ;


desc
@initial version provided by steve ness
@


1.4
log
@Steve: various changes, including fw tables
@
text
@/*
 * str.h
 * Nroff/Troff.
 * Input stack header.
 */

#define SREQS	0			/* Request			*/
#define SSINP	1			/* Insertion from standard input */
#define SFILE	2			/* File I/O			*/
#define SCORE	3			/* Core I/O			*/
#define SCTEX	4			/* Chained text			*/
#define SCDIV	5			/* Chained diversion		*/

#define ARGSIZE	10			/* Maximum number of arguments	*/

/*
 * Used for stacking input sources.
 */
typedef union STR {
	struct	x1 {			/* Used for insertions from stdin */
		union STR *s_next;	/* Pointer to next in stack	*/
		int	s_type;		/* Type of input		*/
		int	s_eoff;		/* End of file flag		*/
		int	s_clnc;		/* Current line number		*/
		int	s_nlnc;		/* Last line number		*/
		int	s_argc;		/* Number of arguments		*/
		char	*s_argp[ARGSIZE];	/* Pointer to arguments	*/
		char	*s_abuf;	/* Arg buffer space		*/
	} x1;
	struct	x2 {			/* File I/O			*/
		union STR *s_next;	/* Pointer to next in stack	*/
		int	s_type;		/* Type of input		*/
		int	s_eoff;		/* End of file flag		*/
		int	s_clnc;		/* Current line number		*/
		int	s_nlnc;		/* Last line number		*/
		int	s_argc;		/* Number of arguments		*/
		char	*s_argp[ARGSIZE];	/* Pointer to arguments	*/
		char	*s_abuf;	/* Arg buffer space		*/
		char	*s_fname;	/* File name			*/
		FILE	*s_fp;		/* File pointer			*/
	} x2;
	struct	x3 {			/* Core I/O			*/
		union STR *s_next;	/* Pointer to next in stack	*/
		int	s_type;		/* Type of input		*/
		int	s_eoff;		/* End of file flag		*/
		int	s_clnc;		/* Current line number		*/
		int	s_nlnc;		/* Last line number		*/
		int	s_argc;		/* Number of arguments		*/
		char	*s_argp[ARGSIZE];	/* Pointer to arguments	*/
		char	*s_abuf;	/* Arg buffer space		*/
		char	*s_cp;		/* Pointer in core		*/
		char	*s_srel;	/* Released when unstacked	*/
	} x3;
	struct	x4 {			/* Chained I/O			*/
		union STR *s_next;	/* Pointer to next in stack	*/
		int	s_type;		/* Type of input		*/
		int	s_eoff;		/* End of file flag		*/
		int	s_clnc;		/* Current line number		*/
		int	s_nlnc;		/* Last line number		*/
		int	s_argc;		/* Number of arguments		*/
		char	*s_argp[ARGSIZE];	/* Pointer to arguments	*/
		char	*s_abuf;	/* Arg buffer space		*/
		char	*s_bufp;	/* Pointer to buffer		*/
		char	*s_bufend;	/* End of buffer in core	*/
		union MAC *s_macp;	/* Next in chain list		*/
		int	s_disk;		/* Data is on disk		*/
		char	*s_sp;		/* Position in core		*/
		unsigned long s_seek;	/* Seek position		*/
		int	s_n;		/* Counter (count down)		*/
	} x4;
} STR;

/*
 * Global variables.
 */
extern	STR	*strp;			/* Input stack */

/* end of str.h */
@


1.3
log
@steve updated
@
text
@d39 1
@


1.2
log
@update prov by stevesf
@
text
@d7 1
a7 1
#define SREQS	0			/* Request */
d9 4
a12 4
#define SFILE	2			/* File I/O */
#define SCORE	3			/* Core I/O */
#define SCTEX	4			/* Chained text */
#define SCDIV	5			/* Chained diversion */
d14 1
a14 1
#define ARGSIZE	10			/* Maximum number of arguments */
d21 8
a28 8
		union STR *s_next;	/* Pointer to next in stack */
		int	s_type;		/* Type of input */
		int	s_eoff;		/* End of file flag */
		int	s_clnc;		/* Current line number */
		int	s_nlnc;		/* Last line number */
		int	s_argc;		/* Number of arguments */
		char	*s_argp[ARGSIZE];	/* Pointer to arguments */
		char	*s_abuf;	/* Arg buffer space */
d30 10
a39 10
	struct	x2 {			/* File I/O */
		union STR *s_next;	/* Pointer to next in stack */
		int	s_type;		/* Type of input */
		int	s_eoff;		/* End of file flag */
		int	s_clnc;		/* Current line number */
		int	s_nlnc;		/* Last line number */
		int	s_argc;		/* Number of arguments */
		char	*s_argp[ARGSIZE];	/* Pointer to arguments */
		char	*s_abuf;	/* Arg buffer space */
		FILE	*s_fp;		/* File pointer */
d41 11
a51 11
	struct	x3 {			/* Core I/O */
		union STR *s_next;	/* Pointer to next in stack */
		int	s_type;		/* Type of input */
		int	s_eoff;		/* End of file flag */
		int	s_clnc;		/* Current line number */
		int	s_nlnc;		/* Last line number */
		int	s_argc;		/* Number of arguments */
		char	*s_argp[ARGSIZE];	/* Pointer to arguments */
		char	*s_abuf;	/* Arg buffer space */
		char	*s_cp;		/* Pointer in core */
		char	*s_srel;	/* Released when unstacked */
d53 16
a68 16
	struct	x4 {			/* Chained I/O */
		union STR *s_next;	/* Pointer to next in stack */
		int	s_type;		/* Type of input */
		int	s_eoff;		/* End of file flag */
		int	s_clnc;		/* Current line number */
		int	s_nlnc;		/* Last line number */
		int	s_argc;		/* Number of arguments */
		char	*s_argp[ARGSIZE];	/* Pointer to arguments */
		char	*s_abuf;	/* Arg buffer space */
		char	*s_bufp;	/* Pointer to buffer */
		char	*s_bufend;	/* End of buffer in core */
		union MAC *s_macp;	/* Next in chain list */
		int	s_disk;		/* Data is on disk */
		char	*s_sp;		/* Position in core */
		unsigned long s_seek;	/* Seek position */
		int	s_n;		/* Counter (count down) */
@


1.1
log
@Initial revision
@
text
@d2 1
d4 1
a4 1
 * Input stack.
d6 1
d14 2
d19 3
a21 3
typedef union str {
	struct	{			/* Used for insertions from stdin */
		union str *s_next;	/* Pointer to next in stack */
d29 3
a31 3
	} str1;
	struct	{			/* File I/O */
		union str *s_next;	/* Pointer to next in stack */
d40 3
a42 3
	} str2;
	struct	{			/* Core I/O */
		union str *s_next;	/* Pointer to next in stack */
d52 3
a54 3
	} str3;
	struct	{			/* Chained I/O */
		union str *s_next;	/* Pointer to next in stack */
d64 1
a64 1
		union mac *s_macp;	/* Next in chain list */
d69 1
a69 1
	} str4;
d76 2
@
