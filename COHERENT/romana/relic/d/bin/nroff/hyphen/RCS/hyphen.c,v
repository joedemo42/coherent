head     1.1;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.1
date     91.02.04.16.46.37;  author bin;  state Exp;
branches ;
next	;


desc
@init ver prov by stevesf
@



1.1
log
@Initial revision
@
text
@/* (-lgl
 * 	The information contained herein is a trade secret of Mark Williams
 * 	Company, and  is confidential information.  It is provided  under a
 * 	license agreement,  and may be  copied or disclosed  only under the
 * 	terms of  that agreement.  Any  reproduction or disclosure  of this
 * 	material without the express written authorization of Mark Williams
 * 	Company or persuant to the license agreement is unlawful.
 * 
 * 	troff-nroff Version 002
 * 	Copyright (c) 1984-1986.
 * 	An unpublished work by Mark Williams Company, Chicago.
 * 	All rights reserved.
 -lgl) */
/*
 * A text formatter.
 * Hyphenation.
 */
#include <stdio.h>
#include "roff.h"
#include "code.h"
#include "hyphen.h"

/*
 * Try to hyphenate the word found in the word buffer.
 */
hyphen(cp1, cp2)
CODE *cp1, *cp2;
{
	int wi1, wi2;
	register int n;
	register char *hp;

	wi1 = 0;
	wi2 = l = cp2 - cp1;
	hp = hyphbuf;
	n = l;
	while (n--)
		*hp++ = 0;
	if (l < 4)
		return;
	if (prefix(cp1, hyphbuf, wi1, wi2, exctab, EXCSIZE) != 0)
		return;
	return;
	wi2 = suffix(cp1, hyphbuf, wi1, wi2, suftab, SUFSIZE);
	wi1 = prefix(cp1, hyphbuf, wi1, wi2, pretab, PRESIZE);
	if ((n=wi2-wi1) > HYPSIZE) {
		printe("Hyphenation buffer overflow");
		goto skip;
	}
skip:
	n = l;
	hyphbuf[0] = 0;
	hyphbuf[n-3] = 0;
	hyphbuf[n-2] = 0;
	hyphbuf[n-1] = 0;
	if (wi2-wi1 <= 2) {
		hyphbuf[wi1] = 0;
		hyphbuf[wi2-1] = 0;
	}
	n = wi2;
	if (--n>=0 && wbuf[n].c_code==CLE) {
		i = 3;
		while (n && i--)
			hyphbuf[n--] = 0;
	}
	n = wi2;
	if (n>=2 && wbuf[--n].c_code==CLD && wbuf[--n].c_code==CLE) {
		if (--n<1 || wbuf[n].c-code!=CLZ || wbuf[n-1].c_code!=CLI) {
			hyphbuf[n] = 0;
			if (--n >= 0)
				hyphbuf[n] = 0;
		}
	}
}

/*
 * Look for prefixes.
 */
prefix(wbuf, hbuf, wi1, wi2, tab, nel)
CODE *wbuf;
char *hbuf;
char *tab[];
{
	int ti, ti1, ti2, wi, c1, c2;
	register char *bp;

next:
	ti0 = -1;
	ti1 = 0;
	ti2 = nel;
	for (;;) {
		ti0 = ti;
		if ((ti=(ti1+ti2)/2) == ti0)
			goto fail;
		wi = wi1;
		bp = tab[ti];
		for (;;) {
			if (*bp == LEOK) {
				bp++;
				goto patn;
			}
			if (*bp == LHYP) {
				bp++;
				hbuf[wi-1] = 1;
			}
			if (wi >= wi2)
				goto fail;
			if ((c=wbuf[wi++].c_code) != (c2=*bp++)) {
				if (c1 > c2)
					ti1 = ti;
				else
					ti2 = ti;
			}
		}
	}
patn:
	for (;;) {
		switch (*bp++) {
		case LNUL:
			goto succ;
		case LHYP:
			hbuf[wi-1] = 1;
			continue;
		case LCON:
			wi0 = wi;
			continue;
		case LPPS:
			if (wi >= wi2)
				goto succ;
			c = wbuf[wi++].c_code;
			continue;
		case LPPF:
			if (wi >= wi2)
				goto fail;
			c = wbuf[wi++].c_code;
			continue;
		case LMMC:
			c = wbuf[--wi].c_code;
			continue;
		case LBRF:
			goto fail;
		case LBRS:
			goto succ;
		case LCBT:
			if ((n=*bp++) != c)
				continue;
			if (n == 0)
				goto fail;
			if (n == 1)
				goto succ;
			bp += n-1;
			continue;
		case LCBF:
			if ((n=*bp++) == c)
				continue;
			if (n == 0)
				goto fail;
			if (n == 1)
				goto succ;
			bp += n-1;
			continue;
		}
	}
succ:
	if (wi0 != NULL) {
		wi1 = wi0;
		goto next;
	}
	return (1);
fail:
	for (n=wi1; n<wi2; n++)
		hbuf[n] = 0;
	return (0);
}
@
