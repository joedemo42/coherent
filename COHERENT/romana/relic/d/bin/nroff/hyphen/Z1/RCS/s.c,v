head     1.1;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.1
date     91.02.04.16.48.06;  author bin;  state Exp;
branches ;
next	;


desc
@init ver prov by stevesf
@



1.1
log
@Initial revision
@
text
@/* (-lgl
 * 	The information contained herein is a trade secret of Mark Williams
 * 	Company, and  is confidential information.  It is provided  under a
 * 	license agreement,  and may be  copied or disclosed  only under the
 * 	terms of  that agreement.  Any  reproduction or disclosure  of this
 * 	material without the express written authorization of Mark Williams
 * 	Company or persuant to the license agreement is unlawful.
 * 
 * 	troff-nroff Version 002
 * 	Copyright (c) 1984-1986.
 * 	An unpublished work by Mark Williams Company, Chicago.
 * 	All rights reserved.
 -lgl) */
/*
 * A programme to create hyphenation tables.
 */
#include <stdio.h>
#include <ctype.h>
#include "char.h"
#define	 WORSIZE 200
#include "hyphen.h"

#define	MENT	400			/* Maximum number of entries */
#define LINSIZE	512			/* Size of line buffer */

/*
 * Structure of an entry.
 */
typedef	struct {
	int	e_lno;			/* Line number */
	char	*e_str;			/* String */
} ENT;

ENT	entt[MENT];			/* Table of entries */
int	nent;				/* Number of entries in table */
int	lno;				/* Line number for error messages */
char	*fil;				/* File name for error message */
char	linebuf[LINSIZE];		/* Line buffer */
int	tot;				/* Number of bytes of code generated */
FILE	*cfp;				/* Pointer to code file */
FILE	*hfp;				/* Pointer to Hyphen file */

main()
{
	extern int cmp1(), cmp2();
	register FILE *fp;
	register int c;

	setfile(NULL);
	setline(0);
	if ((hfp=fopen("hyptab.c", "w")) == NULL)
		printe("Cannot open hyptab.c");
	fprintf(hfp, "/*\n");
	fprintf(hfp, " * Nroff/Troff.\n");
	fprintf(hfp, " * Hyphenation tables.\n");
	fprintf(hfp, " */\n");
	fprintf(hfp, "#include <stdio.h>\n");
	fprintf(hfp, "#include \"roff.h\"\n");
	fprintf(hfp, "#include \"hyphen.h\"\n");
	if ((cfp=fopen("code", "w")) == NULL)
		printe("Cannot open code");
	tot = 0;
	fprintf(cfp, "\n");
	fprintf(cfp, "char hyptab[] ={");
	if ((fp=fopen("exccode", "r")) == NULL)
		printe("Cannot open exccode");
	setfile("exccode");
	collect(fp);
	qsort(entt, nent, sizeof(*entt), cmp1);
	code1("exctab");
	if ((fp=fopen("precode", "r")) == NULL)
		printe("Cannot open precode");
	setfile("precode");
	collect(fp);
	qsort(entt, nent, sizeof(*entt), cmp2);
	code2("pretab");
	if ((fp=fopen("sufcode", "r")) == NULL)
		printe("Cannot open sufcode");
	setfile("sufcode");
	collect(fp);
	qsort(entt, nent, sizeof(*entt), cmp2);
	code2("suftab");
	fprintf(cfp, "\n};\n");
	fclose(cfp);
	if ((cfp=fopen("code", "r")) == NULL)
		printe("Cannot open code");
	while ((c=getc(cfp)) != EOF)
		putc(c, hfp);
#if RSX
	fmkdl(cfp);
#else
	unlink("code");
#endif
	fclose(cfp);
}

/*
 * Collect the words and sort them.
 */
collect(fp)
FILE *fp;
{
	register int n;

	n = 0;
	setline(0);
	while (getl(linebuf, sizeof(linebuf), fp) != NULL) {
		incline();
		if (n > MENT)
			printe("Too many entries");
		entt[n].e_lno = lno;
		entt[n++].e_str = duplstr(linebuf);
	}
	nent = n;
}

/*
 * Read a line.
 */
getl(bufp, n, fp)
register int n;
FILE *fp;
{
	register int c;
	register char *bp;

	bp = bufp;
	--n;
	if ((c=getc(fp)) == EOF)
		return (NULL);
	while (c!=EOF && c!='\n') {
		if (--n == 0)
			printe("Line too long");
		*bp++ = c;
		c = getc(fp);
	}
	*bp = '\0';
	return (bufp);
}

/*
 * Given a string, return a pointer to a copy of it.
 */
duplstr(bp0)
register char *bp0;
{
	register char *bp1, *bp2;

	bp1 = bp0;
	while (*bp1++)
		;
	bp2 = (char *) malloc(bp1-bp0);
	bp1 = bp2;
	while (*bp1++=*bp0++)
		;
	return (bp2);
}

/*
 * Generate code.
 */
code1(np)
char *np;
{
	register int i, c;
	register char *cp;

	fprintf(hfp, "\n");
	fprintf(hfp, "char *%s[] ={\n", np);
	for (i=0; i<nent; i++) {
		putl();
		setline(entt[i].e_lno);
		cp = entt[i].e_str;
		while ((c=*cp++) != '\0') {
			if (c == '*')
				continue;
			if (c == '-') {
				putb(LHYP);
				continue;
			}
			if (isascii(c) && islower(c)) {
				putb(c-'a'+CLA);
				continue;
			}
			printe("Bad character");
		}
		putb(LEOK);
		putb(LNUL);
	}
	fprintf(hfp, "};\n");
}

/*
 * Generate code.
 */
code2(np)
char *np;
{
	char *brctab[10];
	int i, n;
	register int c;
	register char *bp, *cp;

	fprintf(hfp, "\n");
	fprintf(hfp, "char *%s[] ={\n", np);
	for (i=0; i<nent; i++) {
		putl();
		setline(entt[i].e_lno);
		cp = entt[i].e_str;
		while ((c=*cp++)!='\0' && c!='$') {
			if (c == '-') {
				putb(LHYP);
				continue;
			}
			if (isascii(c) && islower(c)) {
				putb(c-'a'+CLA);
				continue;
			}
			printe("Bad character %c", c);
		}
		putb(LEOK);
		if (c == '\0') {
			putb(LNUL);
			continue;
		}
		for (n=0; n<10; n++)
			brctab[n] = NULL;
		bp = linebuf;
		while ((c=*cp++) != '\0') {
			switch (c) {
			case '_':
				*bp++ = LOLD;
				continue;
			case '-':
				*bp++ = LHYP;
				continue;
			case '~':
				*bp++ = LRHP;
				continue;
			case '+':
				*bp++ = LCON;
				continue;
			case '!':
				*bp++ = LBRS;
				continue;
			case '.':
				*bp++ = LBRF;
				continue;
			case '?':
				*bp++ = LNEW;
				goto lab;
			case '>':
				*bp++ = LCBT;
				goto brc;
			case '<':
				*bp++ = LCBF;
			brc:
				if (!isascii(c=*cp++) || !islower(c))
					printe("Bad literal %c", c);
				*bp++ = c-'a' + CLA;
			lab:
				if ((c=*cp++) == '.') {
					*bp++ = 1;
					continue;
				}
				if (c == '!') {
					*bp++ = 2;
					continue;
				}
				if (isascii(c) && isdigit(c)) {
					if (brctab[c-='0'] != NULL)
						printe("Label %d mult def", c);
					brctab[c] = bp++;
					continue;
				}
				printe("Bad label %c", c);
			case ':':
				if (!isascii(c=*cp++) || !isdigit(c))
					printe("Bad label %c", c);
				if (brctab[c-='0'] == NULL)
					printe("Unused label %c", c);
				*brctab[c] = bp-brctab[c] + 2;
				brctab[c] = NULL;
				continue;
			default:
				printe("Bad character %c", c);
			}
		}
		*bp++ = LNUL;
		for (n=0; n<10; n++)
			if (brctab[n] != NULL)
				printe("Label %d undefined", n);
		cp = linebuf;
		while (cp < bp)
			putb(*cp++);
	}
	fprintf(hfp, "};\n");
}

/*
 * Compare two elements.
 */
cmp1(ep1, ep2)
ENT *ep1, *ep2;
{
	register int c;
	register char *cp1, *cp2;

	if (ep1 == ep2)
		return (0);
	cp1 = ep1->e_str;
	cp2 = ep2->e_str;
	for (;;) {
		while (*cp1=='-' || *cp1=='*')
			cp1++;
		while (*cp2=='-' || *cp2=='*')
			cp2++;
		if ((c=*cp1++) != *cp2++)
			break;
		if (c == '\0') {
			setline(ep1->e_lno);
			printe("Duplicate entry (line %d)", ep2->e_lno);
		}
	}
	if (c < *--cp2)
		return (-1);
	else
		return (1);
}

/*
 * Compare two elements.
 */
cmp2(ep1, ep2)
ENT *ep1, *ep2;
{
	register int c;
	register char *cp1, *cp2;

	if (ep1 == ep2)
		return (0);
	cp1 = ep1->e_str;
	cp2 = ep2->e_str;
	for (;;) {
		while (*cp1 == '-')
			cp1++;
		while (*cp2 == '-')
			cp2++;
		if ((c=*cp1++) != *cp2++)
			break;
		if (c=='$' || c=='\0')
			break;
	}
	if (c=='\0' || c=='$' || (c=*--cp2)=='\0' || c=='$') {
		setline(ep1->e_lno);
		printe("Duplicate entry (line %d)", ep2->e_lno);
	}
	if (*--cp1 < c)
		return (-1);
	else
		return (1);
}

/*
 * Generate code for an expression.
 */
/*
gen(str, n)
char *str[];
{
	char *nstr[MSTR];

	for (i=0; i<ALPSIZE; i++)
		alp[c].a_size = 0;
	for (i=0; i<n; i++) {
		cp = str[i];
		if ((c=*cp) == '-')
			c = *++cp;
		nstr[i] = cp;
		if (c != '\0')
			c -= 'a'-1;
		if (alp[c].a_size++ == 0) {
			m++;
			alp[c].a_indx = i;
		}
	}
	for (i=1; i<27; i++) {
		if (alp[i].a_size == 0)
			continue;
		indx = alp[i].a_indx;
		if (--m)
			l = brl(LBRN, nstr[indx][0]);
		else
			bru(LBFN);
		for (j=0; j<size; j++)
			nstr[indx+j]++;
		gen(&nstr[indx], size);
	}
	if ((size=alp[0].a_size) > 1) {
		printe("Duplicate entry");
		return;
	}
	if (size == 0)
		return;
	bru(LBSU);
}
*/

/*
 * Put out a label.
 */
putl()
{
	fprintf(hfp, "\thyptab");
	if (tot)
		fprintf(hfp, "+%d", tot);
	fprintf(hfp, ",\n");
}

/*
 * Put out a byte of code.
 */
putb(c)
{
	if (tot++%8 == 0)
		fprintf(cfp, "\n\t");
	fprintf(cfp, " 0%03o,", c);
}

/*
 * Set the file name for an error message.
 */
setfile(np)
{
	fil = np;
}

/*
 * Set the line number for an error message.
 */
setline(n)
{
	lno = n;
}

/*
 * Increment the current line number.
 */
incline()
{
	lno++;
}

/*
 * Print out an error message.
 */
printe(a1)
{
	if (fil != NULL)
		fprintf(stderr, "%s: ", fil);
	if (lno != 0)
		fprintf(stderr, "%d: ", lno);
	fprintf(stderr, "%r", &a1);
	fprintf(stderr, "\n");
	exit(1);
}
@
