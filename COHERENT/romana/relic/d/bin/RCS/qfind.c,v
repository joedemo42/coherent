head     1.6;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.6
date     94.02.25.14.04.19;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     92.10.12.08.42.10;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.08.17.14.05.02;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     91.04.22.20.07.28;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.21.14.56.28;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.03.12.20.15.29;  author bin;  state Exp;
branches ;
next     ;


desc
@init ver prov by stevesf for ver 311
@


1.6
log
@Fixed problem with 8-bit characters
@
text
@/*
 * qfind.c
 * 10/9/92
 * Find files with given name in filesystem using file database.
 * Usage: qfind [ -adp ] name ...
 * 	  qfind -b[v] [ -sname ] ...
 * Options:
 *	-a	All: search for files or directories (default: files only).
 *	-b	Build file database.
 *	-d	Search for directories only.
 *	-p	Partial name matching.
 *	-sname	Suppress name (and its subdirectories) when building database.
 *	-v	Verbose information.
 * Run as root when using -b to find everything.
 * Uses find, sed, sort.
 * Does not ignore SIG_INT, so "qfind -b&" aborts if <Ctrl-C> typed.
 */

#include <stdio.h>
#include <string.h>

extern	char	*malloc();
extern	char	*mktemp();
extern	char	*realloc();

#define	VERSION	"1.8"
#define	MINSEEK	512			/* binary search threshold */
#define	NBUF	512			/* buffer size		*/
#define	NCHARS	256			/* first characters	*/
#define	SED_D	"s/\\(.*\\)\\/\\(.*\\)/\\2\\/ \\1/"
#define	SED_F	"s/\\(.*\\)\\/\\(.*\\)/\\2 \\1/"
#define	QFFILES	"/usr/adm/qffiles"	/* database filename	*/
#define	QFNEW	"/usr/adm/qffiles.new"	/* new database filename */
#define	QFTMP	"/tmp/qfXXXXXX"		/* tmpname prototype	*/

/* Forward. */
int	build();
void	fatal();
void	fpseek();
void	nonfatal();
int	qfind();
int	qseek();
void	suppress();
void	sys();
void	usage();

/* Globals. */
int	aflag;				/* look for all		*/
int	bflag;				/* build QFFILES	*/
unsigned char	buf[NBUF];		/* command buffer	*/
int	dflag;				/* look for directories	*/
FILE	*ifp;				/* input FILE		*/
int	pflag;				/* partial match	*/
char	*sed_cmd = NULL;		/* sed command string	*/
long	seektab[NCHARS];		/* seek table		*/
int	sflag;				/* suppress		*/
char	tmpname[] = QFTMP;		/* temporary filename	*/
int	vflag;				/* verbose information	*/

main(argc, argv) int argc; char *argv[];
{
	register char *s;
	register int status;

	/* Process options. */
	while (argc > 1 && argv[1][0] == '-') {
		for (s = &argv[1][1]; *s; s++) {
			switch(*s) {
			case 'a':	++aflag;	break;
			case 'b':	++bflag;	break;
			case 'd':	++dflag;	break;
			case 'p':	++pflag;	break;
			case 's':
				++sflag;
				suppress(&argv[1][2]);
				s += strlen(s) - 1;
				break;
			case 'v':	++vflag;	break;
			case 'V':
				fprintf(stderr, "qfind: V%s\n", VERSION);
				break;
			case '?':
			default:	usage();
			}
		}
		--argc;
		++argv;
	}

	/* Arg sanity check. */
	if (bflag) {
		if (argc != 1)
			usage();
		if (aflag)
			nonfatal("-a option ignored with -b");
		if (dflag)
			nonfatal("-d option ignored with -b");
		if (pflag)
			nonfatal("-p option ignored with -b");
	} else {
		if (argc == 1)
			usage();
		if (vflag)
			nonfatal("-v option ignored without -b");
		if (sflag)
			nonfatal("-s option ignored without -b");
	}

	/* Build new database. */
	if (bflag)
		exit(build());

	/* Find given names in existing database. */
	if ((ifp = fopen(QFFILES, "r")) == NULL)
		fatal("cannot open \"%s\"", QFFILES);
	else if (fread(seektab, sizeof(seektab), 1, ifp) != 1)
		fatal("seek buffer read error");
	for (status = 0; *++argv != NULL; )
		status |= qfind(*argv);
	if (fclose(ifp) == EOF)
		fatal("cannot close \"%s\"", QFFILES);
	exit(status);
}

/*
 * Build the file and directory database.
 * The database consists of a seek pointer table
 * followed by a sorted list of files and directories.
 * seektab[c] gives the seek to the first line in the file starting with c.
 * The sorted list contains "file /dir1/dir2" for each file /dir1/dir2/file
 * and "dir3/ /dir1/dir2" for each directory /dir1/dir2/dir3.
 */
int
build()
{
	register FILE *fp;
	register int nfiles;
	int last;
	long lastseek;

	if (mktemp(tmpname) == NULL)
		fatal("cannot make temporary file name");

	/* Generate "file /dir1/dir2" for each file /dir1/dir2/file. */
	sys("find / ! -type d -print | sed -e '%s%s' >%s",
		(sed_cmd == NULL) ? "" : sed_cmd, SED_F, tmpname);

	/* Append "dir3/ /dir1/dir2" for each directory /dir1/dir2/dir3. */
	sys("find / -type d -print | sed -e '%s%s' >>%s",
		(sed_cmd == NULL) ? "" : sed_cmd, SED_D, tmpname);

	/* Create data file containing an empty seek table. */
	if ((fp = fopen(QFNEW, "w")) == NULL)
		fatal("cannot open \"%s\"", QFNEW);
	else if (fwrite(seektab, sizeof(seektab), 1, fp) != 1)
		fatal("write error on \"%s\"", QFNEW);
	else if (fclose(fp) == EOF)
		fatal("cannot close \"%s\"", QFNEW);

	/* Sort tempfile and append to new data file. */
	sys("sort %s >>%s", tmpname, QFNEW);
	if (unlink(tmpname) == -1)
		fatal("cannot unlink temp file");

	/* Initialize the seek table. */
	lastseek = (long)sizeof(seektab);
	last = -1;
	if ((fp = fopen(QFNEW, "rw")) == NULL)
		fatal("cannot open \"%s\"", QFNEW);
	fpseek(fp, lastseek, SEEK_SET);
	for (nfiles = 0; fgets(buf, sizeof(buf)-1, fp) != NULL; ++nfiles) {
		if (*buf != last) {
			last = *buf;
			seektab[last] = lastseek;
		}
		lastseek += (long)strlen(buf);
	}
	if (vflag)
		printf("%d files\n%ld bytes\n", nfiles, lastseek);

	/* Rewrite the seek table in the data file. */
	fpseek(fp, 0L, SEEK_SET);
	if (fwrite(seektab, sizeof(seektab), 1, fp) != 1)
		fatal("write error on \"%s\"", QFNEW);
	else if (fclose(fp) == EOF)
		fatal("cannot close \"%s\"", QFNEW);

	/* Remove old if it exists, rename new accordingly. */
	unlink(QFFILES);		/* may not exist */
	if (link(QFNEW, QFFILES) == -1)
		fatal("cannot link \"%s\" to \"%s\"", QFNEW, QFFILES);
	else if (unlink(QFNEW))
		fatal("cannot unlink \"%s\"", QFNEW);
	return 0;
}

/*
 * Cry and die.
 */
/* VARARGS */
void
fatal(s) char *s;
{
	fprintf(stderr, "qfind: %r\n", &s);
	unlink(tmpname);
	if (bflag)
		unlink(QFNEW);
	exit(1);
}

/*
 * Seek on fp, die on failure.
 */
void
fpseek(fp, where, how) FILE *fp; long where; int how;
{
	if (fseek(fp, where, how) == -1)
		fatal("seek failed");
}

/*
 * Cry but don't die.
 */
/* VARARGS */
void
nonfatal(s) char *s;
{
	fprintf(stderr, "qfind: %r\n", &s);
}

/*
 * Find s.
 */
int
qfind(s) char *s;
{
	register int val;
	register char *cp;
	int len, notfound, isdir;

	/* Seek to appropriate place in data file to begin linear search. */
	notfound = 1;
	if (!qseek(s)) {
		fprintf(stderr, "qfind: %s: not found\n", s);
		return notfound;
	}

	/* Read lines and look for matches. */
	len = strlen(s);
	while (fgets(buf, sizeof(buf)-1, ifp) != NULL) {

		if ((val = strncmp(buf, s, len)) < 0)
			continue;		/* not there yet */
		else if (val > 0)
			break;			/* past it */

		/* Possible match. */
		if ((cp = strchr(buf, ' ')) == NULL)
			fatal("strchr botch, buf=%s", buf);
		isdir = *(cp - 1) == '/';	/* iff buf contains dir name */
		if ((isdir && !dflag && !aflag)	/* directories not wanted */
		 || (!isdir && dflag))		/* files not wanted */
			continue;
		if (!pflag && (buf[len] != ((isdir) ? '/' : ' ')))
			continue;		/* not exact match */

		/* Match, print it out. */
		notfound = 0;
		buf[strlen(buf)-1] = '\0';	/* zap trailing newline */
		*cp++ = '\0';			/* NUL-terminate filename */
		printf("%s/%s\n", cp, buf);	/* print the match */
	}

	/* Return appropriate status. */
	if (notfound)
		fprintf(stderr, "qfind: %s: not found\n", s);
	return notfound;
}

/*
 * Seek in data file to someplace preceding the desired key.
 * Use binary search to get close, for efficiency.
 * Return 0 on failure.
 */
int
qseek(key) char *key;
{
	register int i, len;
	long new, min, max;

	i = *key;
	if ((min = seektab[i]) == 0L)		/* lower bound for search */
		return 0;		/* no entries with right first char */

	/* Binary search. */
	for (++i; i < NCHARS; ++i) {
		if (seektab[i] != 0L) {
			max = seektab[i];	/* upper bound for search */
			break;
		}
	}
	if (i == NCHARS) {
		fpseek(ifp, 0L, SEEK_END);
		max = ftell(ifp);
	}
	len = strlen(key);
	while (max - min > MINSEEK) {
		new = (min + max) / 2;
		fpseek(ifp, new, SEEK_SET);	/* seek to midpoint of range */
		while ((i = getc(ifp)) != EOF) {
			++new;
			if (i == '\n')
				break;		/* scan to next newline */
		}
		if (new >= max
		 || fgets(buf, sizeof(buf) - 1, ifp) == NULL)
			break;			/* should not happen */
		if ((i = strncmp(key, buf, len)) <= 0)
			max = new;
		else
			min = new;
	}

	fpseek(ifp, min, SEEK_SET);
	return 1;
}

/*
 * Suppress a directory.
 * This appends the sed delete command "/^name/d;" to sed_cmd.
 */
void
suppress(name) register char *name;
{
	register int len;
	register char *s;

	/* Allocate space for additional command in sed_cmd. */
	len = strlen(name) + 6;		/* for "/^name/d;" + NUL */
	for (s = name; *s != '\0'; s++)
		if (*s == '/')
			++len;		/* bump count for each slash in name */
	if (sed_cmd == NULL)
		s = sed_cmd = malloc(len);
	else {
		s = sed_cmd = realloc(sed_cmd, strlen(sed_cmd) + len);
		s += strlen(sed_cmd);
	}

	/* Append the sed delete command "/^name/d;" to the sed_cmd string. */
	*s++ = '/';
	*s++ = '^';
	while (*name != '\0') {
		if (*name == '/')
			*s++ = '\\';
		*s++ = *name++;
	}
	*s++ = '/';
	*s++ = 'd';
	*s++ = ';';
	*s = '\0';
}

/*
 * Execute a system command, die on failure.
 */
/* VARARGS */
void
sys(s) char *s;
{
	sprintf(buf, "%r", &s);
#if	DEBUG
	fprintf(stderr, "%s\n", buf);		/* for debugging */
#endif
	if (system(buf) != 0)
		fatal("command \"%s\" failed", buf);
}

/*
 * Print a usage message and die.
 */
void
usage()
{
	fprintf(stderr, 
		"Usage:\tqfind [ -adp ] name ...\n"
		"\tqfind -b[v] [ -sname ] ...\n"
		"Options:\n"
		"\t-a\tAll: search for files or directories (default: files only).\n"
		"\t-b\tBuild file database.\n"
		"\t-d\tSearch for directories only.\n"
		"\t-p\tPartial name matching.\n"
		"\t-sname\tSuppress name (and its subdirectories) when building database.\n"
		"\t-v\tVerbose information.\n"
		);
	exit(1);
}

/* end of qfind.c */
@


1.5
log
@steve: trivial changes for cef: changed find / ... to find /... -print
@
text
@d29 1
a29 1
#define	NCHARS	128			/* first characters	*/
d50 1
a50 1
char	buf[NBUF];			/* command buffer	*/
d193 1
a193 1
		fatal("cannoot unlink \"%s\"", QFNEW);
@


1.4
log
@stevesf: added a -s option to skip a named directory for people
who don't want to include directories such as news
@
text
@d3 1
a3 1
 * 8/12/92
d26 1
a26 1
#define	VERSION	"1.7"
d145 1
a145 1
	sys("find / ! -type d | sed -e '%s%s' >%s",
d149 1
a149 1
	sys("find / -type d | sed -e '%s%s' >>%s",
@


1.3
log
@update provided by stevesf
@
text
@d3 1
a3 1
 * 3/21/91
d6 1
a6 1
 * 	  qfind -b[v]
d8 1
a8 1
 *	-a	All: search for files or directories.
d12 1
d22 1
d24 1
d26 1
a26 2
#define	VERSION	"1.6"
#define	USAGE	"Usage:\tqfind [ -adp ] name ...\n\tqfind -b[v]\n"
d30 2
d40 1
d43 1
d54 1
d56 2
a57 1
char	*tmpname;			/* temporary filename	*/
d73 5
d82 1
a88 2
	if ((bflag && argc != 1) || (!bflag && argc == 1))
		usage();
d90 19
d141 1
a141 1
	if ((tmpname = mktemp(QFTMP)) == NULL)
d145 2
a146 2
	sys("find / ! -type d | sed -e 's/\\(.*\\)\\/\\(.*\\)/\\2 \\1/' >%s",
		tmpname);
d149 2
a150 2
	sys("find / -type d | sed -e 's/\\(.*\\)\\/\\(.*\\)/\\2\\/ \\1/' >>%s",
		tmpname);
d205 1
a205 2
	if (tmpname != NULL)
		unlink(tmpname);
d222 10
a294 1
#if	1
d323 1
a323 1
#endif
d329 36
d372 1
a372 1
#if	0
d385 11
a395 1
	fprintf(stderr, USAGE);
@


1.2
log
@updated after problems installing on hp
@
text
@d3 1
a3 1
 * 3/18/91
d15 1
a15 1
 * To fix: ordinary qfind does not work while qfind -b is running.
d23 1
a23 1
#define	VERSION	"1.5"
d29 1
d122 2
a123 2
	if ((fp = fopen(QFFILES, "w")) == NULL)
		fatal("cannot open \"%s\"", QFFILES);
d125 1
a125 1
		fatal("write error on \"%s\"", QFFILES);
d127 1
a127 1
		fatal("cannot close \"%s\"", QFFILES);
d130 1
a130 1
	sys("sort %s >>%s", tmpname, QFFILES);
d137 2
a138 2
	if ((fp = fopen(QFFILES, "rw")) == NULL)
		fatal("cannot open \"%s\"", QFFILES);
d153 1
a153 1
		fatal("write error on \"%s\"", QFFILES);
d155 8
a162 1
		fatal("cannot close \"%s\"", QFFILES);
d177 1
a177 1
		unlink(QFFILES);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * 3/1/91
d15 1
d23 1
a23 1
#define	VERSION	"1.3"
d25 1
d32 1
a32 1
void	build();
d34 1
d36 1
d42 1
a42 1
int	bflag;				/* build file database	*/
d78 2
a79 4
	if (bflag) {
		build();
		exit(0);
	}
d101 1
a101 1
void
d138 1
a138 2
	else if (fseek(fp, lastseek, SEEK_SET) == -1)
		fatal("fseek failed");
d150 2
a151 3
	if (fseek(fp, 0L, SEEK_SET) == -1)
		fatal("fseek failed");
	else if (fwrite(seektab, sizeof(seektab), 1, fp) != 1)
d155 1
d168 2
d174 10
d193 1
d195 1
a195 4
	len = strlen(s);

	/* Seek to start of lines with right first letter. */
	if (seektab[*s] == 0L) {
d198 1
a198 2
	} else if (fseek(ifp, seektab[*s], SEEK_SET) == -1)
		fatal("fseek failed");
d201 1
d233 49
@
