head     1.3;
access   ;
symbols  ;
locks    bin:1.3;
comment  @ * @;


1.3
date     90.10.05.16.02.51;  author bin;  state Exp;
branches ;
next	1.2;

1.2
date     90.10.05.16.01.24;  author bin;  state Exp;
branches ;
next	1.1;

1.1
date     90.10.05.16.00.33;  author bin;  state Exp;
branches ;
next	;


desc
@Initial MWC RCS revision.
@


1.3
log
@steve 10/4/90
Fixed password bug; nonnull passwords for users other than root failed.
Fixed gid bug, previously invisible because of preceding bug.
Cleaned up code slightly.
@
text
@/*
 * Rec'd from Lauren Weinstein, 7-16-84.
 * Substitute user-id temporarily or become super user (as you wish).
 * Compile -s -n -i.
 * Hacked by steve 10/4/90 to correct password bug and for clarity.
 */

#include <stdio.h>
#include <pwd.h>

extern	char *getenv();
extern	char *getpass();
extern	char *malloc();

#define ACCNAME "remacc"	/* Remote access password dummy username */
#define	DEFSHELL "/bin/sh"	/* Default shell pathname */
#define PASSLEN 13		/* Encrypted password length */

#define	bye()	fatal("Sorry")

/* Forward. */
extern	void	addenviron();
extern	void	fatal();
extern	void	getuname();

/* Globals. */
char	*defargs[] = { "su", NULL };
/* The following are all set by getuname(). */
short	gid;
char	*password;
char	salt[3];
short	uid;

main(argc, argv) int argc; char *argv[];
{
	register int ouid, ogid;
	char *command, *prompta, *promptb, *passp;
	char **args;

	getuname(argc>1 ? argv[1] : "0");	/* check username */
	if (password[0] != '\0' && getuid()) {	/* check password if not already su */
		passp = getpass("Password: ");	/* get input password choice */
		if ((strlen(password) != PASSLEN)
		 || (strcmp(crypt(passp, salt), password) != 0)) {
			ouid = uid;
			ogid = gid;
			getuname("0");		/* check root password too */ 
			if ((strlen(password) != PASSLEN)
			 || (strcmp(crypt(passp, salt), password) != 0))
				bye();		/* failure */
			uid = ouid;
			gid = ogid;
		}
	}

	if (argc > 2) {
		command = argv[2];
		args = &argv[2];
	} else {
		command = getenv("SHELL");
		if (command == NULL || strlen(command) < 1)
			command = DEFSHELL;
		args = defargs;
	}
	setgid(gid);
	setuid(uid);
	prompta = getenv("PSN");		/* check for normal prompt */
	promptb = getenv("PSS");		/* check for desired su prompt */
	addenviron(uid == 0 ? (promptb ? promptb : "# ")
			    : (prompta ? prompta : "$ "));
						/* change prompt as appropriate */
	execvp(command, args);
	fatal("%s: not found", command);
}

/*
 * Add string 's' to the environment as "PS1".
 */
void
addenviron(s) char *s;
{
	extern char **environ;
	register char **epp1, **epp2;
	register char **newenv;
	int n;
	char *prompt;
	static char prbuf[50];

	for (epp1 = environ; *epp1!=NULL; epp1++)
		;
	n = (epp1-environ+2) * sizeof (char *);
	if ((newenv = (char **)malloc(n)) == NULL)
		fatal("Out of memory for environments");
	prompt = prbuf;
	strcpy(prompt, "PS1=");
	strcat(prompt, s);
	for (epp1=environ, epp2=newenv; *epp1 != NULL; epp1++)
		if (strncmp(*epp1, "PS1=", 4) != 0)
			*epp2++ = *epp1;
		else {
			*epp2++ = prompt;
			prompt = NULL;
		}
	*epp2++ = prompt;
	*epp2 = NULL;
	environ = newenv;
}

void
fatal(s) char *s;
{
	fprintf(stderr, "%r\n", &s);
	exit(1);
}

/*
 * Get a user-name from string 's'.
 * If the string starts with a numeric, use it directly as a uid.
 * Set globals password, salt[], gid and uid with the user's password info.
 * Die if not found or illegal.
 */
void
getuname(s) register char *s;
{
	register struct passwd *pwp;

	if (*s >= '0' && *s <= '9') {
		uid = atoi(s);
		if ((pwp = getpwuid(uid)) == NULL)
			fatal("%d: bad user number", uid);
	} else if ((pwp = getpwnam(s)) == NULL)
		fatal("%s: not a user name", s);
	if (strcmp(pwp->pw_name, ACCNAME) == 0)	/* dummy access username? */
		bye();				/* yes, sorry */
	password = pwp->pw_passwd;
	salt[0] = pwp->pw_passwd[0];
	salt[1] = pwp->pw_passwd[1];
	salt[2] = '\0';
	gid = pwp->pw_gid;
	uid = pwp->pw_uid;
}

/* end of su.c */
@


1.2
log
@steve 10/4/90
Source previously called nsu.c.
Minor changes with getenv(SHELL).
@
text
@d3 3
a5 4
 * Substitute user-id temporarily
 * or become super user (as you wish).
 *
 * Compile -s -n -i
d11 3
a13 1
extern char *getenv();
d16 1
d19 10
a28 1
char	*getpass();
d30 1
a30 1
char	*password;		/* Set by getuname */
d32 1
a32 5
char	shell[] = "/bin/sh";
char	*shargs[] = {
	"su",
	NULL
};
d34 1
a34 5
char	prs[50] = "PS1=";
char	*prompt = prs;

main(argc, argv)
char *argv[];
d36 1
a36 2
	register int uid;
	register int count = 0;	
d40 14
a53 15
	if ((uid = getuname(argc>1 ? argv[1] : "0")) < 0) /* check username */
	   bye();  /* yep */
	if (password[0] != '\0' && getuid())   /* check password if not su */
	{  passp = getpass("Password: ");  /* get input password choice */
	   while (count++ < 2)
	   {  if (count > 0)
		 if (getuname("0") < 0)  /* check root password too */ 
		    bye();  /* failure */
	      if ((strlen(password) != PASSLEN) ||
	            (strcmp(crypt(passp, salt), password))) 
	      {  if (count > 0)  /* if we've tried both passwords */
	            bye();  /* failure */
	      }	
	      else break;  /* password ok */
	   }
d62 2
a63 2
			command = shell;
		args = shargs;
d67 5
a71 4
	prompta = getenv("PSN");  /* check for normal prompt */
	promptb = getenv("PSS");  /* check for desired su prompt */
	addenviron(uid == 0 ? (promptb ? promptb : "# ") :
	   (prompta ? prompta : "$ "));  /* change prompt as appropriate */
d73 1
a73 1
	printf("%s: not found\n", command);
d77 1
a77 6
 * Get a user-name from a string.
 * If the string starts with a numeric use 
 * directly as a number.
 * The string `password' is set with
 * the user's password for checking later.
 * Returns uid.
d79 2
a80 2
getuname(s)
register char *s;
a81 29
	register struct passwd *pwp;
	register short uid;

	if (*s>='0' && *s<='9') {
		uid = atoi(s);
		if ((pwp = getpwuid(uid)) == NULL) {
			fprintf(stderr, "%d: bad user number\n", uid);
			exit(1);
		}
	} else if ((pwp = getpwnam(s)) == NULL) {
		fprintf(stderr, "%s: not a user name\n", s);
		exit(1);
	}
	if (!strcmp(pwp->pw_name, ACCNAME))  /* dummy access username? */
	   return(-1);  /* yes */
	password = pwp->pw_passwd;
	salt[0] = pwp->pw_passwd[0];
	salt[1] = pwp->pw_passwd[1];
	salt[2] = '\0';
	gid = pwp->pw_gid;
	return (pwp->pw_uid);
}

/*
 * Add string `s' to the environment as "PS1".
 */
addenviron(s)
char *s;
{
d86 2
a87 1
	char *malloc();
d92 4
a95 4
	if ((newenv = (char **)malloc(n)) == NULL) {
		fprintf(stderr, "Out of memory for environments\n");
		exit(1);
	}
d109 4
a112 2
bye()
{	fprintf(stderr, "Sorry\n");
d116 28
@


1.1
log
@Initial revision
@
text
@d12 2
a17 1
char	*getenv();
d59 3
a61 1
		command = shell;
d122 1
a122 1
	n = (epp1-environ+1) * sizeof (char *);
@
