head     1.3;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.3
date     92.02.14.11.00.06;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     91.05.09.20.24.24;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     91.02.04.15.11.14;  author bin;  state Exp;
branches ;
next     ;


desc
@init ver. provided by stevesf.
@


1.3
log
@steve modified use of -a flag.
@
text
@/*
 * tee.c
 * 2/12/92
 * Pipe redirection.
 * Usage: tee [ -a ] [ -i ] [ file ] ...
 * Rec'd from Lauren Weinstein, 7-16-84.
 * Hacked by rec to use stdio so that everything doesn't come out buffered.
 * Slightly rewritten by steve 4/30/91 for clarity; added "isatty" check.
 */

#include	<stdio.h>
#include	<errno.h>
#include	<signal.h>

#define	NUFILE	_NFILE			/* max # open files */
#define	USAGE	"Usage: tee [ -a ] [ -i ] [ file ] ...\n"

/* External. */
extern	int	exit();

/* Forward. */
FILE	*openf();
void	fatal();

/* Global. */
int	aflag;

main(argc, argv) int argc; register char *argv[];
{
	register int c;
	register FILE **fpp;
	FILE *fp[NUFILE];

	if (signal(SIGINT, SIG_IGN) != SIG_IGN)
		signal(SIGINT, exit);

	/* Process option arguments. */
	while (*++argv && argv[0][0]=='-') {
		switch (argv[0][1]) {
		case 'a':
			++aflag;
			break;
		case 'i':
			signal(SIGINT, SIG_IGN);
			break;
		default:
			fprintf(stderr, USAGE);
			exit(1);
		}
	}

	/* Open file arguments. */
	for (fpp = fp; *argv; ) {
		if (fpp >= &fp[NUFILE])
			fatal("too many files");
		*fpp++ = openf(*argv++);
	}
	*fpp = NULL;

	/* Make i/o unbuffered if interactive. */
	if (isatty(fileno(stdin)))
		setbuf(stdout, NULL);
	if (isatty(fileno(stdout)))
		setbuf(stdin, NULL);

	/* Copy stdin to stdout, duplicate to each specified file. */
	while ((c = getchar()) != EOF) {
		putchar(c);
		for (fpp = fp; *fpp != NULL; fpp++) {
			if (aflag)
				fseek(*fpp, 0L, SEEK_END);
			putc(c, *fpp);
		}
	}

	/* Done. */
	exit(0);
}

/*
 * Cry and die.
 */
/* VARARGS */
void
fatal(s) char *s;
{	fprintf(stderr, "tee: %r\n", &s);
	exit(1);
}

/*
 * Open a file.
 */
FILE *
openf(file) char *file;
{
	register FILE *fp;

	if ((fp = fopen(file, (aflag) ? "a" : "w")) != NULL) {
		if (aflag) {
			setbuf(fp, NULL);
			fseek(fp, 0L, SEEK_END);
		}
		return fp;
	}
	switch (errno) {
	case EMFILE:
	case ENFILE:
		fatal("too many files");
		break;
	default:
		fatal("cannot create %s", file);
	}
}

/* end of tee.c */
@


1.2
log
@added an 'unbuffered' mode
@
text
@d3 1
a3 1
 * 4/30/91
d25 3
a32 1
	int aflag;
a37 1
	aflag = 0;
d56 1
a56 1
		*fpp++ = openf(*argv++, aflag);
d69 3
a71 1
		for (fpp = fp; *fpp != NULL; fpp++)
d73 1
d94 1
a94 1
openf(file, aflag) char *file; int aflag;
d99 2
a100 1
		if (aflag)
d102 1
@


1.1
log
@Initial revision
@
text
@a0 2


d2 4
d7 2
a8 3
 * tee -- pipe redirection
 *	hacked by rec to use stdio so that everything doesn't come
 *	out buffered.
d10 3
a13 2
#include	<errno.h>
#include	<stdio.h>
d15 2
d18 2
a19 1
#define	NUFILE	20			/* max # open files */
d21 3
d25 6
a30 4
int	aflag;				/* append to output files */
char	iobuf[BUFSIZ];
FILE	*openf();

a31 8
main( argc, argv)
register char	**argv;
{
	register int	c;
	register FILE	**fpp;
	FILE	*fp[NUFILE];
	extern int exit();

d34 4
a37 1
	while (*++argv && argv[0][0]=='-')
a38 3
		case 'i':
			signal( SIGINT, SIG_IGN);
			break;
d42 3
d46 1
a46 2
			fprintf(stderr,
			   "Usage: tee [ -a ] [ -i ] [ file ] ...\n");
d48 2
a49 1
			}
d51 2
a52 1
	for (fpp=fp; *argv; ) {
d54 2
a55 2
			fatal( "too many files");
		*fpp++ = openf( *argv++);
d59 7
d68 1
a68 1
		for (fpp=fp; *fpp!=NULL; fpp++)
d72 2
a73 1
	return (0);
d76 9
d86 3
d90 1
a90 2
openf( file)
char	*file;
d92 1
a92 2
	register FILE	*fp;
	extern		errno;
d94 4
a97 10
	if (aflag) {
		fp = fopen( file, "a");
		if (fp != NULL) {
			fseek(fp, 0L, 2);
			return (fp);
		}
	} else {
		fp = fopen( file, "w");
		if (fp != NULL)
			return (fp);
d102 1
a102 1
		fatal( "too many files");
d105 1
a105 1
		fatal( "can't create %s", file);
d109 1
a109 5

fatal( arg0)
{	fprintf( stderr, "tee: %r\n", &arg0);
	exit( 1);
}
@
