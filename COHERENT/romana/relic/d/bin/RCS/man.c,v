head     1.4;
access   ;
symbols  ;
locks    bin:1.4;
comment  @ * @;


1.4
date     91.02.21.20.46.28;  author bin;  state Exp;
branches ;
next	1.3;

1.3
date     90.11.02.17.49.53;  author steve;  state Exp;
branches ;
next	1.2;

1.2
date     90.11.02.17.47.58;  author steve;  state Exp;
branches ;
next	1.1;

1.1
date     90.11.02.17.46.30;  author steve;  state Exp;
branches ;
next	;


desc
@steve 11/2/90
Initial MWC RCS revision.
This corresponds to the COHERENT V300 /bin/man executable.
The source was previously called "maninx.c",
now is more rationally called "man.c".
@


1.4
log
@updated version provided by stevesf for v311
@
text
@/*
 * man.c
 * 10/31/90
 * Usage: man [ -w ] [ topic ... ]
 * Quick and dirty man hack.
 * Read manual index, print manual sections to screen via $PAGER.
 */

#include <stdio.h>
#include <string.h>

#define	BBBIGBUF	32000			/* index buffer size	*/
#define	DEFPAGER	"exec /bin/scat -1"	/* default $PAGER	*/
#define	MANHELP		"/usr/man/man.help"	/* manual help file	*/
#define	MANINX		"/usr/man/man.index"	/* manual index	file	*/
#define	NBUF		80			/* buf[] buffer size	*/
#define	NCMD		512			/* cmd[] buffer size	*/
#define	VERSION		"1.3"			/* version id		*/

extern	char	*getenv();

/* Globals. */
char	buf[NBUF];
char	cmd[NCMD];
char	*indexp;
char	manindex[BBBIGBUF];
int	wflag;

/* Forward. */
void	cmdcat();
void	fatal();
char	*lookup();
void	nonfatal();

main(argc, argv) int argc; char *argv[];
{
	int	i, fd, status, found, nfound;
	char	*cp;

	status = 0;

	/* Look for environmental $PAGER. */
	if ((cp = getenv("PAGER")) == NULL)
		cp = DEFPAGER;
	strcpy(cmd, cp);

	/* Parse option args. */		
	if (argc > 1 && strcmp(argv[1], "-w") == 0) {
		++wflag;
		--argc;
		++argv;
	}
	if (argc > 1 && strcmp(argv[1], "-V") == 0) {
		fprintf(stderr, "man: V%s\n", VERSION);
		--argc;
		++argv;
	}

	/* If no args, print manual help information. */
	if (argc == 1) {
		if (wflag)
			printf("%s\n", MANHELP);
		else {
			cmdcat(" ");
			cmdcat(MANHELP);
			system(cmd);
		}
		exit(status);
	}

	/* Args given.  First read the index. */
	if ((fd = open(MANINX, 0)) == -1)
		fatal("cannot open manual index %s, online manual probably not installed", MANINX);
	else if ((i = read(fd, manindex, BBBIGBUF)) == -1)
		fatal("cannot read index buffer");
	else if (i >= BBBIGBUF)
		fatal("index file too large");
	close(fd);
#if	DEBUG
	nonfatal("%s=%d bytes", MANHELP, i);
#endif]

	/* Look up each arg. */
	nfound = 0;
	for (i = 1; i < argc; i++) {
#if	DEBUG
		nonfatal("argv[%d]=%s", i, argv[i]);
#endif
		indexp = manindex;
		found = 0;

		/* Look up arg in index.  May find multiple hits. */
		while ((cp = lookup(argv[i])) != NULL) {
			found++;
			nfound++;
#if	DEBUG
			nonfatal("index line=%s", cp);
#endif
			if (wflag)
				printf("/usr/man/%s\n", cp);
			else {
				cmdcat(" ");
				cmdcat("/usr/man/");
				cmdcat(cp);
#if	DEBUG
				nonfatal("command=%s", cmd);
#endif
			}
		}
		if (found == 0) {
			nonfatal("%s not found in manual", argv[i]);
			status = 1;
		}
	}
	if (!wflag && nfound)
		system(cmd);
	exit(status);
}

/*
 * Concatenate given string to cmd buffer.
 * Complain if too long.
 */
void
cmdcat(s) register char *s;
{
	register int len;

	len = strlen(cmd);
	if (len + strlen(s) + 1 >= NCMD)
{printf("cmd=%s\ns=%s\nlen=%d\n", cmd, s, len);
		fatal("command buffer overflow");
}
	strcpy(&cmd[len], s);
}

/* Cry and die. */
void
fatal(s) char *s;
{
	fprintf(stderr, "man: %r\n", &s);
	exit(1);
}

/*
 * Look up string s in helpfile index starting at indexp.
 * Return name of file on match, else NULL.
 */
char *
lookup(s) char *s;
{
	register char *namep, *next;

	while ((next = strchr(indexp, '\n')) != NULL) {
		if (next - indexp + 1 >= NBUF)
			fatal("index buffer overflow");
		strncpy(buf, indexp, next - indexp);
		buf[next-indexp] = '\0';	/* index line to buf */
#if	DEBUG
		nonfatal("[%s]", buf);
#endif
		namep = strchr(buf, ' ');
		indexp = next + 1;		/* bump to next index line */
		if (namep == NULL)
			continue;
		else
			*namep++ = '\0';	/* NUL-terminate index entry */
#if	DEBUG
		nonfatal("buf=%s namep=%s", buf, namep);
#endif
		if (strcmp(namep, s) == 0)
			return buf;		/* gotcha */
	}
	return NULL;				/* no match */
}

void
nonfatal(s) char *s;
{
	fprintf(stderr, "man: %r\n", &s);
}
	
/* end of man.c */
@


1.3
log
@steve 11/2/90
At norm's request, modified to build a single $PAGER command and then
execute it, rather than executing multiple $PAGER commands for requests
which print multiple manual sections.  The previous version did not
work as desired on multiple manual sections with the usual $PAGER setting,
because it did not wait for user input at the end of a manual section.
This corresponds to the COHERENT V311 /bin/man executable.
@
text
@d73 1
a73 1
		fatal("cannot open manual index %s", MANINX);
@


1.2
log
@steve 11/2/90
Added code to use environmental variable $PAGER.
This source corresponds to the COHERENT V310 /bin/man executable.
@
text
@d2 2
a3 2
 * maninx.c
 * 10/15/90
d6 1
a6 1
 * Reads manual index, scats manual section.
d10 1
d12 7
a18 6
#define	BBBIGBUF	32000			/* manual index buffer */
#define	DEFPAGER	"exec /bin/scat -s"	/* default $PAGER */
#define	MANHELP		"/usr/man/man.help"	/* manual help file */
#define	MANINX		"/usr/man/man.index"	/* manual index */
#define	NBUF		80			/* other buffers */
#define	VERSION		"1.2"			/* version id */
a20 1
extern	char	*index();
d24 1
a24 1
char	cmd[NBUF];
a26 1
char	*pager;
d30 1
d37 2
a38 3
	int	i, fd, status;
	char	*lp;
	int	found;
d43 5
a47 3
	if ((pager = getenv("PAGER")) == NULL)
		pager = DEFPAGER;
		
a53 1

d58 2
a60 1
		/* No args: print manual help information. */
d64 2
a65 1
			sprintf(cmd, "%s %s", pager, MANHELP);
d71 1
a71 1
	/* Args given, look up each.  First read the index. */
d78 1
d83 2
a84 1
	/* Process each arg. */
d91 1
d93 1
a93 1
		while ((lp = lookup(argv[i])) != NULL) {
d95 1
d97 1
a97 1
			nonfatal("index line=%s", lp);
d100 1
a100 1
				printf("/usr/man/%s\n", lp);
d102 3
a104 1
				sprintf(cmd, "%s '/usr/man/%s'", pager, lp);
a107 1
				system(cmd);
d115 2
d120 17
d154 3
a156 1
	while ((next = index(indexp, '\n')) != NULL) {
d158 1
a158 1
		buf[next-indexp] = '\0';
d162 1
a162 1
		namep = index(buf, ' ');
d167 1
a167 1
			*namep++ = '\0';
d183 1
a183 1
/* end of maninx.c */
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * 5/2/90
d12 3
d16 1
a16 2
#define	MANHELP	"/usr/man/man.help"
#define	MANINX	"/usr/man/man.index"
d18 1
d26 1
d41 5
d50 7
a56 1
	}	
d62 1
a62 1
			sprintf(cmd, "scat %s", MANHELP);
d95 1
a95 1
				sprintf(cmd, "scat -s '/usr/man/%s'", lp);
@
