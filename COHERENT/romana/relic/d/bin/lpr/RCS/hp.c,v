head     1.3;
access   ;
symbols  ;
locks    bin:1.3;
comment  @ * @;


1.3
date     90.11.13.23.54.28;  author bin;  state Exp;
branches ;
next	1.2;

1.2
date     90.11.13.23.25.09;  author bin;  state Exp;
branches ;
next	1.1;

1.1
date     90.11.13.23.23.37;  author bin;  state Exp;
branches ;
next	;


desc
@steve 11/13/90
Initial MWC RCS revision.
This source is dated 7/2/85, and corresponds to the COHERENT V300 object.
@


1.3
log
@steve 11/13/90
Cleaned up source, rewriting and reordering text extensively.
Improved font change handling and various other problems.
@
text
@/*
 * hp.c
 * 11/13/90
 * Hewlett Packard LaserJet printer filter.
 * Translate page format and nroff font information
 * into HP LaserJet printer escape sequences (PCL).
 * Usage: hp [-acflr] [-in] [-pn] [-tn] [file ...]
 * Options:
 *	-a	Use HP font acute accent character for '\''; default is '\''.
 *	-c	Font cartridge not available, use underline for italics.
 *	-f	[Archaic] Print pages in normal order; this is now the default.
 *	-in	Set left margin (indent) to n; default is 0.
 *	-l	Print in landscape mode; default is portrait mode.
 *	-pn	Set text length to n; default is NLINES, i.e. 66.
 *	-r	Print pages in reverse order (for LaserJet I).
 *		[Writes to temp FILE 'output', then readback() rewrites
 *		temp file to stdout with pages reversed.]
 *	-tn	Set top margin to n; default is 0.
 * Exit status is 0 if successful, 1 if error, 2 if interrupted.
 *
 * Edit history:
 *	3/21/85	(jtk) -- Changed so that pages were printed in reverse order,
 *		and fixed bug where trailing lines with only
 *		non-blank character were deleted.
 *	4/09/85 (ella) -- Changed so that pages were printed in
 *		the landscape mode with the pitch 16.66, and 
 *		fixed bug where underlining in the landscape mode
 *		and/or !cartridge wasn't ever terminated.
 *		Incorporated rma's fix (-a option) to reflect the
 *		manual page and properly process acute accents:
 *		default: straight (apostrophe), with -a: slanted
 *		(single quote).
 *		Included all available options into Usage message.
 *	10/31/90 (norm) -- fixed the brain damage regarding
 *		formfeeds. Change default to printing pages in
 *		order since almost all printers do.  Close any
 *		files that we open. Guess that shows how much testing
 *		was done by the author...
 *	11/7/90	(steve) -- Reordered and rewrote text extensively
 *		for legibility, hopefully no substantive changes.
 */

#include <stdio.h>
#include <signal.h>

extern	long	ftell();

/* Miscellany. */
#define	VERSION		"1.3"
#define	ACCENTACUTE	0xA8
#define	ACCENTGRAVE	0xA9
#define	LINESZ		512
#define	NLINES		66
#define	NPAGES		1000
#define	USAGEMSG	"Usage: hp [ -acflr ] [ -in ] [ -pn ] [ -tn ] [ file ... ]"

/* Fonts. */
#define	ROMAN_F		0		/* all except below means Roman */
#define	BOLD_F		1		/* "x\bx" means bold 'x' */
#define	ITALIC_F	2		/* "_\bx" means italic '_' */

/* HP Printer Control Language (PCL) commands. */
/* These are printf() format strings, some require additional arguments. */
#define	HMOVEFWD	"\033&a+%dH"
#define	HMOVEBACK	"\033&a-%dH"
#define	LANDSCAPE	"\033&l%dO"	/* arg 0==portrait, 1==landscape */
#define	LEFTMARGIN	"\033&a%dL"
#define	LINESPACING	"\033&l%dD"
#define	MOVETOCOL	"\033&a%dC"
#define	PAGELENGTH	"\033&l%dP"
#define	PITCH16		"\033(s16.66H"	/* pitch 16.66 cpi */
#define	RESET		"\033E"
#define	STROKEWEIGHT	"\033(s%dB"
#define	STYLE		"\033(s%dS"
#define	STYLEWEIGHT	"\033(s%ds%dB"
#define	TEXTLENGTH	"\033&l%dF"
#define	TOPMARGIN	"\033&l%dE"
#define	UNDEROFF	"\033&d@@"
#define	UNDERON		"\033&dD"

/* Forward. */
#if	0
void	debug();
#endif
void	done();
void	fakebold();
void	fatal();
int	hasFF();
void	initialize();
void	newfont();
int	nonblank();
void	printfile();
void	printline();
void	readback();
void	trap();
void	usage();

/* Globals. */
int	aflag;			/* Accent flag				*/
char	*argv0;			/* Command name for error messages	*/
int	cartridge = 1;		/* Font cartridge is available		*/
int	font = ROMAN_F;		/* Current font				*/
int	landscape;		/* 0 for portrait mode, 1 for landscape	*/
int	leftmargin;		/* Left margin				*/
int	linespacing = 6;	/* Vertical lines per inch		*/
int	nfiles;			/* Number of files to print		*/
int	npages;			/* Number of pages marked on input	*/
FILE	*output = NULL;		/* FILE containing unreversed pages	*/
char	page[NLINES][LINESZ];	/* Current page buffer			*/
long	pageaddr[NPAGES];	/* Seek pointers to top of output pages	*/
int	quit;			/* Signal to interrupt program		*/
int	rflag;			/* Reverse page order			*/
char	tempfile[20];		/* Temporary file name			*/
int	textlength = NLINES;	/* Text length -- must satisfy		*/
				/*	textlength <= NLINES-topmargin	*/
int	topmargin;		/* Top margin				*/

main(argc, argv) int argc; char *argv[];
{
	/* Process arguments. */
	argv0 = argv[0];
	argc--;
	argv++;
	while (argc > 0)  {
		switch(**argv)  {
		case '-':
			switch(*++*argv)  {
			case 'a':
				aflag = 1;
				break;
			case 'c':
				cartridge = 0;
				break;
			case 'f':
				/* Recognized for historical reasons, ignore. */
				break;
			case 'i':
				leftmargin = atoi(++*argv);
				break;
			case 'l':
				landscape = 1;
				linespacing = 8;
				break;
			case 'p':
				textlength = atoi(++*argv);
				break;
			case 'r':
				rflag = 1;
				break;
			case 't':
				topmargin = atoi(++*argv);
				break;
			case 'V':
				fprintf(stderr, "%s: V%s\n", argv0, VERSION);
				break;
			default:
				usage();
				break;
			}
			break;
		default:
			if (nfiles++ == 0)
				initialize();
			printfile(*argv);
			break;
		}
		argv++;
		argc--;
	}

	/* If no command line files, process stdin. */
	if (nfiles == 0) {
		initialize();
		printfile(NULL);
	}

	/* Done. */
	if (rflag)
		readback();
	done(0);
}

#if	0
/*
 * Print debugging output to file "hp.db".
 */
/* VARARGS */
void
debug(s) char *s;
{
	register FILE *fp;

	if ((fp = fopen("hp.db", "ar")) == NULL)
		return;
	fprintf(fp, "hp: %r\n" &s);
	fclose(fp);
}
#endif

/*
 * Finish up.  Remove temporary file if it has been opened, then exit.
 */
void
done(status) int status;
{
	printf(RESET);
	if (output != NULL) {
		fclose(output);
		if (output != stdout)
			unlink(tempfile);
	}
	exit(status);
}

/*
 * Fake boldface of given character when font not available.
 */
void
fakebold(c) register int c;
{
	register int d;

	if (font != ROMAN_F)
		newfont(ROMAN_F);		/* terminate previous font */
	d = (landscape) ? 7 : 8;		/* decipoint distance */
	putc(c, output);			/* print it */
	fprintf(output, MOVETOCOL, -1);		/* move back one column */
	fprintf(output, HMOVEFWD, d);		/* and forward d decipoints */
	putc(c, output);			/* print it again */
	fprintf(output, HMOVEBACK, d);		/* and move back d decipoints */
}

/*
 * Print a fatal error message and die.
 */
/* VARARGS */
void
fatal(s) char *s;
{
	fprintf(stderr, "%s: %r\n", argv0, &s);
	done(1);
}

/*
 * Test whether string s contains a formfeed.
 */
int
hasFF(s) register char *s;
{
	register char c;

	while (c = *s++)
		if (c == '\f')
			return 1;
	return 0;
}

/*
 * Set interrupt trap and initialize the printer.
 * Open temporary file if rflag is specified,
 * otherwise output just goes to stdout.
 */
void
initialize()
{
	/* Trap SIGINT to set quit flag. */
	signal(SIGINT, trap);

	/* HP initialization. */
	printf(RESET);
	if (landscape)
		printf(PITCH16);
	printf(LANDSCAPE, landscape);
	printf(PAGELENGTH, NLINES);
	printf(LINESPACING, linespacing);
	printf(TOPMARGIN, topmargin);
	printf(TEXTLENGTH, textlength);
	printf(LEFTMARGIN, leftmargin);

	/* Initialize output file. */
	if (quit)
		done(2);
	if (rflag) {
		sprintf(tempfile, "/tmp/hptmp.%d", getpid());
		if ((output = fopen(tempfile, "wr")) == NULL)
			fatal("cannot open temporary file \"%s\"", tempfile);
	} else 
		output = stdout;
}

/* 
 * Change to a new font.
 * For each of the three fonts (ROMAN_F, BOLD_F, ITALIC_F),
 * this routine prints the font escape appropriate to the given configuration.
 * There are currently four possible printer configurations:
 *	normal	portrait  && cartridge
 *	-l	landscape && cartridge
 *	-c	portrait  && no cartridge
 *	-c -l	landscape && no cartridge
 * In the first case, do bold and italic with style and weight changes.
 * bold is faked from printline() per-character in the other cases,
 * italic is underlined Roman in the other cases.
 */
void
newfont(new) int new;
{
	static int style = 0;		/* initial style == upright */
	static int weight = 0;		/* initial weight == medium */
	static int under = 0;		/* initial underline state == off */
	register int newstyle, newweight, newunder;

	if (font == new)
		return;					/* unchanged */
	font = new;
	newstyle = newweight = newunder = 0;		/* defaults */
	switch(font) {
	case ROMAN_F:
		break;					/* upright medium */
	case BOLD_F:
		newweight = 1;				/* bold */
		break;
	case ITALIC_F:
		if (cartridge && !landscape) {
			newstyle = 1;			/* italic */
			newweight = -1;			/* weight -1 */
		} else
			newunder = 1;		/* underlined upright medium */
		break;
	default:
		fatal("unrecognized font type %d", font);
		break;
	}
	if (under != newunder) {
		under = newunder;
		fprintf(output, (under) ? UNDERON : UNDEROFF);
	}
	if (style != newstyle && weight != newweight) {
		style = newstyle;
		weight = newweight;
		fprintf(output, STYLEWEIGHT, style, weight);
	} else if (style != newstyle) {
		style = newstyle;
		fprintf(output, STYLE, style);
	} else if (weight != newweight) {
		weight = newweight;
		fprintf(output, STROKEWEIGHT, weight);
	}
}

/*
 * Return 1 if line s is not blank.
 */
int
nonblank(s) register char *s;
{
	register int c;

	while ((c = *s) == ' ' || c == '\t')
		s++;
	return (c != '\0' && c != '\n' && c != '\f');
}

/*
 * Print a file.
 * NULL means stdin.
 */
void
printfile(file) char *file;
{
	FILE *fp;
	register int i;
	int last, end;

	if (file == NULL)
		fp = stdin;
	else if ((fp = fopen(file, "r")) == NULL)
		fatal("cannot open file \"%s\"", file);

	if (font != ROMAN_F)
		newfont(ROMAN_F);
	for (end = 0; !end; ) {
		if (rflag) {
			if (npages >= NPAGES)
				fatal("more than %d pages", NPAGES);
			pageaddr[npages++] = ftell(output);
		}
		for (i = 0; i < NLINES; i++) {
			if (fgets(&page[i][0], LINESZ, fp) == NULL) {
				if (i == 0) {
					npages--;	/* last page empty */
					return;
				}
				end = 1;
				break;
			} else if (hasFF(page[i])) {	/* formfeed seen */
				++i;
				break;
			}
		}
		for (last = --i; last >= 0; --last)
			if (nonblank(page[last]))
				break;			/* nonblank line */
		for (i = 0; i <= last; i++)
			printline(page[i]);
		putc('\r', output);
		if (last < NLINES - 1)
			putc('\f', output);
	}
	if (file != NULL)
		fclose(fp);
}

/*
 * Print one line, substituting special characters from the HP character set.
 */
void
printline(cp) register char *cp;
{
	register int c1, c2, new;
	char *s;

	/* Replace accents with equivalents from the extended character set. */
	for (s = cp; *s != '\0'; ++s) {
		if (*s == '\'' && aflag)
			*s = ACCENTACUTE;
		else if (*s == '`')
			*s = ACCENTGRAVE;
	}

	/* Look for nroff font sequences. */
	while ((c1 = *cp++) != '\0') {

		/* Check for the interrupt signal. */
		if (quit)
			done(2);

		/* By default, Roman c1 gets printed at the end of this loop. */
		new = ROMAN_F;
		if (c1 == '\f')
			return;		/* chars after FF on line get eaten */
		else if (c1 == '_') {
			if ((c2 = *cp++) == '\b') {
				/* "_\bx" means italic x. */
				new = ITALIC_F;
				c1 = *cp++;
			} else
				cp--;		/* put back c2 */
		} else if ((c2 = *cp++) == '\b') {
			if ((c2 = *cp++) == c1) {
				/* "x\bx" means bold x. */
				if (!cartridge || landscape) {
					fakebold(c1);	/* fake it */
					continue;
				} else
					new = BOLD_F;
			} else
				cp -= 2;	/* put back '\b' and c2 */
		} else
			cp--;			/* put back c2 */
		if (font != new)
			newfont(new);		/* font change */
		putc(c1, output);		/* print c1 in new font */
	}
}

/*
 * Copy the temporary file to stdout with the pages in reverse order.
 */
void
readback()
{
	char c;

	while (--npages >= 0) {
		/* Check for interrupt signal at each page. */
		if (quit)
			done(2);
		fseek(output, pageaddr[npages], 0);
		while ((c = getc(output)) != '\f')
			putchar(c);
		putchar(c);
	}
}

/*
 * Set quit flag when interrupt signal is received.
 */
void
trap()
{
	quit = 1;
}

/*
 * Print a usage message and die.
 */
void
usage()
{
	fprintf(stderr, "%s\n", USAGEMSG);
	exit(1);
}

/* end of hp.c */
@


1.2
log
@steve 11/13/90
Source changes from norm to change default printing to normal page
order, add "-r" (reverse page order) option and change usage accordingly,
close files when done with them, and process formfeeds correctly within
files.
@
text
@a0 6
#include <stdio.h>
#include <ctype.h>
#include <sgtty.h>
#include <errno.h>
#include <signal.h>

d2 18
a19 2
 *	HP --
 *	filter for the Hewlett Packard printer.
d21 20
a40 26
 *		This program translates nroff font specifications into the 
 *	correct escape sequences for the HP Laser printer.
 *	It also allows the user to set indentation, page length, landscape
 *	mode, et cetera. Because the HP LJ I printer stacks pages in the reverse
 *	order as they come out of the printer, this filter puts them out in the
 *	reverse order, unless the -f (forward) flag is set.
 *
 *	History:
 *		3/21/85	(jtk) -- Changed so that pages were printed in the
 *			order, and fixed bug where trailing lines with only
 *			non-blank character were deleted.
 *		4/09/85 (ella) -- Changed so that pages were printed in
 *			the landscape mode with the pitch 16.66, and 
 *			fixed bug where underlining in the landscape mode
 *			and/or !cartin wasn't ever terminated.
 *			Incorporated rma's fix (-a option) to reflect the
 *			manual page and properly process accentgrav:
 *			default: straight (apostrophe), with -a: slanted
 *			(single quote).
 *			Included all available options into Usage message.
 *		10/31/90 (norm) -- fixed the brain damage regardling landscape
 *			mode as well as this command not correctly recognizing
 *			formfeeds. We also now default to printing pages in
 *			order since almost all printers do. We now close any
 *			files that we open. Guess that shows how much testing
 *			was done by the author ;-)
d43 36
a78 10
#define ROMAN_F		0
#define BOLD_F		1
#define ITALIC_F	2
#define LINESZ		512
#define	MAXPAGE		1000
#define PRIMARY		"\033(s0T"
#define PITCH		"\033(s16.66H"
#define LANDSCAPE	"\033&l%dO"
#define INDENT		"\033&a%dL"
#define UNDEROFF	"\033&d@@"
a79 13
#define STROKEWEIGHT	"\033(s%dB"
#define ADVANCE		"\033&a+%dC"
#define RESET		"\033E"
#define SETLINES	"\033&l%dP"
#define TEXTLENGTH	"\033&l%dF"
#define	TOPMARGIN	"\033&l%dE"
#define BACKSPACE	'\010'
#define FORMFEED	'\014'
#define ACCENTACUT	0xA9
#define ILINES		"\033&l%dD"
#define ITALIC		"\033(s1s-1B"
#define BIGBOLD		"\033(s0s1B"
#define REGULAR		"\033(s0s0B"
d81 16
a96 23
FILE *pfp;			/* The printer device */
char pdev[64] = "/dev/hp";	/* Default printer device */
char *umess = "Usage: hp [-a] [-c] [-r] [-l] [-imarg] [-ttop] [-plines] file ...\n";
char *argv0;
char accentgrav = '\'';
int  quit = 0;			/* Signal to interrupt program. */
int curfont = ROMAN_F;
int ilines = 6;			/* Lines per inch */
int pitch = 0;			/* primary pitch 10 */
int nlines = 66;		/* Lines per page */
int indent = 0;			/* Left margin */
int land = 0;			/* 0 for portrait mode, 1 for landscape */
int cartin = 1;			/* 1 if font cartridge available */
int nreverse = 1;		/* No reverse, pages printed in order. */
int tlength = 66;		/* Text length -- must satisfy */
				/* tlength <= nlines - topmarg */
int topmarg = 0;		/* Top margin */
int nfiles = 0;			/* Number of files to print */
char page[66][LINESZ];		/* Current page buffer */
long pageaddr[MAXPAGE];
int pgcount = 0;		/* Number of pages marked on input */
FILE *output = NULL;		/* File containing pages in unreversed order */
char tempfile[20];		/* Name of temporary file. */
d98 21
a118 2
main(argc, argv)
char **argv;
d120 1
a120 3
	register char **files;
	FILE *setup();

d122 2
a123 2
	argv++; argc--;
	*files = NULL;
d126 12
a137 46
			case '-':
				switch(*++*argv)  {
					case 'r':
						nreverse = 0;
						argv++;
						argc--;
						break;
					case 'f':		/* ignore */
						argv++;
						argc--;
						break;
					case 'l':
						land = 1;
						pitch = 1;
						ilines = 8;
						argv++;
						argc--;
						break;
					case 'i':
						indent = atoi(++*argv);
						argv++;
						argc--;
						break;
					case 'p':
						tlength = atoi(++*argv);
						argv++;
						argc--;
						break;
					case 't':
						topmarg = atoi(++*argv);
						argv++;
						argc--;
						break;
					case 'c':
						cartin = !cartin;
						pitch = 0;
						argv++;
						argc--;
						break;
					case 'a':
						accentgrav = 0xA8;
						argv++;
						argc--;
						break;
					default:
						usage();
d138 1
a138 1
				}
d140 16
d157 9
a165 9
				if (nfiles == 0) {
					output = setup(output);
					if (nreverse)
						init();
				}
				printfile(*argv);
				nfiles++;
				argv++;
				argc--;
d167 2
d170 2
d173 1
a173 3
		output = setup(output);
		if (nreverse)
			init();
d176 5
a180 4
	if (!nreverse)
		readbkwd(output);
	printf(RESET);
	wrapup(0);
d183 1
d185 1
a185 4
 * Open temporary file unless nreverse is specified, in which case
 * output is set to stdout.
 * Set interrupt trap.
 *
d187 5
d193 4
a196 18
FILE *
setup(fp)
FILE	*fp;
{
	int   trap();

	signal(SIGINT, trap);
	if (fp == NULL)
		if (nreverse)
			return(stdout);
		else {
			sprintf(tempfile, "/tmp/hptmp.%d", getpid());
			if ((fp = fopen(tempfile, "wr")) == NULL)
				fatal("Cannot open temporary file %s",
					 tempfile);
			return(fp);
		}
	return (fp);
d198 1
d201 1
a201 2
 * Set quit flag when interrupt signal is sent.
 *
d203 11
d215 5
a219 1
trap()
d221 10
a230 1
	quit = 1;
d234 1
a234 3
 * Send character sequences to printer to initialize it for another file.
 * Check for interrupt.
 *
d236 3
a238 2

init()
d240 2
a241 14
	if (quit)
		wrapup(0);
	printf(RESET);
	if (pitch == 1)
		printf(PITCH, pitch);
	printf(LANDSCAPE, land);
	printf(SETLINES, nlines);
	printf(ILINES, ilines);
	printf(TOPMARGIN, topmarg);
	printf(TEXTLENGTH, tlength);
	printf(INDENT, indent);
	if (quit) {
		wrapup(0);
	}
d244 3
d248 1
a248 2
hasFF(cp)
register char *cp;
d252 1
a252 1
	while (c = *cp++)
d258 7
a264 2
printfile(file)
char *file;
d266 2
a267 6
	FILE *fp;
	register int i;
	int lnbl;		/* Last non-blank line */
	char *skipws();
	int end = 0;
	int c;
d269 10
a278 7
	if (file == NULL)
		if (nfiles == 0)
			fp = stdin;
		else
			return;
	else if ((fp = fopen(file, "r")) == NULL)
		fatal("cannot open %s\n", file);
d280 9
a288 27
	while (!end) {
		markpage(output);
		for (i = 0; i < nlines; i++)  
			if (fgets(&page[i][0], LINESZ, fp) == NULL) {
				end = 1;
				/* If last page is blank, decrement pgcount */
				if (i == 0) {
					pgcount--;
					return;
				}
				break;
			} else if (hasFF(page[i]))
				break;
		for (lnbl = --i; lnbl > 0; --i)
			if ((c = *skipws(page[i])) == '\0' || c == '\n')
				lnbl--;
			else
				break;
		for (i = 0; i <= lnbl; i++)
			printline(page[i]);
		fprintf(output, "%c", '\r');
		fprintf(output, "%c", FORMFEED);
		if (end)
			break;
	}
	if (fp != stdin)
		fclose(fp);
d291 12
a302 5
/*
 * Mark the top of pages in output.
 * Read current disk address, save it in pageaddr, and increment pgcount.
 * There is only space in array to save MAXPAGE number of addresses.
 *
d304 7
d312 36
a347 6
markpage(fp)
FILE	*fp;
{
	if (pgcount >= MAXPAGE)
		fatal("More than %d pages read in.\n", MAXPAGE);
	pageaddr[pgcount++] = ftell(fp);
d351 1
a351 2
 * Skip white space, ie spaces and tabs.
 *
d353 2
a354 4

char *
skipws(s)
char *s;
d359 2
a360 2
		s++;	/* Increment s if c is white space. */
	return (s);
d364 2
a365 3
 * Print one line of input file, substituting special characters with the hp
 * character set.
 *
d367 2
a368 2
printline(cp)
char *cp;
d370 3
a372 2
	register int c1, c2;
	char *cp_x;
d374 4
a377 1
	cp_x = cp;
d379 19
a397 24
	/*
	 *	pass over line replacing
	 *	all accent marks found with there
	 *	equivalents from the extended char-set
	 */

	while (*cp_x != '\0') {
		if(*cp_x == '\'')
			*cp_x = accentgrav;
		else if (*cp_x == '`')
			*cp_x = ACCENTACUT;
		cp_x++;
	}
	while ((c1 = *cp++) != '\0') {
		if (c1 == '\f')			/* new page */
			return 1;
		if (c1 == '_')
			if ((c2 = *cp++) == BACKSPACE) {
				font(ITALIC_F);
				putc(*cp++, output);
				continue;
			} else {
				putc(c1, output);
				cp--;
a398 19
		else if ((c2 = *cp++) == BACKSPACE) {
			if ((c2 = *cp++) == c1) {
				/* Change an overstrike to a true bold face
				 * character. */
				if (!cartin || land)
					boldprint(c2);
				else {
					font(BOLD_F);
					putc(c2, output);
				}
				continue;
			} else {
				putc(BACKSPACE, output);
				cp--;
			}
		} else {
			font(ROMAN_F);
			putc(c1, output);
			cp--;
d400 8
a407 3
		/* Check for the interrupt signal after each character. */
		if (quit)
			wrapup(0);
d409 2
a410 1
	return 0;
d413 2
a414 3
/* 
 * Change the current font to the specified type.
 *
d416 5
d422 7
a428 22
font(type)
int type;
{
	if (curfont != type)
		switch(type)  {
			case ITALIC_F:
				if (cartin && !land)
				{
					fprintf(output, ITALIC);
					curfont = ITALIC_F;
				} else {
					fprintf(output, STROKEWEIGHT, 0);
					fprintf(output, UNDERON);
					curfont = ITALIC_F;
				}
				break;
			case BOLD_F:
				fprintf(output, UNDEROFF);
				fprintf(output, STROKEWEIGHT, 4);

				if (cartin)
					fprintf(output, BIGBOLD);
d430 2
a431 15
				curfont = BOLD_F;
				break;
			case ROMAN_F:
				if (cartin) {
					fprintf(output, REGULAR);
					if (land) 
						fprintf(output, UNDEROFF);
				}
				else {
					fprintf(output, STROKEWEIGHT, 0);
					fprintf(output, UNDEROFF);
				}
				curfont = ROMAN_F;
		}
}
d433 3
a435 4
/*
 * Print given character in boldface.
 *
 */
d437 26
a462 14
boldprint(c)
int c;
{
	putc(c, output);
	fprintf(output, "\033&a-1C");
	if (land)
	{
		fprintf(output, "\033&a+7H");	/* In landscape mode */
		putc(c, output);
		fprintf(output, "\033&a-7H");
	} else {
		fprintf(output, "\033&a+8H");	/* In portrait mode */
		putc(c, output);
		fprintf(output, "\033&a-8H");
a465 27
fatal(s)
char *s;
{
	fprintf(stderr, "%s: ", argv0);
	fprintf(stderr, "%r", &s);
	wrapup(1);
}

usage()
{
	fprintf(stderr, umess);
	exit(1);
}

debug (str)
char *str;
{
	FILE *fp;

	if ((fp = fopen("hp.db", "ar")) == NULL)
		return;
	fprintf(fp, "hp: ");
	fprintf(fp, "%r", &str);
	fclose (fp);
	return;
}

d467 1
a467 4
 * Read the temporary file to stdout with the pages in reverse order.
 * Starting with the last address in pageaddr, seek to that address, read a
 * page, and then do the same with the previous address.
 *
d469 2
a470 3

readbkwd(input)
FILE	*input;
d474 7
a480 11
	if (quit)
		wrapup(0);
	init();
	while (--pgcount >= 0) {
		fseek(input, pageaddr[pgcount], 0);
		while ((c = getc(input)) != '\f')
			/* after each character, check for interrupt signal. */
			if (quit)
				wrapup(0);
			else
				putchar(c);
d486 1
a486 2
 * Get rid of temporary file if it has been opened, and exit.
 *
d488 5
d494 5
a498 2
wrapup(status)
int	status;
d500 2
a501 4
	fclose(output);
	if ((output != stdout) && (output != NULL))
		unlink(tempfile);
	exit(status);
d504 1
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
 *	filter for the hewlet packhard printer.
d12 1
a12 1
 *	correct escape sequences for the Hewlet Packhard Laser printer.
d14 1
a14 1
 *	mode, et cetera. Because the HP printer stacks pages in the reverse
d31 6
a36 1
 *
d66 1
a66 1
char *umess = "Usage: hp [-a] [-c] [-f] [-l] [-imarg] [-ttop] [-plines] file ...\n";
d77 1
a77 1
int nreverse = 0;		/* No reverse, pages printed in order. */
d101 2
a102 2
					case 'f':
						nreverse = 1;
d106 4
a113 1

d195 1
d232 12
d262 1
a262 1
	while (end != 1) {
d264 1
a264 1
		for (i=0; i<nlines; i++)  
d273 2
a274 1
			}
d287 2
a326 1

d341 1
a341 2
	while(*cp_x != '\0')
	{
d348 3
a350 1
	while((c1 = *cp++) != '\0') {
d384 1
@
