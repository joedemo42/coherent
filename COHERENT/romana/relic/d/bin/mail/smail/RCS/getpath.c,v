head     1.3;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.3
date     92.01.10.17.08.05;  author piggy;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.28.13.30.41;  author piggy;  state Exp;
branches ;
next     1.1;

1.1
date     91.03.28.13.29.44;  author piggy;  state Exp;
branches ;
next     ;


desc
@Derive a path to the target host using the paths database.
@


1.3
log
@Changed to a more intelligent line parser.  The paths file is
now much more robust.
@
text
@#ifndef lint
static char 	*sccsid="@@(#)getpath.c	2.5 (smail) 9/15/87";
#endif

# include	<stdio.h>
# include	<sys/types.h>
# include	<ctype.h>
# include	"defs.h"

extern enum edebug debug;	/* how verbose we are 		*/ 
extern char *pathfile;		/* location of path database	*/

/*
**
** getpath(): look up key in ascii sorted path database.
**
*/

getpath( key, path , cost)
char *key;		/* what we are looking for */
char *path;		/* where the path results go */
int *cost;		/* where the cost results go */
{
	char *getline();

	int lineno;
	char	*next_line,	/* Next line read by getline().  */
		*line_key,	/* Key extracted by strtok() from next_line.  */
		*line_cost;	/* Cost extracted by strtok() from next_line.  */
	FILE *file;

DEBUG("getpath: looking for '%s'\n", key);

	lineno = 0;

	if((file = fopen(pathfile, "r")) == NULL) {
		(void) printf("can't access %s.\n", pathfile);
		return( EX_OSFILE );
	}

	/* Linear search for key "path" in file stream "file".  */

	while (NULL != (next_line = getline(file, &lineno))) {
		line_key = strtok(next_line, WS);

		/*
		 * If we have a match, copy the path; copy the
		 * cost if there is one.
		 */
		if (strcmpic(key, line_key) == 0) {
			strcpy(path, strtok(NULL, WS));

			if (NULL != (line_cost = strtok(NULL, WS)) ) {
				*cost = atoi(line_cost);
			} else {
				*cost = DEFCOST;
			}
			break;
		}
	}

	if (NULL == next_line) {
		fclose(file);
		return(EX_NOHOST);
	}

	fclose(file);
	return (EX_OK);
}
@


1.2
log
@Changed from binary to linear search.
There was a bug in the binary search so that it failed for
one line paths files.
@
text
@d24 1
a24 3
	register char *s;
	int c;
	static FILE *file;
d26 6
d34 2
a41 1
	fseek(file, 0L, 0); /* Rewind the file pointer "file".  */
d43 14
a56 8
	for (c = getc(file); c != EOF; c = getc(file)) {
		s = key;
		while (lower(c) == lower(*s) ){
			/* NB: lower is a macro which evals its arg twice!  */
			s++;
			if((c = getc(file)) == EOF) {
				fclose(file);
				return(EX_NOHOST);
d58 3
a60 1
		} /* while (lower(c) == lower(*s++)) */
d62 1
a62 13
		if (*s == '\0') {
			if ((c == '\t') || (c == ' ')){
				break;
			} /* if found seperator character */
		} /* if key hit end of string */

		while ((c != '\n') && (c != EOF)){
			c = getc(file);	
		} /* while not at next line or EOF */
	} /* for (read characters until EOF) */

	/* Did we get a match or hit EOF?  */
	if ( c == EOF ) {
a66 17
	while(((c = getc(file)) != EOF) && (c != '\t') && (c != '\n')) {
		*path++ = c;
	}
	*path = '\0';
/*
** See if the next field on the line is numeric.
** If so, use it as the cost for the route.
*/
	if(c == '\t') {
		int tcost = -1;
		while(((c = getc(file)) != EOF) && isdigit(c)) {
			if(tcost < 0) tcost = 0;
			tcost *= 10;
			tcost += c - '0';
		}
		if(tcost >= 0) *cost = tcost;
	}
@


1.1
log
@Initial revision
@
text
@a23 2
	long pos, middle, hi, lo;
	static long pathlength = 0;
a26 1
	int flag;
d30 3
a30 8
	if(pathlength == 0) {	/* open file on first use */
		if((file = fopen(pathfile, "r")) == NULL) {
			(void) printf("can't access %s.\n", pathfile);
			pathlength = -1;
		} else {
			(void) fseek(file, 0L, 2);	/* find length */
			pathlength = ftell(file);
		}
a33 2
	if( pathlength == -1 )
		return( EX_OSFILE );
d35 8
a35 21
	lo = 0;
	hi = pathlength;
	(void) strcpy( path, key );
	(void) strcat( path, "\t" );
/*
** "Binary search routines are never written right the first time around."
** - Robert G. Sheldon.
*/
	for( ;; ) {
		pos = middle = ( hi+lo+1 )/2;
		(void) fseek(file, pos, 0);	/* find midpoint */
		if(pos != 0)
			while(((c = getc(file)) != EOF) && (c != '\n'))
				;	/* go to beginning of next line */
		if(c == EOF) {
			return(EX_NOHOST);
		}
		for( flag = 0, s = path; flag == 0; s++ ) { /* match??? */
			if( *s == '\0' ) {
				goto solved;
			}
d44 1
d47 17
a47 10
			flag = lower(c) - lower(*s);
		} 
		if(lo >= middle) {		/* failure? */
			return(EX_NOHOST);
		}
		if((c != EOF) && (flag < 0)) {	/* close window */
			lo = middle;
		} else {
			hi = middle - 1;
		}
d65 2
a65 5
/* 
** Now just copy the result.
*/
solved:
	while(((c  = getc(file)) != EOF) && (c != '\t') && (c != '\n')) {
d83 1
@
