ICELLS	alloc.c	12
ainit	alloc.c	/^ainit(ap)$/
afreeall	alloc.c	/^afreeall(ap)$/
alloc	alloc.c	/^alloc(size, ap)$/
aresize	alloc.c	/^aresize(ptr, size, ap)$/
afree	alloc.c	/^afree(ptr, ap)$/
Malloc	alloc.c	/^main(argc, argv)$/
main	alloc.c	/^main(argc, argv)$/
aerror	alloc.c	/^void aerror(ap, msg)$/
c_hash	c_ksh.c	/^c_hash(wp)$/
c_print	c_ksh.c	/^c_print(wp)$/
c_whence	c_ksh.c	/^c_whence(wp)$/
c_typeset	c_ksh.c	/^c_typeset(wp)$/
c_alias	c_ksh.c	/^c_alias(wp)$/
c_unalias	c_ksh.c	/^c_unalias(wp)$/
c_let	c_ksh.c	/^c_let(wp)$/
c_jobs	c_ksh.c	/^c_jobs(wp)$/
c_fgbg	c_ksh.c	/^c_fgbg(wp)$/
c_kill	c_ksh.c	/^c_kill(wp)$/
c_bind	c_ksh.c	/^c_bind(wp)$/
c_label	c_sh.c	/^c_label(wp)$/
c_cd	c_sh.c	/^c_cd(wp)$/
c_shift	c_sh.c	/^c_shift(wp)$/
c_umask	c_sh.c	/^c_umask(wp)$/
c_dot	c_sh.c	/^c_dot(wp)$/
c_wait	c_sh.c	/^c_wait(wp)$/
c_read	c_sh.c	/^c_read(wp)$/
c_eval	c_sh.c	/^c_eval(wp)$/
c_trap	c_sh.c	/^c_trap(wp)$/
setsig	c_sh.c	/^setsig(p, f)$/
c_return	c_sh.c	/^c_return(wp)$/
c_brkcont	c_sh.c	/^c_brkcont(wp)$/
c_exit	c_sh.c	/^c_exit(wp)$/
c_exro	c_sh.c	/^c_exro(wp)$/
putvlist	c_sh.c	/^putvlist(flag)$/
c_set	c_sh.c	/^c_set(wp)$/
c_unset	c_sh.c	/^c_unset(wp)$/
c_ulimit	c_sh.c	/^c_ulimit(wp)$/
c_times	c_sh.c	/^c_times(wp)$/
timex	c_sh.c	/^timex(t, f)$/
clocktos	c_sh.c	/^clocktos(t)$/
c_exec	c_sh.c	/^c_exec(wp)$/
c_builtin	c_sh.c	/^c_builtin(wp)$/
EOI	c_test.c	37
FILRD	c_test.c	38
FILWR	c_test.c	39
FILREG	c_test.c	40
FILID	c_test.c	41
FILGZ	c_test.c	42
FILTT	c_test.c	43
STZER	c_test.c	44
STNZE	c_test.c	45
STEQL	c_test.c	46
STNEQ	c_test.c	47
INTEQ	c_test.c	48
INTNE	c_test.c	49
INTGE	c_test.c	50
INTGT	c_test.c	51
INTLE	c_test.c	52
INTLT	c_test.c	53
UNEGN	c_test.c	54
BAND	c_test.c	55
BOR	c_test.c	56
LPAREN	c_test.c	57
RPAREN	c_test.c	58
OPERAND	c_test.c	59
FILEX	c_test.c	60
FILCDEV	c_test.c	61
FILBDEV	c_test.c	62
FILFIFO	c_test.c	63
FILSETU	c_test.c	64
FILSETG	c_test.c	65
FILSTCK	c_test.c	66
FILSYM	c_test.c	67
FILNT	c_test.c	68
FILOT	c_test.c	69
FILEQ	c_test.c	70
FILSOCK	c_test.c	71
FILUID	c_test.c	72
FILGID	c_test.c	73
OPTION	c_test.c	74
UNOP	c_test.c	76
BINOP	c_test.c	77
BUNOP	c_test.c	78
BBINOP	c_test.c	79
PAREN	c_test.c	80
c_test	c_test.c	/^c_test(wp)$/
syntax	c_test.c	/^syntax()$/
expr	c_test.c	/^expr(n)$/
bexpr	c_test.c	/^bexpr(n)$/
primary	c_test.c	/^primary(n)$/
filstat	c_test.c	/^filstat(nm, mode)$/
t_lex	c_test.c	/^t_lex(s)$/
newerf	c_test.c	/^newerf (f1, f2)$/
olderf	c_test.c	/^olderf (f1, f2)$/
equalf	c_test.c	/^equalf (f1, f2)$/
readdir	edit.c	/^struct	dirent	*readdir();	/* missing from headers */$/
XF_NINPUT	edit.c	73
XF_ALLOC	edit.c	74
XF_NOBIND	edit.c	75
isfs	edit.c	77
BEL	edit.c	78
CMASK	edit.c	79
KILLSIZE	edit.c	92
xft_insert	edit.c	175
xft_error	edit.c	176
xft_ins_string	edit.c	177
x_read	edit.c	/^x_read(fd, buf, len)$/
x_insert	edit.c	/^x_insert(c)  {$/
x_ins_string	edit.c	/^x_ins_string(c)$/
x_ins	edit.c	/^x_ins(cp)$/
x_del_back	edit.c	/^x_del_back(c)  {$/
x_del_char	edit.c	/^x_del_char(c)  {$/
x_delete	edit.c	/^x_delete(nc)  {$/
x_del_bword	edit.c	/^x_del_bword(c)  {$/
x_mv_bword	edit.c	/^x_mv_bword(c)  {$/
x_mv_fword	edit.c	/^x_mv_fword(c)  {$/
x_del_fword	edit.c	/^x_del_fword(c)  {$/
x_bword	edit.c	/^x_bword()  {$/
x_fword	edit.c	/^x_fword()  {$/
x_goto	edit.c	/^x_goto(cp)$/
x_bs	edit.c	/^x_bs(c)  {$/
x_size_str	edit.c	/^x_size_str(cp)$/
x_size	edit.c	/^x_size(c)  {$/
x_zots	edit.c	/^x_zots(str)$/
x_zotc	edit.c	/^x_zotc(c)$/
x_flush	edit.c	/^x_flush()$/
x_putc	edit.c	/^x_putc(c)$/
x_puts	edit.c	/^x_puts(s)$/
x_mv_back	edit.c	/^x_mv_back(c)  {$/
x_mv_forw	edit.c	/^x_mv_forw(c)  {$/
x_search_char	edit.c	/^x_search_char(c) {$/
x_newline	edit.c	/^x_newline(c)  {$/
x_end_of_text	edit.c	/^x_end_of_text(c)  {$/
x_load_hist	edit.c	/^x_load_hist(hp)$/
x_search_hist	edit.c	/^x_search_hist(ci)$/
x_search	edit.c	/^x_search(pat, offset)$/
x_match	edit.c	/^x_match(str, pat)$/
x_del_line	edit.c	/^x_del_line(c)  {$/
x_mv_end	edit.c	/^x_mv_end(c)  {$/
x_mv_begin	edit.c	/^x_mv_begin(c)  {$/
x_draw_line	edit.c	/^x_draw_line(c)$/
x_redraw	edit.c	/^x_redraw(limit)  {$/
x_transpose	edit.c	/^x_transpose(c)  {$/
x_literal	edit.c	/^x_literal(c)  {$/
x_meta1	edit.c	/^x_meta1(c)  {$/
x_meta2	edit.c	/^x_meta2(c)  {$/
x_kill	edit.c	/^x_kill(c)  {$/
x_push	edit.c	/^x_push(nchars)  {$/
x_yank	edit.c	/^x_yank(c)  {$/
x_meta_yank	edit.c	/^x_meta_yank(c)  {$/
x_abort	edit.c	/^x_abort(c) {$/
x_error	edit.c	/^x_error(c) {$/
set_xmode	edit.c	/^set_xmode(onoff)$/
set_xmode	edit.c	/^set_xmode(onoff)$/
x_stuffreset	edit.c	/^x_stuffreset(c)$/
x_stuff	edit.c	/^x_stuff(c)$/
x_mapin	edit.c	/^x_mapin(cp)$/
x_mapout	edit.c	/^x_mapout(c)$/
x_print	edit.c	/^x_print(prefix, key)$/
x_bind	edit.c	/^x_bind(a1, a2, macro)$/
x_init	edit.c	/^x_init()$/
x_game_of_life	edit.c	/^x_game_of_life(c)  {$/
add_stash	edit.c	/^add_stash(dirnam, name)$/
list_stash	edit.c	/^list_stash()$/
x_comp_comm	edit.c	/^x_comp_comm(c)  {$/
x_list_comm	edit.c	/^x_list_comm(c)  {$/
x_complete	edit.c	/^x_complete(c)  {$/
x_enumerate	edit.c	/^x_enumerate(c)  {$/
x_comp_file	edit.c	/^x_comp_file(c)   {$/
x_list_file	edit.c	/^x_list_file(c)  {$/
compl_dec	edit.c	/^compl_dec(type)$/
compl_file	edit.c	/^compl_file(type)$/
compl_command	edit.c	/^compl_command(type)$/
strmatch	edit.c	/^strmatch(s1, s2)$/
readdir	eval.c	/^struct	dirent	*readdir();		/* missing from headers */$/
XBASE	eval.c	45
XSUB	eval.c	46
XARGSEP	eval.c	47
XARG	eval.c	48
XCOM	eval.c	49
substitute	eval.c	/^substitute(cp, f)$/
eval	eval.c	/^eval(ap, f)$/
evalstr	eval.c	/^evalstr(cp, f)$/
mypr	eval.c	/^mypr(cp)$/
expand	eval.c	/^expand(cp, wp, f)$/
varsub	eval.c	/^varsub(xp, sp, stype)$/
comsub	eval.c	/^comsub(xp, cp)$/
trimsub	eval.c	/^trimsub(str, pat, how)$/
glob	eval.c	/^glob(cp, wp)$/
globit	eval.c	/^globit(ds, dp, sp, wp, check)$/
debunk	eval.c	/^debunk(cp)$/
tilde	eval.c	/^tilde(acp)$/
homedir	eval.c	/^homedir(name)$/
execute	exec.c	/^execute(t, flags)$/
comexec	exec.c	/^comexec(t, vp, ap, flags)$/
shcomexec	exec.c	/^shcomexec(wp)$/
define	exec.c	/^define(name, t)$/
builtin	exec.c	/^builtin(name, func)$/
findcom	exec.c	/^findcom(name, insert)$/
flushcom	exec.c	/^flushcom(all)$/
search	exec.c	/^search(name, path, mode)$/
iosetup	exec.c	/^iosetup(iop)$/
herein	exec.c	/^herein(hname, sub)$/
echo	exec.c	/^echo(vp, ap)$/
Xinit	expand.h	27
Xput	expand.h	35
Xcheck	expand.h	38
Xfree	expand.h	49
Xclose	expand.h	52
Xstring	expand.h	55
Xsavepos	expand.h	57
Xrestpos	expand.h	58
XPinit	expand.h	69
XPput	expand.h	76
XPptrv	expand.h	82
XPsize	expand.h	83
XPclose	expand.h	85
XPfree	expand.h	88
ef	expr.c	13
VAR	expr.c	15
LIT	expr.c	16
LEQ	expr.c	17
LNE	expr.c	18
LLE	expr.c	19
LGE	expr.c	20
evalerr	expr.c	/^evalerr(err)$/
evaluate	expr.c	/^evaluate(expr)$/
asn	expr.c	/^asn()$/
e6	expr.c	/^e6()$/
e5	expr.c	/^e5()$/
e3	expr.c	/^e3()$/
e2	expr.c	/^e2()$/
e0	expr.c	/^e0()$/
token	expr.c	/^token()$/
tempvar	expr.c	/^tempvar()$/
intvar	expr.c	/^intvar(vp)$/
GETOPTEOF	getopts.c	29
ERR	getopts.c	30
getopt	getopts.c	/^getopt(argc, argv, opts)$/
resetopts	getopts.c	/^resetopts ()$/
c_getopts	getopts.c	/^c_getopts(wp)$/
c_fc	history.c	/^c_fc(wp)$/
histsave	history.c	/^histsave(cmd)$/
histget	history.c	/^histget(str)$/
histrpl	history.c	/^histrpl(s, pat, rep)$/
hist_init	history.c	/^hist_init()$/
hist_finish	history.c	/^hist_finish()$/
hist_record	history.c	/^hist_record(buf, len)$/
hist_load	history.c	/^hist_load(fd)$/
fzotc	io.c	/^fzotc(c, f)$/
errorf	io.c	/^errorf(fmt)$/
shellf	io.c	/^shellf(fmt)$/
fopenshf	io.c	/^fopenshf(fd)$/
flushshf	io.c	/^flushshf(fd)$/
savefd	io.c	/^savefd(fd)$/
restfd	io.c	/^restfd(fd, ofd)$/
openpipe	io.c	/^openpipe(pv)$/
closepipe	io.c	/^closepipe(pv)$/
maketemp	io.c	/^maketemp(ap)$/
_IO_H	io.h	6
unlink	io.h	11
ARGS	io.h	/^int ioctl ARGS ((int fd, int cmd, void *argp)); /* BSD is "uns long cmd" */$/
WIFCORED	jobs.c	43
setpgid	jobs.c	54
getpgid	jobs.c	55
tcsetpgrp	jobs.c	56
getpgid	jobs.c	58
killpg	jobs.c	59
SIGCHLD	jobs.c	64
JFREE	jobs.c	83
JRUN	jobs.c	84
JEXIT	jobs.c	85
JSIGNAL	jobs.c	86
JSTOP	jobs.c	87
j_init	jobs.c	/^j_init()$/
j_exit	jobs.c	/^j_exit()$/
j_change	jobs.c	/^j_change()$/
exchild	jobs.c	/^exchild(t, flags)$/
waitlast	jobs.c	/^waitlast()$/
j_waitj	jobs.c	/^j_waitj(aj, intr)$/
j_sigchld	jobs.c	/^j_sigchld(sig)$/
waitfor	jobs.c	/^waitfor(job)$/
j_kill	jobs.c	/^j_kill(job, sig)$/
j_resume	jobs.c	/^j_resume(job, bg)$/
j_jobs	jobs.c	/^j_jobs()$/
j_notify	jobs.c	/^j_notify()$/
j_print	jobs.c	/^j_print(j)$/
j_lookup	jobs.c	/^j_lookup(cp)$/
j_stopped	jobs.c	/^j_stopped()$/
j_newjob	jobs.c	/^j_newjob()$/
j_search	jobs.c	/^j_search(job)$/
getsc	lex.c	29
ungetsc	lex.c	30
yylex	lex.c	/^yylex(cf)$/
gethere	lex.c	/^gethere()$/
readhere	lex.c	/^readhere(iop)$/
yyerror	lex.c	/^yyerror(msg)$/
pushs	lex.c	/^pushs(type)$/
getsc_	lex.c	/^getsc_()$/
pprompt	lex.c	/^pprompt(cp)$/
IDENT	lex.h	7
SEOF	lex.h	25
STTY	lex.h	26
SFILE	lex.h	27
SSTRING	lex.h	28
SWSTR	lex.h	29
SWORDS	lex.h	30
SWORDSEP	lex.h	31
SALIAS	lex.h	32
SHIST	lex.h	33
ARGS	lex.h	/^Source *pushs ARGS((int stype)); 	/* push Source */$/
IODEFAULT	lex.h	58
LWORD	lex.h	60
LOGAND	lex.h	61
LOGOR	lex.h	62
BREAK	lex.h	63
IF	lex.h	64
THEN	lex.h	65
ELSE	lex.h	66
ELIF	lex.h	67
FI	lex.h	68
CASE	lex.h	69
ESAC	lex.h	70
FOR	lex.h	71
WHILE	lex.h	72
UNTIL	lex.h	73
DO	lex.h	74
DONE	lex.h	75
IN	lex.h	76
FUNCTION	lex.h	77
TIME	lex.h	78
REDIR	lex.h	79
MPAREN	lex.h	80
YYERRCODE	lex.h	81
CONTIN	lex.h	84
ONEWORD	lex.h	85
ALIAS	lex.h	86
KEYWORD	lex.h	87
SYNTAXERR	lex.h	89
HERES	lex.h	90
HISTORY	lex.h	103
Extern	main.c	7
Mmain	main.c	/^main(argc, argv, envp)$/
main	main.c	/^main(argc, argv, envp)$/
include	main.c	/^include(name)$/
command	main.c	/^command(comm)$/
shell	main.c	/^shell(s)$/
leave	main.c	/^leave(rv)$/
error	main.c	/^error()$/
unwind	main.c	/^unwind()$/
newenv	main.c	/^newenv(type)$/
quitenv	main.c	/^quitenv()$/
reclaim	main.c	/^reclaim()$/
aerror	main.c	/^aerror(ap, msg)$/
setctypes	misc.c	/^setctypes(s, t)$/
initctypes	misc.c	/^initctypes()$/
ulton	misc.c	/^ulton(n, base)$/
strsave	misc.c	/^strsave(s, ap)$/
option	misc.c	/^option(n)$/
getoptions	misc.c	/^getoptions()$/
printoptions	misc.c	/^printoptions()$/
getn	misc.c	/^getn(as)$/
strerror	misc.c	/^strerror(i)$/
xpexpand	misc.c	/^xpexpand(xp)$/
NOT	misc.c	226
gmatch	misc.c	/^gmatch(s, p)$/
cclass	misc.c	/^cclass(p, sub)$/
qsortp	misc.c	/^qsortp(base, n, f)$/
swap2	misc.c	309
swap3	misc.c	312
qsort1	misc.c	/^qsort1(base, lim, f)$/
xstrcmp	misc.c	/^xstrcmp(p1, p2)$/
mail	misc.c	/^mail()$/
eaccess	misc.c	/^eaccess(name, mode)$/
Extern	sh.h	6
FALSE	sh.h	10
TRUE	sh.h	11
SHELL	sh.h	14
ARGS	sh.h	18
Void	sh.h	19
Const	sh.h	20
Volatile	sh.h	21
ARGS	sh.h	23
Void	sh.h	24
Const	sh.h	25
Volatile	sh.h	26
sizeofN	sh.h	29
BIT	sh.h	30
NUFILE	sh.h	32
FDBASE	sh.h	33
MAGIC	sh.h	37
LINE	sh.h	39
PATH	sh.h	40
APERM	sh.h	54
ATEMP	sh.h	55
ARGS	sh.h	/^Area   *ainit ARGS((Area *ap));		/* initialize Area */$/
E_NONE	sh.h	80
E_PARSE	sh.h	81
E_EXEC	sh.h	82
E_LOOP	sh.h	83
E_TCOM	sh.h	84
E_FUNC	sh.h	85
E_ERRH	sh.h	86
FEXPORT	sh.h	92
FERREXIT	sh.h	93
FBGNICE	sh.h	94
FEMACS	sh.h	95
FIGNEOF	sh.h	96
FHASHALL	sh.h	97
FTALKING	sh.h	98
FKEYWORD	sh.h	99
FMARKDIRS	sh.h	100
FMONITOR	sh.h	101
FNOEXEC	sh.h	102
FNOGLOB	sh.h	103
FPRIVILEGED	sh.h	104
FSTDIN	sh.h	105
FNOUNSET	sh.h	106
FVERBOSE	sh.h	107
FXTRACE	sh.h	108
FLAG	sh.h	110
FLAGS	sh.h	111
leave	sh.h	/^void	leave();	/* abort shell (or fail in subshell) */$/
stdin	sh.h	179
stdout	sh.h	180
shlout	sh.h	181
ARGS	sh.h	/^int	shellf ARGS((Const char *fmt, ...)); /* fprintf(shlout, ); */$/
SIGNALS	sh.h	209
ARGS	sh.h	/^Trap    *gettrap ARGS((char *)); /* search for struct trap by number or name */$/
NULL	stddef.h	7
NULL	stddef.h	9
_STDDEF_H	stddef.h	14
ARGS	stddef.h	18
Void	stddef.h	19
Const	stddef.h	20
ARGS	stddef.h	22
Void	stddef.h	23
Const	stddef.h	24
offsetof	stddef.h	32
STDIO_H	stdio.h	6
NULL	stdio.h	22
EOF	stdio.h	24
BUFSIZ	stdio.h	25
_NFILE	stdio.h	26
_FINUSE	stdio.h	31
_FSTBUF	stdio.h	32
_FUNGOT	stdio.h	33
_FEOF	stdio.h	34
_FERR	stdio.h	35
_ep	stdio.h	37
getchar	stdio.h	53
getc	stdio.h	54
putchar	stdio.h	55
putc	stdio.h	56
feof	stdio.h	57
ferror	stdio.h	58
clearerr	stdio.h	59
fileno	stdio.h	60
wdleng	stdio.h	61
stdin	stdio.h	63
stdout	stdio.h	64
stderr	stdio.h	65
P_tmpdir	stdio.h	70
L_tmpnam	stdio.h	71
REJECT	syn.c	34
ACCEPT	syn.c	35
token	syn.c	36
tpeek	syn.c	38
yyparse	syn.c	/^yyparse()$/
pipeline	syn.c	/^pipeline(cf)$/
andor	syn.c	/^andor()$/
c_list	syn.c	/^c_list()$/
synio	syn.c	/^synio(cf)$/
musthave	syn.c	/^musthave(c, cf)$/
nested	syn.c	/^nested(type, mark)$/
command	syn.c	/^command(cf)$/
dogroup	syn.c	/^dogroup(onlydone)$/
thenpart	syn.c	/^thenpart()$/
elsepart	syn.c	/^elsepart()$/
caselist	syn.c	/^caselist()$/
casepart	syn.c	/^casepart()$/
wordlist	syn.c	/^wordlist()$/
block	syn.c	/^block(type, t1, t2, wp)$/
keywords	syn.c	/^keywords()$/
newtp	syn.c	/^newtp(type)$/
io	syn.c	/^io(u, f, cp)$/
zzerr	syn.c	/^zzerr()$/
compile	syn.c	/^compile(s)$/
INIT_TBLS	table.c	14
hash	table.c	/^hash(n)$/
phash	table.c	/^phash(s) char *s; {$/
tinit	table.c	/^tinit(tp, ap)$/
texpand	table.c	/^texpand(tp, nsize)$/
tsearch	table.c	/^tsearch(tp, n, h)$/
tenter	table.c	/^tenter(tp, n, h)$/
tdelete	table.c	/^tdelete(p)$/
twalk	table.c	/^twalk(tp)$/
tnext	table.c	/^tnext()$/
tnamecmp	table.c	/^tnamecmp(p1, p2)$/
tsort	table.c	/^tsort(tp)$/
ALLOC	table.h	26
DEFINED	table.h	27
ISSET	table.h	28
SPECIAL	table.h	29
INTEGER	table.h	30
RDONLY	table.h	31
EXPORT	table.h	32
LOCAL	table.h	33
TRACE	table.h	34
FUNCT	table.h	35
CNONE	table.h	38
CSHELL	table.h	39
CFUNC	table.h	40
CEXEC	table.h	41
CALIAS	table.h	42
CKEYWD	table.h	43
ARGS	table.h	/^void tinit ARGS((struct table *, Area *)); /* initialize table */$/
V_NONE	table.h	85
V_PATH	table.h	86
V_IFS	table.h	87
V_SECONDS	table.h	88
V_OPTIND	table.h	89
namecmp	trap.c	/^namecmp(s1, s2)$/
gettrap	trap.c	/^gettrap(name)$/
trapsig	trap.c	/^trapsig(i)$/
runtraps	trap.c	/^runtraps()$/
runtrap	trap.c	/^runtrap(p)$/
cleartraps	trap.c	/^cleartraps()$/
ignoresig	trap.c	/^ignoresig(i)$/
restoresigs	trap.c	/^restoresigs()$/
FSTRING	tree.c	17
ptree	tree.c	/^ptree(t, f)$/
pioact	tree.c	/^pioact(f, iop)$/
tputc	tree.c	/^tputc(c, f)$/
tputC	tree.c	/^tputC(c, f)$/
tputS	tree.c	/^tputS(wp, f)$/
fptreef	tree.c	/^fptreef(f, va_alist) va_dcl$/
snptreef	tree.c	/^snptreef(s, n, va_alist) va_dcl$/
vfptreef	tree.c	/^vfptreef(f, fmt, va)$/
tcopy	tree.c	/^tcopy(t, ap)$/
wdcopy	tree.c	/^wdcopy(wp, ap)$/
wdscan	tree.c	/^wdscan(wp, c)$/
iocopy	tree.c	/^iocopy(iow, ap)$/
tfree	tree.c	/^tfree(t, ap)$/
iofree	tree.c	/^iofree(iow, ap)$/
NOBLOCK	tree.h	7
NOWORD	tree.h	8
NOWORDS	tree.h	9
TEOF	tree.h	24
TCOM	tree.h	25
TPAREN	tree.h	26
TPIPE	tree.h	27
TLIST	tree.h	28
TOR	tree.h	29
TAND	tree.h	30
TFOR	tree.h	31
TCASE	tree.h	32
TIF	tree.h	33
TWHILE	tree.h	34
TUNTIL	tree.h	35
TELIF	tree.h	36
TPAT	tree.h	37
TBRACE	tree.h	38
TASYNC	tree.h	39
TFUNCT	tree.h	40
TTIME	tree.h	41
TEXEC	tree.h	42
EOS	tree.h	47
CHAR	tree.h	48
QCHAR	tree.h	49
COMSUB	tree.h	50
OQUOTE	tree.h	51
CQUOTE	tree.h	52
OSUBST	tree.h	53
CSUBST	tree.h	54
IOREAD	tree.h	66
IOHERE	tree.h	67
IOWRITE	tree.h	68
IOCAT	tree.h	69
IOXHERE	tree.h	70
IODUP	tree.h	71
LBREAK	tree.h	74
LCONTIN	tree.h	75
XEXEC	tree.h	78
XFORK	tree.h	79
XBGND	tree.h	80
XPIPEI	tree.h	81
XPIPEO	tree.h	82
XPIPE	tree.h	83
XXCOM	tree.h	84
DOBLANK	tree.h	89
DOGLOB	tree.h	90
DOPAT	tree.h	91
DOTILDE	tree.h	92
ARGS	tree.h	/^int	execute ARGS((struct op *, int flags));	/* execute tree */$/
TIOCGETD	tty.h	12
TIOCSETD	tty.h	13
NTTYDISC	tty.h	14
TIOCSTI	tty.h	17
TIOCSPGRP	tty.h	20
RLIMIT_FSIZE	ulimit.c	25
do_ulimit	ulimit.c	/^do_ulimit(a1, a2)$/
getcwd	unistd.c	/^getcwd(buf, len)$/
ulimit	unistd.c	/^ulimit(cmd, limit)$/
_UNISTD_H	unistd.h	5
ARGS	unistd.h	12
Void	unistd.h	13
Const	unistd.h	14
ARGS	unistd.h	16
Void	unistd.h	17
Const	unistd.h	18
R_OK	unistd.h	25
W_OK	unistd.h	26
X_OK	unistd.h	27
F_OK	unistd.h	28
F_ULOCK	unistd.h	32
F_LOCK	unistd.h	33
F_TLOCK	unistd.h	34
F_TEST	unistd.h	35
SEEK_SET	unistd.h	39
SEEK_CUR	unistd.h	40
SEEK_END	unistd.h	41
IN_PATH	unistd.h	43
newblock	var.c	/^newblock()$/
popblock	var.c	/^popblock()$/
global	var.c	/^global(n)$/
local	var.c	/^local(n)$/
strval	var.c	/^strval(vp)$/
intval	var.c	/^intval(vp)$/
setstr	var.c	/^setstr(vq, s)$/
strint	var.c	/^strint(vq, vp)$/
setint	var.c	/^setint(vq, n)$/
import	var.c	/^import(thing)$/
export	var.c	/^export(vp, val)$/
typeset	var.c	/^typeset(var, set, clr)$/
unset	var.c	/^unset(vp)$/
isassign	var.c	/^isassign(s)$/
makenv	var.c	/^makenv()$/
special	var.c	/^special(name)$/
getspec	var.c	/^getspec(vp)$/
setspec	var.c	/^setspec(vp)$/
ARGS	wait.h	6
ARGS	wait.h	8
WNOHANG	wait.h	16
WUNTRACED	wait.h	17
WSTOPPED	wait.h	19
WIFSTOPPED	wait.h	21
WIFSIGNALED	wait.h	22
WIFEXITED	wait.h	23
WIFCORED	wait.h	24
WEXITSTATUS	wait.h	25
WTERMSIG	wait.h	26
WSTOPSIG	wait.h	27
waitpid	wait.h	33
