head     1.11;
branch   ;
access   ;
symbols  ;
locks    bin:1.11; strict;
comment  @ * @;


1.11
date     93.04.12.14.14.08;  author bin;  state Exp;
branches ;
next     1.10;

1.10
date     93.03.18.13.27.50;  author bin;  state Exp;
branches ;
next     1.9;

1.9
date     93.03.03.09.45.27;  author bin;  state Exp;
branches ;
next     1.8;

1.8
date     93.02.02.18.16.28;  author bin;  state Exp;
branches ;
next     1.7;

1.7
date     93.01.06.09.24.31;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     92.11.13.15.40.21;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     92.06.02.12.05.36;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.06.02.11.45.40;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.05.12.13.33.47;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.04.13.14.38.31;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.03.26.11.44.13;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.11
log
@Udo: third color update
@
text
@/*********************************************************************
*                         COPYRIGHT NOTICE                           *
**********************************************************************
*        This software is copyright (C) 1982 by Pavel Curtis         *
*                                                                    *
*        Permission is granted to reproduce and distribute           *
*        this file by any means so long as no fee is charged         *
*        above a nominal handling fee and so long as this            *
*        notice is always included in the copies.                    *
*                                                                    *
*        Other rights are reserved except as explicitly granted      *
*        by written permission of the author.                        *
*                Pavel Curtis                                        *
*                Computer Science Dept.                              *
*                405 Upson Hall                                      *
*                Cornell University                                  *
*                Ithaca, NY 14853                                    *
*                                                                    *
*                Ph- (607) 256-4934                                  *
*                                                                    *
*                Pavel.Cornell@@Udel-Relay   (ARPAnet)                *
*                decvax!cornell!pavel       (UUCPnet)                *
*********************************************************************/

/*
 *	setupterm(termname, filedes, errret)
 *
 *	Find and read the appropriate object file for the terminal
 *	Make cur_term point to the structure.
 *	Turn off the XTABS bit in the tty structure if it was on
 *	If XTABS was on, remove the tab and backtab capabilities.
 *
 *  $Log:	lib_setup.c,v $
 * Revision 2.4  92/11/29  15:40:02  munk
 * Conditional usage of termio
 *
 * Revision 2.3  92/10/27  22:23:15  munk
 * Initialize alternate character set map
 *
 * Revision 1.5  92/06/02  12:05:36  bin
 * *** empty log message ***
 * 
 * Revision 1.2  92/04/13  14:38:31  bin
 * update by vlad
 * 
 * Revision 2.2  91/04/20  21:45:19  munk
 * Usage of register variables
 * Made the large arrays static
 *
 * Revision 2.1  82/10/25  14:49:09  pavel
 * Added Copyright Notice
 * 
 * Revision 2.0  82/10/24  15:17:46  pavel
 * Beta-one Test Release
 * 
 * Revision 1.5  82/08/23  22:30:35  pavel
 * The REAL Alpha-one Release Version
 * 
 * Revision 1.4  82/08/20  15:12:24  pavel
 * Fixed use of un-initialised cur_term.
 * 
 * Revision 1.3  82/08/19  19:22:09  pavel
 * Alpha Test Release One
 * 
 * Revision 1.2  82/08/19  19:11:28  pavel
 * Alpha Test Release One
 * 
 * Revision 1.1  82/08/12  18:45:07  pavel
 * Initial revision
 * 
 *
 */

#ifdef RCSHDR
static char RCSid[] =
	"$Header: /src386/usr/lib/ncurses/RCS/lib_setup.c,v 1.5 92/06/02 12:05:36 bin Exp Locker: bin $";
#endif

#include <stdio.h>
#include "curses.h"
#include "curses.priv.h"
#include "term.h"

#define ret_error(code, fmt, arg)	if (errret)\
					{\
					    *errret = code;\
					    return(code);\
					}\
					else\
					{\
					    fprintf(stderr, fmt, arg);\
					    exit(1);\
					}


chtype	acs_map[128];
char	ttytype[NAMESIZE];
struct	term _first_term;

int	_tracing;
struct screen *SP = 0;


setupterm(termname, filedes, errret)
char	*termname;
int	filedes;
int	*errret;
{
	char		filename[1024];
	char		*malloc(), *getenv(), *strncpy();
	char		*terminfo;
	struct term	*term_ptr;
	int		got_code;

#ifdef TRACE
	_init_trace();
	if (_tracing)
	    _tracef("setupterm(%s,%d,%o) called", termname, filedes, errret);
#endif

	if (termname == NULL)
	{
	    termname = getenv("TERM");
	    if (termname == NULL)
		ret_error(-1, "TERM environment variable not set.\n", "");
	}

	if (cur_term == 0)
	    term_ptr = &_first_term;
	else
	{
	    term_ptr = (struct term *) malloc(sizeof(struct term));

	    if (term_ptr == NULL)
		ret_error(-1, "Not enough memory to create terminal structure.\n", "");
	}

	got_code = -1;
	if ((terminfo = getenv("TERMINFO")) != NULL) {
	    sprintf(filename, "%s/%c/%s", terminfo, termname[0], termname);
	    got_code = read_entry(filename, term_ptr);
	}
	if (got_code < 0) {
	    sprintf(filename, "%s/%c/%s", SRCDIR, termname[0], termname);
	    if (read_entry(filename, term_ptr) < 0)
		ret_error(0, "'%s': Unknown terminal type.\n", termname);
	}

	if (command_character  &&  getenv("CC"))
	    do_prototype();

	cur_term = term_ptr;
	strncpy(ttytype, cur_term->term_names, NAMESIZE - 1);
	ttytype[NAMESIZE - 1] = '\0';
	cur_term->Filedes = filedes;
#ifdef USE_TERMIO
	ioctl(filedes, TCGETA, &cur_term->Otermio);
	if ((cur_term->Otermio.c_oflag & TABDLY) == TAB3)
	    tab = back_tab = NULL;

	cur_term->Ntermio = cur_term->Otermio;
	cur_term->Ntermio.c_oflag &= ~TAB3;
#else
	gtty(filedes, &cur_term->Ottyb);
	if (cur_term->Ottyb.sg_flags & XTABS)
	    tab = back_tab = NULL;

	cur_term->Nttyb = cur_term->Ottyb;
	cur_term->Nttyb.sg_flags &= ~XTABS;
#endif

	setup_acs();
	fixterm();

	if (errret)
	    *errret = 1;
	
	return(1);
}


/*
**	do_prototype()
**
**	Take the real command character out of the CC environment variable
**	and substitute it in for the prototype given in 'command_character'.
**
*/

static
do_prototype()
{
    	register int	i, j;
	char		CC;
	char		proto;

	CC = *getenv("CC");
	proto = *command_character;

	for (i=0; i < STRCOUNT; i++)
	{
	    j = 0;
	    while (cur_term->Strings[i][j])
	    {
		if (cur_term->Strings[i][j] == proto)
		    cur_term->Strings[i][j] = CC;
		j++;
	    }
	}
}
@


1.10
log
@Udo: 1st color update 3/18
@
text
@@


1.9
log
@udo: color code added
@
text
@@


1.8
log
@Udo update, added color code
@
text
@@


1.7
log
@vlad: update from Udo
@
text
@d110 1
a110 1
	char		*malloc(), *getenv();
@


1.6
log
@cef update from Udo for pads and color.
@
text
@d34 3
d156 8
d170 1
@


1.5
log
@*** empty log message ***
@
text
@d34 6
d71 1
a71 1
#ifndef COHERENT
d73 1
a73 1
	"$Header: /src386/usr/lib/ncurses/RCS/lib_setup.c,v 1.2 92/04/13 14:38:31 bin Exp Locker: bin $";
d93 3
a95 2
char ttytype[NAMESIZE];
struct term _first_term;
d100 1
d160 1
d177 1
@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@updates by cef
@
text
@d88 1
@


1.2
log
@update by vlad
@
text
@d33 4
a36 1
 *  $Log:	RCS/lib_setup.v $
d67 1
a67 1
	"$Header:   RCS/lib_setup.v  Revision 2.2  91/04/20  21:45:19  munk   Exp$";
d97 1
a97 3
	static char	filename1[1024];
	static char	filename2[1024];
	char		*directory = SRCDIR;
d101 1
d126 10
a135 2
	if ((terminfo = getenv("TERMINFO")) != NULL)
	    directory = terminfo;
a136 7
	sprintf(filename1, "%s/%c/%s", directory, termname[0], termname);
	sprintf(filename2, "%s/%c/%s", SRCDIR, termname[0], termname);

	if (read_entry(filename1, term_ptr) < 0
				    &&  read_entry(filename2, term_ptr) < 0)
	    ret_error(0, "'%s': Unknown terminal type.\n", termname);

a159 1

a166 1

@


1.1
log
@Initial revision
@
text
@@
