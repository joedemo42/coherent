head     1.1;
branch   ;
access   ;
symbols  ;
locks    bin:1.1;
comment  @# @;


1.1
date     93.06.18.09.20.28;  author bin;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 *	This functions are taken from COHERENT's "misc" library.
 *	The file doesn't have had any Copyrights or hints who
 *	wrote them, so I don't know. However, I modified the
 *	functions to fits the needs of vsh.
 *
 *	Udo Munk (udo@@umunk.GUN.de)
 */
/* 
 * match(string, pattern, fin)
 * returns start of pattern in string or NULL if no match.
 * pattern:
 *	[c1c2...cn-cm]	class of characters.
 *	?		any character.
 *	*		any # of any character.
 * if pattern is found fin is aimed past the end of the pattern.
 */
/*
 * amatch is used internally by match.
 */
static char *
amatch(s, p, pfc, start, fin)
register char *s, *p;
int pfc;	/* past first char */
char **start, **fin;
{
}
char *
match(s, p, fin)
register char *s, *p;
char **fin;
{
}
/*
 *      vsh: main modul
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
int tflag;                              /* flag for terminals/curses */
					/* without alternate character set */
int eflag;				/* flag for buggy altcharset */
int rflag;                              /* flag for restricted user */
int dflag;                              /* flag for don't change to stored dir */
int iflag;				/* flag for restricted installation */
char cwd[MAXTMP+1];                     /* current working directory */
char *home;                             /* HOME directory */
char *mail;                             /* MAIL directory */
char defmail[30] = "/usr/spool/mail/";	/* default MAIL directory */
char ed[MAXEXCMD+1];                    /* editor */
char sh[MAXEXCMD+1];                    /* shell */
char pr[MAXEXCMD+1];                    /* print spooler */
char vi[MAXEXCMD+1];                    /* file viewer */
char sc[3] = "3";			/* idle time for screen saver */
char *cmd[MAXCMD];                      /* command history */
char *actions[MAXACT];			/* file actions */
char tmp[MAXTMP];                       /* working buffer */
char tmp1[MAXTMP];                      /* 2. working buffer */
char tmp2[MAXTMP];			/* 3. working buffer */
struct stat file_stat;                  /* buffer for stat() */
struct stat mail_stat;                  /* same, but for MAIL file */
struct filelist files[MAXFILES+1];      /* list of files in currect directory */
int nfiles;                             /* number of entrys in files */
int afile;                              /* number of file where cursor is on */
int tagged;                             /* number of tagged files */
int longnames;				/* =1, if file names longer then 14 */
chtype meattrib = A_REVERSE;		/* default attribute of main menu */
chtype pdcolor	= A_NORMAL;		/* default color of pulldown menu */
chtype pdattrib = A_BOLD|A_UNDERLINE;	/* default attribute of pulldown menu */
chtype seattrib = A_BOLD|A_UNDERLINE;	/* default attribute of select boxes */
int execact;				/* flag for execution of file actions */
int save;                               /* flag for save of environment */
int lsave;                              /* minute of last call of l0_time() */
int idle;				/* idle time for screen saver */
int cursor;				/* return value from cursoroff() */
WINDOW *fl;                             /* sub-window for file window */
int wfl, hfl;                           /* width and high of sub-windows */
WINDOW *pf;				/* sub-findow for current directory */
SCROLLBAR *scp;				/* scrollbar for file window */
int hist_index;				/* index into command history */
int dir_sp;				/* stackpointer for directory stack */
struct dstack *dir_stack[DSTKSIZE];	/* directory stack */
struct utsname sname;			/* system name */
extern struct pfkey pfkeys[];		/* function keys */
jmp_buf reset_win;
extern char *malloc(), *calloc();
extern void free();
main(argc, argv)
int argc;
char *argv[];
{
}
sighup_handler()
{
}
sigterm_handler()
{
}
/*
 *      level 0: create the display and to the work for users input
 */
do_l0()
{
}
/*
 *      create the main display
 */
l0_picture()
{
}
/*
 *      create the main menu and refresh the display
 */
l0_menu()
{
}
/*
 *      update all display boxes after execution of functions
 */
l0_rebuild()
{
}
/*
 *      display contents of file window
 */
l0_files(offs)
int offs;
{
}
/*
 *      output time and date stamps of a file
 */
pr_date(line, t)
register int line;
register struct tm *t;
{
}
/*
 *      output permissions of a file
 */
pr_mode(line, m)
register int line, m;
{
}
/*
 *	update date and time, check users mailbox, save environment
 *	if neccessary, aktivate screen saver after timeout
 */
l0_time()
{
}
/*
 *      update number of files in directory
 */
l0_fileno()
{
}
/*
 *      update size of files in directory
 */
l0_filesize()
{
}
/*
 *      update number of tagged files
 */
l0_tagged()
{
}
/*
 *	update size of tagged files
 */
l0_tfilesize()
{
}
/*
 *      update directory stack
 */
l0_dirstack(n)
int n;
{
}
/*
 *	update mail status
 */
l0_mail()
{
}
/*
 *      update program status
 */
l0_status(n)
int n;
{
}
/*
 *      read environment from $HOME/.vsh
 */
read_env()
{
}
/*
 *      write environment into $HOME/.vsh
 */
write_ins_file()
{
}
/*
 *      read environment from $HOME/.vsh
 */
read_ins_file()
{
}
/*
 *      vsh: text module German
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
char yestxt[] = "Ja";
char notxt[] = "Nein";
char oktxt[] = "Ok";
char *l0txt[] = {};
char *share_box[] = {};
char *copyright_box[] = {};
char *sand[] = {};
char *l0mail[] = {};
char *l0msg[] = {};
char *l0menu[] = {};
char *exit_box[] = {};
char *restrict_box[] = {};
char *msgs[] = {};	
char *options[] = {}; bekannte Optionen sind:\n",
	"-d [directory] Start vom momentanen oder dem angegebenen Directory\n",
	"-r             eingeschraenkte Version\n",
	"-i             Installation nicht erlauben\n",
	"-t             VT100 Graphik-Zeichen verwenden\n",
	"-e             keine Graphik-Zeichen verwenden\n",
	NULL
};
struct menu f_pulldown[] = {};
struct menu d_pulldown[] = {};
struct menu c_pulldown[] = {};
struct menu r_pulldown[] = {};
struct menu e_pulldown[] = {};
struct menu h_pulldown[] = {};
struct menu o_pulldown[] = {};
struct menu i_pulldown[] = {};
struct menu id_pulldown[] = {};
struct menu ik_pulldown[] = {};
struct menu ia_pulldown[] = {};
char r_txt[] = "Lesen";
char w_txt[] = "Schreiben";
char x_txt[] = "Ausfuehren";
char *acc_text1 = "Zugriffsrechte der Datei %s aendern";
char *acc_text2 = "Zugriffsrechte aller markierten Dateien aendern";
struct button acc_ow_r = {};
struct button acc_ow_w = {};
struct button acc_ow_x = {};
struct button acc_gr_r = {};
struct button acc_gr_w = {};
struct button acc_gr_x = {};
struct button acc_wo_r = {};
struct button acc_wo_w = {};
struct button acc_wo_x = {};
struct button acc_su = {};
struct button acc_sg = {};
struct button acc_st = {};
struct bgroup acc_g_owner = {};
struct bgroup acc_g_group = {};
struct bgroup acc_g_world = {};
struct bgroup acc_g_special = {};
struct bbox access_buttons = {};
char *own_text1 = "Eigentuemer/Gruppe der Datei %s aendern";
char *own_text2 = "Eigentuemer/Gruppe aller markierten Dateien aendern";
struct delem own_e_uid = {};
struct delem own_e_gid = {};
struct dial own_dialog = {};
char *own_err1 = "Der eingegebene %sname ist unbekannt";
char *own_uname = "Benutzer";
char *own_gname = "Gruppen";
char *f_own_box[] = {};
char *f_print_box[] = {};
char *f_rm_text = "Es sind %d Dateien markiert";
char *f_rm_box[] = {};
char *f_rmi_text = "Datei %s loeschen ?";
char *f_rmi_box[] = {};
char *f_re_box[] = {};
char *f_re1_box[] = {};
char *f_re2_box[] = {};
struct delem cp_e_fn = {};
struct delem cp_e_pn = {};
struct dial cp_dialog = {};
char *f_cp1_box[] = {};
char *f_cp2_txt = "Datei %s existiert, ueberschreiben ?";
char *f_cp2_box[] = {};
char *f_cp3_box[] = {};
char *f_show_box[] = {};
char *finfo_txt[] = {};
char *ftype_txt[] = {};
char *f_info_box[] = {};
char *f_select_box[] = {};
char *f_exec_box[] = {};
char *d_not_box[] = {};
char *d_nf_box[] = {};
char *f_nd_box[] = {};
char *d_cdu_box[] = {};
char *d_nous_box[] = {};
char *d_ncd_box[] = {};
char *d_nopath_box[] = {};
char *d_nrd_box[] = {};
char *d_cre_box[] = {};
char *d_cre1_box[] = {};
char *d_cre2_box[] = {};
char *d_rm_text = "Verzeichnis enthaelt %d Dateien und %d Verzeichnisse";
char *d_rm_box[] = {};
char *d_push_box[] = {};
char *d_pop_box[] = {};
char *lock1_box[] = {};
char *lock2_box[] = {};
struct delem top_delm = {};
struct delem cha_delm = {};
struct dial man_dialog = {};
char *ins_shell_box[] = {};
char *ins_editor_box[] = {};
char *ins_print_box[] = {};
char *ins_view_box[] = {};
char *ins_sav_box[] = {};
char *ins_menu_box[] = {};
char *ins_pdco_box[] = {};
char *ins_puld_box[] = {};
char *ins_dial_box[] = {};
struct delem pfkey_label = {};
struct delem pfkey_cmd = {};
struct dial pfk_dialog = {};
char *set_msg_box[] = {};
char *f_err1 = "Datei %s kann nicht %s werden";
char *f_err2 = "verschoben";
char *f_err3 = "geloescht";
char *f_err4 = "kopiert";
char *f_err5 = "umbenannt";
char *f_err6 = "geaendert";
char *f_err7 = "angelegt";
char *sf_err_box[] = {};
char *tf_err_box[] = {};
char *ins_act_box[] = {};
LISTBOX fa_list_box = {};
/*
 *      vsh: text module English
 *
 *      Copyright (c) 1990-93 by Udo Munk
 *
 *	English checked by fwb, 2/10/93
 */
char yestxt[] = "Yes";
char notxt[] = "No";
char oktxt[] = "Ok";
char *l0txt[] = {};
char *share_box[] = {};
char *copyright_box[] = {};
char *sand[] = {};
char *l0mail[] = {};
char *l0msg[] = {};
char *l0menu[] = {};
char *exit_box[] = {};
char *restrict_box[] = {};
char *msgs[] = {};
char *options[] = {}; known options are:\n",
	"-d [directory] start from current or selected directory\n",
	"-r             run a restricted version\n",
	"-i             do not allow installation\n",
	"-t             assume graphic-character maping is VT100-compatible\n",
	"-e             do not use graphic-character maping\n",
	NULL
};
struct menu f_pulldown[] = {};
struct menu d_pulldown[] = {};
struct menu c_pulldown[] = {};
struct menu r_pulldown[] = {};
struct menu e_pulldown[] = {};
struct menu h_pulldown[] = {};
struct menu o_pulldown[] = {};
struct menu i_pulldown[] = {};
struct menu id_pulldown[] = {};
struct menu ik_pulldown[] = {};
struct menu ia_pulldown[] = {};
char r_txt[] = "Read";
char w_txt[] = "Write";
char x_txt[] = "Execute";
char *acc_text1 = "Change access of file %s";
char *acc_text2 = "Change access of all tagged files";
struct button acc_ow_r = {};
struct button acc_ow_w = {};
struct button acc_ow_x = {};
struct button acc_gr_r = {};
struct button acc_gr_w = {};
struct button acc_gr_x = {};
struct button acc_wo_r = {};
struct button acc_wo_w = {};
struct button acc_wo_x = {};
struct button acc_su = {};
struct button acc_sg = {};
struct button acc_st = {};
struct bgroup acc_g_owner = {};
struct bgroup acc_g_group = {};
struct bgroup acc_g_world = {};
struct bgroup acc_g_special = {};
struct bbox access_buttons = {};
char *own_text1 = "Change owner/group of file %s";
char *own_text2 = "Change owner/group of all tagged files";
struct delem own_e_uid = {};
struct delem own_e_gid = {};
struct dial own_dialog = {};
char *own_err1 = "The %s name is unknown";
char *own_uname = "user";
char *own_gname = "group";
char *f_own_box[] = {};
char *f_print_box[] = {};
char *f_rm_text = "There are %d tagged Files";
char *f_rm_box[] = {};
char *f_rmi_text = "Delete file %s ?";
char *f_rmi_box[] = {};
char *f_re_box[] = {};
char *f_re1_box[] = {};
char *f_re2_box[] = {};
struct delem cp_e_fn = {};
struct delem cp_e_pn = {};
struct dial cp_dialog = {};
char *f_cp1_box[] = {};
char *f_cp2_txt = "File %s exists, overwrite ?";
char *f_cp2_box[] = {};
char *f_cp3_box[] = {};
char *f_show_box[] = {};
char *finfo_txt[] = {};
char *ftype_txt[] = {};
char *f_info_box[] = {};
char *f_select_box[] = {};
char *f_exec_box[] = {};
char *d_not_box[] = {};
char *d_nf_box[] = {};
char *f_nd_box[] = {};
char *d_cdu_box[] = {};
char *d_nous_box[] = {};
char *d_ncd_box[] = {};
char *d_nopath_box[] = {};
char *d_nrd_box[] = {};
char *d_cre_box[] = {};
char *d_cre1_box[] = {};
char *d_cre2_box[] = {};
char *d_rm_text = "Directory contains %d files and %d directories";
char *d_rm_box[] = {};
char *d_push_box[] = {};
char *d_pop_box[] = {};
char *lock1_box[] = {};
char *lock2_box[] = {};
struct delem top_delm = {};
struct delem cha_delm = {};
struct dial man_dialog = {};
char *ins_shell_box[] = {};
char *ins_editor_box[] = {};
char *ins_print_box[] = {};
char *ins_view_box[] = {};
char *ins_sav_box[] = {};
char *ins_menu_box[] = {};
char *ins_pdco_box[] = {};
char *ins_puld_box[] = {};
char *ins_dial_box[] = {};
struct delem pfkey_label = {};
struct delem pfkey_cmd = {};
struct dial pfk_dialog = {};
char *set_msg_box[] = {};
char *f_err1 = "Sorry, file %s can't be %s";
char *f_err2 = "moved";
char *f_err3 = "deleted";
char *f_err4 = "copied";
char *f_err5 = "renamed";
char *f_err6 = "changed";
char *f_err7 = "created";
char *sf_err_box[] = {};
char *tf_err_box[] = {};
char *ins_act_box[] = {};
LISTBOX fa_list_box = {};
/*
 *      vsh: functions called from the menus
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern char tmp[], tmp1[], tmp2[];
extern struct filelist files[];
extern int nfiles, afile;
extern chtype seattrib, pdcolor, pdattrib, meattrib;
extern char *malloc(), *calloc();
extern void free();
/*
 * -----------------------------------------
 *      FILE FUNCTIONS
 * -----------------------------------------
 */
/*
 *      select next file
 */
do_nline()
{
}
/*
 *      select previous file
 */
do_pline()
{
}
/*
 *      edit current file
 */
do_edit()
{
}
/*
 *      edit all tagged files
 */
do_tedit()
{
}
/*
 *      edit new file
 */
do_nedit()
{
}
/*
 *      view current file
 */
do_view()
{
}
/*
 *      view all tagged files
 */
do_tview()
{
}
/*
 *      guess and view type of file with the "file" command
 */
do_fshow()
{
}
/*
 *      show file informations
 */
do_finfo()
{
}
/*
 *      execute current file
 */
do_exec()
{
}
/*
 *	execute current file with arguments
 */
do_fexec()
{
}
/*
 *      copy current file
 */
do_fcopy()
{
}
/*
 *      copy all tagged files
 */
do_tfcopy()
{
}
/*
 *      move current file
 */
do_fmv()
{
}
/*
 *      move all tagged files
 */
do_tfmv()
{
}
/*
 *      rename current file/directory
 */
do_rename()
{
}
/*
 *      change permission of current file/directory
 */
do_access()
{
}
/*
 *      change permission of all tagged files
 */
do_taccess()
{
}
/*
 *	change group and owner of current file/directory
 */
do_chown()
{
}
/*
 *	change group and owner of all tagged files
 */
do_tchown()
{
}
/*
 *      print file, use configurated print spooler
 */
do_print()
{
}
/*
 *      print all tagged files, use configurated print spooler
 */
do_tprint()
{
}
/*
 *      remove file
 */
do_frm()
{
}
/*
 *      remove all tagged files
 */
do_frmt()
{
}
/*
 *      interactive remove all tagged files
 */
do_frmti()
{
}
/*
 *      touch current file
 */
do_touch()
{
}
/*
 *      touch all tagged files
 */
do_ttouch()
{
}
/*
 *      switch tagg flag of current file
 */
do_tag()
{
}
/*
 *      tagg all files
 */
do_tagall()
{
}
/*
 *      untagg all files
 */
do_untagall()
{
}
/*
 *	tagg all files which matches a pattern
 */
do_fselect()
{
}
/*
 * -----------------------------------------
 *      DIRECTORY FUNCTIONS
 * ----------------------------------------
 */
/*
 *      change directory
 */
do_cd()
{
}
/*
 *      change to HOME directory of a user
 */
do_cduhome()
{
}
/*
 *      push current directory on to directory stack
 */
do_pushdir()
{
}
/*
 *      pop directory from top of directory stack and change to it
 */
do_popdir()
{
}
/*
 *      switch between current directory and directory on top of stack
 */
do_switchdir()
{
}
/*
 *      copy directory
 */
do_dcopy()
{
}
/*
 *      create a new directory
 */
do_dcreate()
{
}
/*
 *      remove a directory
 */
do_drm()
{
}
/*
 * -----------------------------------------
 *      OPTION-FUNCTIONS
 * -----------------------------------------
 */
/*
 *      execute a command from the command line
 */
do_cmd()
{
}
/*
 *      call a sub-shell
 */
do_shell()
{
}
/*
 *      lock terminal
 */
do_lock()
{
}
/*
 *	configurate permission for receiving of messages
 */
do_msg()
{
}
/*
 *	show an entry from the online manual
 */
do_man()
{
}
/*
 * -----------------------------------------
 *      INSTALL-FUNCTIONS
 * -----------------------------------------
 */
/*
 *      install display attributes
 */
do_insdis()
{
}
/*
 *      install function keys
 */
do_inskey()
{
}
/*
 *	install file actions
 */
do_insact()
{
}
/*
 *      vsh: help functions
 *
 *      Copyright (c) 1992-93 by Udo Munk
 */
extern chtype seattrib;
do_copyright()
{
}
/*
 *      vsh: several subroutines
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern char tmp[], tmp1[], tmp2[];
extern struct filelist files[];
extern int nfiles, afile;
extern chtype seattrib, pdattrib, meattrib;
/*
 *      copy a single file
 */
cp_file(s, d)
char *s, *d;
{
}
/*
 *      move a single file
 */
mv_file(s, d)
char *s, *d;
{
}
/*
 *      put file permissions into struct for the button box
 */
put_rights(flp)
register struct filelist *flp;
{
}
/*
 *      create file permissions from the button box struct
 */
get_rights()
{
}
/*
 *	dialog for changeing of owner and group of files/directorys
 */
own_dial(file, pw, gr)
struct filelist *file;
struct passwd **pw;
struct group **gr;
{
}
/*
 *	show error box if action for file can't be done
 */
sf_error(s, n)
char *s;
register int n;
{
}
/*
 *	dialog with error message, if the action for
 *	one tagged file can't be done
 */
tf_error(s, n)
char *s;
register int n;
{
}
/*
 *      function to get previous/next line from command history
 */
get_hist_entry(direction, buf)
int direction;
char *buf;
{
}
/*
 *      execute a command from a function key
 */
do_fnkey(s)
char *s;
{
}
/*
 *      change to another directory
 */
cd_dir(path)
char *path;
{
}
/*
 *	substitute string s, result is stored in tmp
 *      $<name> - is substituted by environment variable, if present
 *      %F      - is substituted by current file-/directory name
 */
subst(s)
register char *s;
{
}
/*
 *      allocate memory for the file list
 */
alloc_flist()
{
}
/*
 *      vsh: security and copy protection functions
 *
 *      Copyright (c) 1992-93 by Udo Munk
 */
static struct flock lock = {};
/*
 *	check the copy protection mechanisms
 */
check_copy()
{
}
/*
 *	decrement number of running vsh's in the lockfile
 */
remove_vsh()
{
}
/*
 *      vsh: system functions
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern void qsort();
static char **argv;			/* argument vector for execvp */
static int argc;			/* number used entrys in argv */
static int sarg;			/* number available entrys in argv */
/*
 *	read all entrys from directory name and put them sorted
 *	into the file list fl
 */
get_files(fl, name, max)
struct filelist *fl;
char *name;
int max;
{
}
/*
 *	read directory fn and count number of files in to nf
 *	and number of directorys in to nd
 */
num_files(fn, nf, nd)
char *fn;
int *nf, *nd;
{
}
/*
 *	read all entrys from directory name and put them sorted
 *	into the file list fl
 */
get_files(fl, name, max)
struct filelist *fl;
char *name;
int max;
{
}
/*
 *	read directory fn and count number of files in to nf
 *	and number of directorys in to nd
 */
num_files(fn, nf, nd)
char *fn;
int *nf, *nd;
{
}
/*
 *      sub-routine for qsort to sort the directory and file names
 */
static int cmp(p1, p2)
struct filelist *p1, *p2;
{
}
/*
 *	compute size of all files in file list flp
 */
long size_files(flp, count)
register struct filelist *flp;
register int count;
{
}
/*
 *	compute size of all tagged files in file list flp
 */
long size_tfiles(flp, count)
register struct filelist *flp;
register int count;
{
}
/*
 *	reduce a string containing a path to lenght l and
 *	return a pointer to the new string
 */
char *reduce_path(fn, l)
char *fn;
int l;
{
}
/*
 *      output a message, flush input and wait for a key hit
 */
int waitkey()
{
}
/*
 *	fork a new process, exec shell in the child and
 *	execute a command with the shell
 */
callsh(cmd)
char *cmd;
{
}
/*
 *	create a new process and execute command with arguments
 */
callsystem(cmd, ioflag)
char *cmd;
int ioflag;
{
}
/*
 *	add one argument to the argument array
 */
add_arg(arg)
char *arg;
{
}	
/*
 *	build argument array from a string
 */
char *build_arg(s)
register char *s;
{
}
/*
 *	free memory of argument array
 */
free_arg()
{
}
/*
 *	check if a command needs a shell to execute
 */
check_for_sh(s)
register char *s;
{
}
/*
 *      Display a box with buttons and edit the buttons
 *
 *      Copyright (c) 1990-93 Udo Munk
 */
extern WINDOW *open_window();
extern int close_window();
button_box(bp)
struct bbox *bp;
{
}
/*
 *      Close all windows and free memory
 *
 *      Copyright (c) 1991-93 by Udo Munk
 */
extern W_LIST *wl;
extern int close_window();
close_all_windows()
{
}
/*
 *	Close one window, free memory and update remaining windows
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern W_LIST *wl;
extern void free();
close_window(w)
WINDOW *w;
{
}
/*
 *	Clear screen using terminfo
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
clrscr()
{
}
/*
 *      Use window without a box and enter a command line
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern WINDOW *open_window();
extern int edit_field(), close_window();
cmd_box(s, fn)
char *s;
int (*fn) ();
{}
/*
 *	Switch cursor on/off using terminfo
 *
 *      Copyright (c) 1991-93 by Udo Munk
 */
int cursor_status = 1;
cursoroff()
{
}
cursoron()
{
}
/*
 *      Create a dialog box and edit the fields
 *
 *      Copyright (c) 1991-93 Udo Munk
 */
extern WINDOW *open_window();
extern int close_window();
extern int tab_active;
dialog_box(bp)
struct dial *bp;
{
}
/*
 *	Output edit box and edit input field
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
 
extern WINDOW *open_window();
extern int close_window();
extern int edit_field();
edit_box(t, s, n, e, fn)
char *t[], *s;
int n, e;
int (*fn) ();
{}
/*
 *      Editor for input fields
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern int tab_active;
edit_field(w, y, x, s, l, e, fn)
WINDOW *w;
char *s;
int x, y, l, e;
int (*fn) ();
{}
/*
 *      redraw input
 */
static redraw_field(w, y, x, s, l, e)
WINDOW *w;
char *s;
int x, y, l, e;
{
}
/*
 *	Initialize the windows system
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern char *malloc();
extern void free();
chtype ul_corner, ur_corner, ll_corner, lr_corner, r_tee, l_tee, b_tee, t_tee,
       h_line, v_line, u_arrow, d_arrow, checkboard, fullboard;
W_LIST *wl = (W_LIST *) 0;
int tab_active = 0;
initwin(tflag, eflag, lin, col, errmsg)
int tflag;
int lin, col;
char *errmsg;
{
}
static int sigwinch_handler()
{
}
/*
 *	Output list box and edit the list
 *
 *      Copyright (c) 1993 by Udo Munk
 */
 
extern WINDOW *open_window();
extern SCROLLBAR *create_scrollbar();
extern int edit_field();
extern char *malloc();
static int cur_pos;	/* current position in list */
list_box(box, list, entrys)
LISTBOX *box;
char *list[];
int entrys;
{
}
/*
 *	Write the list from position pos into the list window
 */
static write_list(box, list, entrys, pos)
LISTBOX *box;
char *list[];
int entrys, pos;
{
}
/*
 *	Move cursor one position down in list
 */
static cursor_down(box, list, entrys)
LISTBOX *box;
char *list[];
int entrys;
{
}
/*
 *	Move cursor one position up in list
 */
static cursor_up(box, list, entrys)
LISTBOX *box;
char *list[];
int entrys;
{
}
/*
 *	Move cursor to next page in list
 */
static page_down(box, list, entrys)
LISTBOX *box;
char *list[];
int entrys;
{
}
/*
 *	Move cursor to previous page in list
 */
static page_up(box, list, entrys)
LISTBOX *box;
char *list[];
int entrys;
{
}
/*
 *	Edit the current line of the list
 */
static edit_line(box, list)
LISTBOX *box;
char *list[];
{
}
/*
 *	Insert a new empty line after the current one
 */
static insert_line(box, list, entrys)
LISTBOX *box;
char *list[];
int entrys;
{
}
/*
 *	Delete the current line from the list
 */
static delete_line(box, list, entrys)
LISTBOX *box;
char *list[];
int entrys;
{
}
/*
 *	Move the slider for the list to the right position
 */
static slider(box, list, entrys)
LISTBOX *box;
char *list[];
int entrys;
{
}
/*
 *      PANIC: out of memory
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
nomem()
{
}
/*
 *      Open a new window
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern char	*malloc();
extern W_LIST	*wl;
WINDOW *open_window(nlines, ncols, begin_y, begin_x)
int nlines, ncols, begin_y, begin_x;
{
}
/*
 *	Output an pulldown menu and select one option
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern WINDOW *open_window();
extern int close_window();
 
static int inp;
pulldown_menu(b, y, x, attr, color)
struct menu *b;
int x, y;
chtype attr, color;
{
}
/*
 *      output options of pulldown menu
 */
static menu_options(w, l, s, n, a, attr, color)
WINDOW *w;
struct menu *s;
int l, n, a;
chtype attr, color;
{
}
/*
 *      Functions for programmable function keys
 *
 *      Copyright (c) 1993 by Udo Munk
 */
struct pfkey pfkeys[9];                   /* function keys */
/*
 *      display the function key lables in last line
 */
print_pfkeys()
{
}
/*
 *      Refresh all active windows
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern W_LIST *wl;
refreshall()
{
}
/*
 *      Functions for scrollbars
 *
 *      Copyright (c) 1992-93 by Udo Munk
 */
extern WINDOW *open_window();
extern void free();
SCROLLBAR *create_scrollbar(y, x, s)
int x, y, s;
{
}
remove_scrollbar(p)
SCROLLBAR *p;
{
}
update_slider(s, n, p)
SCROLLBAR *s;
int n, p;
{
}
/*
 *      Output a select box and select one option
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
extern WINDOW *open_window();
extern int close_window();
select_box(b, opt, attr)
char *b[];
int opt;
chtype attr;
{
}
/*
 *      output options in to the box
 */
static dialog_options(w, y, x, s, o, a, attr)
WINDOW *w;
char *s[];
int y, x, o, a;
chtype attr;
{
}
/*
 *	Escape from curses to execute an external command
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
shell_escape()
{
}
/*
 *	Return from an external command to curses
 *
 *      Copyright (c) 1990-93 by Udo Munk
 */
shell_return()
{
}
@
