head     1.12;
branch   ;
access   ;
symbols  ;
locks    bin:1.12; strict;
comment  @ * @;


1.12
date     93.04.12.14.13.55;  author bin;  state Exp;
branches ;
next     1.11;

1.11
date     93.03.18.13.27.38;  author bin;  state Exp;
branches ;
next     1.10;

1.10
date     93.03.03.09.45.16;  author bin;  state Exp;
branches ;
next     1.9;

1.9
date     93.02.02.18.16.20;  author bin;  state Exp;
branches ;
next     1.8;

1.8
date     93.01.06.09.24.22;  author bin;  state Exp;
branches ;
next     1.7;

1.7
date     92.11.13.15.40.08;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     92.09.02.09.37.46;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     92.06.02.12.05.26;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.06.02.11.45.14;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.05.12.13.33.29;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.04.13.14.38.12;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.03.26.11.43.56;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.12
log
@Udo: third color update
@
text
@/*********************************************************************
*                         COPYRIGHT NOTICE                           *
**********************************************************************
*        This software is copyright (C) 1982 by Pavel Curtis         *
*                                                                    *
*        Permission is granted to reproduce and distribute           *
*        this file by any means so long as no fee is charged         *
*        above a nominal handling fee and so long as this            *
*        notice is always included in the copies.                    *
*                                                                    *
*        Other rights are reserved except as explicitly granted      *
*        by written permission of the author.                        *
*                Pavel Curtis                                        *
*                Computer Science Dept.                              *
*                405 Upson Hall                                      *
*                Cornell University                                  *
*                Ithaca, NY 14853                                    *
*                                                                    *
*                Ph- (607) 256-4934                                  *
*                                                                    *
*                Pavel.Cornell@@Udel-Relay   (ARPAnet)                *
*                decvax!cornell!pavel       (UUCPnet)                *
*********************************************************************/

/*
**	lib_newwin.c
**
**	The routines newwin(), subwin() and their dependent
**
** $Log:	lib_newwin.c,v $
 * Revision 2.3  92/11/08  15:33:25  munk
 * Correct definition of calloc() and malloc()
 * and usage of cast operator
 *
 * Revision 1.5  92/06/02  12:05:26  bin
 * *** empty log message ***
 * 
 * Revision 1.2  92/04/13  14:38:12  bin
 * update by vlad
 * 
 * Revision 2.2  91/04/20  19:31:13  munk
 * Usage of register variables
 *
 * Revision 2.1  82/10/25  14:48:18  pavel
 * Added Copyright Notice
 * 
 * Revision 2.0  82/10/25  13:47:18  pavel
 * Beta-one Test Release
 * 
**
*/

#ifdef RCSHDR
static char RCSid[] =
	"$Header:   RCS/lib_newwin.v  Revision 2.3  92/11/08  15:46:35  munk   Exp$";
#endif

#include "term.h"
#include "curses.h"
#include "curses.priv.h"

char	*calloc(), *malloc();

static WINDOW	*makenew();


WINDOW *
newwin(num_lines, num_columns, begy, begx)
int	num_lines, num_columns, begy, begx;
{
	void		free();
	register WINDOW	*win;
	chtype		*ptr;
	register int	i, j;

#ifdef TRACE
	if (_tracing)
	    _tracef("newwin(%d,%d,%d,%d) called", num_lines, num_columns, begy, begx);
#endif

	if (!num_lines)
	    num_lines = lines - begy;

	if (!num_columns)
	    num_columns = columns - begx;

	if ((win = makenew(num_lines, num_columns, begy, begx)) == ERR)
	    return(ERR);

	for (i = 0; i < num_lines; i++)
	{
	    if ((win->_line[i] = (chtype *)calloc(num_columns, sizeof(chtype)))
								      == NULL)
	    {
		for (j = 0; j < i; j++)
		    free(win->_line[j]);

		free(win->_firstchar);
		free(win->_lastchar);
		free(win->_line);
		free(win);

		return(ERR);
	    }
	    else
		for (ptr = win->_line[i]; ptr < win->_line[i] + num_columns; )
		    *ptr++ = ' ';
	}

#ifdef TRACE
	if (_tracing)
	    _tracef("\tnewwin: returned window is %o", win);
#endif

	return(win);
}


WINDOW *
subwin(orig, num_lines, num_columns, begy, begx)
register WINDOW	*orig;
int	num_lines, num_columns, begy, begx;
{
	register WINDOW	*win;
	int		i, j, k;

#ifdef TRACE
	if (_tracing)
	    _tracef("subwin(%d,%d,%d,%d) called",
	    	 num_lines, num_columns, begy, begx);
#endif
	/* no negative displacments */
	if ((0 > (j = begy)) || (0 > (k = begx)))
		return(ERR);

	if (!num_lines)
	    num_lines = orig->_maxy - begy;

	if (!num_columns)
	    num_columns = orig->_maxx - begx;

	/* turn relative location to absolute location */
	begx += orig->_begx;
	begy += orig->_begy;

	/* more sanity checks */
	if ((0 > num_lines) || 
	    (0 > num_columns) ||
	    ((begy + num_lines) > (orig->_begy + orig->_maxy)) ||
	    ((begx + num_columns) > (orig->_begx + orig->_maxx)))
		return(ERR);

	if ((win = makenew(num_lines, num_columns, begy, begx)) == ERR)
	    return(ERR);

	for (i = 0; i < num_lines; i++)
	    win->_line[i] = &orig->_line[j++][k];

	win->_flags = _SUBWIN;

#ifdef TRACE
	if (_tracing)
	    _tracef("\tsubwin: returned window is %o", win);
#endif

	return(win);
}


static WINDOW *
makenew(num_lines, num_columns, begy, begx)
int	num_lines, num_columns, begy, begx;
{
	void		free();
	register int	i;
	register WINDOW	*win;

	if ((win = (WINDOW *) malloc(sizeof(WINDOW))) == NULL)
		return ERR;

	if ((win->_line = (chtype **) calloc(num_lines, sizeof (chtype *)))
								       == NULL)
	{
		free(win);

		return(ERR);
	}

	if ((win->_firstchar = (short *) calloc(num_lines, sizeof(short))) == NULL)
	{
		free(win->_line);
		free(win);

		return(ERR);
	}

	if ((win->_lastchar = (short *) calloc(num_lines, sizeof(short))) == NULL)
	{
		free(win->_firstchar);
		free(win->_line);
		free(win);

		return(ERR);
	}

	if ((win->_numchngd = (short *) calloc(num_lines, sizeof(short))) == NULL)
	{
		free(win->_lastchar);
		free(win->_firstchar);
		free(win->_line);
		free(win);

		return(ERR);
	}

	win->_curx       = 0;
	win->_cury       = 0;
	win->_maxy       = num_lines - 1;
	win->_maxx       = num_columns - 1;
	win->_begy       = begy;
	win->_begx       = begx;

	win->_flags      = 0;
	win->_attrs      = A_NORMAL;

	win->_clear      = (num_lines == lines  &&  num_columns == columns);
	win->_scroll     = FALSE;
	win->_leave      = FALSE;
	win->_use_keypad = FALSE;
	win->_use_meta   = FALSE;
	win->_nodelay    = FALSE;

	win->_regtop     = 0;
	win->_regbottom  = num_lines - 1;

	for (i = 0; i < num_lines; i++)
	{
	    win->_firstchar[i] = win->_lastchar[i] = _NOCHANGE;
	    win->_numchngd[i] = 0;
	}

	if (begx + num_columns == columns)
	{
		win->_flags |= _ENDLINE;

		if (begx == 0  &&  num_lines == lines  &&  begy == 0)
			win->_flags |= _FULLWIN;

		if (begy + num_lines == lines)
			win->_flags |= _SCROLLWIN;
	}

	return(win);
}
@


1.11
log
@Udo: 1st color update 3/18
@
text
@@


1.10
log
@udo: color code added
@
text
@@


1.9
log
@Udo update, added color code
@
text
@@


1.8
log
@vlad: update from Udo
@
text
@d71 1
d174 1
@


1.7
log
@cef update from Udo for pads and color.
@
text
@@


1.6
log
@caf: author of subwin() never considered what would happen if the base 
window was not stdscr even though that is in the docs. subwin() was
totally rewritten.
@
text
@d31 4
d53 5
d62 1
a62 4
short	*calloc();
#ifndef COHERENT
WINDOW	*malloc();
#endif
d66 1
a117 1

d120 1
a120 1
WINDOW	*orig;
d124 1
a124 2
	register int	i;
	int		j, k;
d128 2
a129 1
	    _tracef("subwin(%d,%d,%d,%d) called", num_lines, num_columns, begy, begx);
d141 1
a141 1
	/* absolute location */
d145 5
a149 1
	if ((0 > num_lines) || (0 > num_columns))
a150 6
	/*
	** make sure window fits inside the original one
	*/
	if (((begy + num_lines) > (orig->_begy + orig->_maxy)) ||
	    ((begx + num_columns) > (orig->_begx + orig->_maxx)))
		return(ERR);
d187 1
a187 1
	if ((win->_firstchar = calloc(num_lines, sizeof(short))) == NULL)
d195 1
a195 1
	if ((win->_lastchar = calloc(num_lines, sizeof(short))) == NULL)
d204 1
a204 1
	if ((win->_numchngd = calloc(num_lines, sizeof(short))) == NULL)
@


1.5
log
@*** empty log message ***
@
text
@d31 3
d73 1
a73 1
	if (num_lines == 0)
d76 1
a76 1
	if (num_columns == 0)
d84 1
a84 1
	    if ((win->_line[i] = (chtype *) calloc(num_columns, sizeof(chtype)))
d125 3
d129 12
d144 3
d148 1
a148 3
	if (begy < orig->_begy || begx < orig->_begx
			|| begy + num_lines > orig->_maxy
			|| begx + num_columns > orig->_maxx)
a150 12
	if (num_lines == 0)
	    num_lines = orig->_maxy - orig->_begy - begy;

	if (num_columns == 0)
	    num_columns = orig->_maxx - orig->_begx - begx;

	if ((win = makenew(num_lines, num_columns, begy, begx)) == ERR)
	    return(ERR);

	j = orig->_begy + begy;
	k = orig->_begx + begx;

@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@updates by cef
@
text
@@


1.2
log
@update by vlad
@
text
@d30 4
a33 1
** $Log:	RCS/lib_newwin.v $
a56 1

a157 1

d178 1
a179 1
		free(win->_line);
d186 2
a188 2
		free(win->_line);
		free(win->_firstchar);
d195 3
a198 3
		free(win->_line);
		free(win->_firstchar);
		free(win->_lastchar);
@


1.1
log
@Initial revision
@
text
@@
