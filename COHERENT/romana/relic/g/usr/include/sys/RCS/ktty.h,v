head     1.7;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.7
date     93.08.10.13.29.31;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     93.07.16.10.20.36;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     93.03.02.07.50.37;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.12.01.01.28.29;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.11.23.09.30.47;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.11.13.11.24.07;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.31.16.07.18;  author root;  state Exp;
branches ;
next     ;


desc
@@


1.7
log
@Kernel 82 header update
@
text
@/*
 * Kernel portion of typewriter structure.
 */
#ifndef	 __SYS_KTTY_H__
#define	 __SYS_KTTY_H__

#include <common/feature.h>
#include <kernel/timeout.h>
#include <sys/types.h>
#include <sys/poll.h>
#include <sys/clist.h>
#include <sgtty.h>
#if	_I386
#include <termio.h>
#endif

#define	NCIB	256		/* Input buffer */
#define	OHILIM	128		/* Output buffer hi water mark */
#define	OLOLIM	40		/* Output buffer lo water mark */
#define	IHILIM	512		/* Input buffer hi water mark */
#define	ILOLIM	40		/* Input buffer lo water mark */
#define	ITSLIM	(IHILIM-(IHILIM/4))	/* Input buffer tandem stop mark */
#define	ESC	'\\'		/* Some characters */

typedef struct tty {
	CQUEUE	t_oq;		/* Output queue */
	CQUEUE	t_iq;		/* Input queue */
	char	*t_ddp;		/* Device specific */
	int	(*t_start)();	/* Start function */
	int	(*t_param)();	/* Load parameters function */
	char	t_dispeed;	/* Default input speed */
	char	t_dospeed;	/* Default output speed */
	int	t_open;		/* Open count */
	int	t_flags;	/* Flags */
	char	t_nfill;	/* Number of fill characters */
	char	t_fillb;	/* The fill character */
	int	t_ibx;		/* Input buffer index */
	char	t_ib[NCIB];	/* Input buffer */
	int	t_hpos;		/* Horizontal position */
	int	t_opos;		/* Original horizontal position */
	struct	sgttyb t_sgttyb;/* Stty/gtty information */
	struct	tchars t_tchars;/* Tchars information */
#if	_I386
	struct	termio t_termio;
#endif
	int	t_group;	/* Process group */
	int	t_escape;	/* Pending escape count */
	event_t t_ipolls;	/* List of input polls enabled on device */
	event_t t_opolls;	/* List of output polls enabled on device */
	TIM	t_rawtim;	/* Raw timing struct */
	int	t_cs_sel;	/* 0 for resident drivers, CS for loadable */
#if	_I386
	TIM	t_vtime;	/* VTIME timing struct */
	TIM	t_sbrk;		/* TCSBRK timing struct */
#endif
} TTY;

/*
 * Test macros for various conditions related to the terminal settings; the
 * tests are related to conditions at the granularity of the System V modes,
 * so for Coherent-286 the conditions are synthesized from the old V7 modes.
 */

#define	_IS_BREAK_CHAR(tp,c)	((tp)->t_tchars.t_brkc == (c))

/*
 * The following are not part of S5 sgtty.
 */

#define	_IS_RAW_INPUT_MODE(tp)	(((tp)->t_sgttyb.sg_flags & RAWIN) != 0)
#define	_IS_CRT_MODE(tp)	(((tp)->t_sgttyb.sg_flags & CRT) != 0)

#if	_I386

#define	_IS_EOF_CHAR(tp,c)	((tp)->t_termio.c_cc [VEOF] == (c))
#define	_IS_ERASE_CHAR(tp,c)	((tp)->t_termio.c_cc [VERASE] == (c))
#define	_IS_INTERRUPT_CHAR(tp,c) \
				((tp)->t_termio.c_cc [VINTR] == (c))
#define	_IS_KILL_CHAR(tp,c)	((tp)->t_termio.c_cc [VKILL] == (c))
#define	_IS_QUIT_CHAR(tp,c)	((tp)->t_termio.c_cc [VQUIT] == (c))
#define	_IS_START_CHAR(tp,c)	(CSTART == (c))
#define	_IS_STOP_CHAR(tp,c)	(CSTOP == (c))

#define	_IS_CANON_MODE(tp)	(((tp)->t_termio.c_lflag & ICANON) != 0)
#define	_IS_ECHO_MODE(tp)	(((tp)->t_termio.c_lflag & ECHO) != 0)
#define _IS_ICRNL_MODE(tp)	(((tp)->t_termio.c_iflag & ICRNL) != 0)
#define _IS_IGNCR_MODE(tp)	(((tp)->t_termio.c_iflag & IGNCR) != 0)
#define	_IS_ISIG_MODE(tp)	(((tp)->t_termio.c_lflag & ISIG) != 0)
#define	_IS_ISTRIP_MODE(tp)	(((tp)->t_termio.c_iflag & ISTRIP) != 0)
#define _IS_IXON_MODE(tp)	(((tp)->t_termio.c_iflag & IXON) != 0)
#define _IS_IXANY_MODE(tp)	(((tp)->t_termio.c_iflag & IXANY) != 0)
#define _IS_OCRNL_MODE(tp)	(((tp)->t_termio.c_oflag & OCRNL) != 0)
#define _IS_ONLCR_MODE(tp)	(((tp)->t_termio.c_oflag & ONLCR) != 0)
#define	_IS_RAW_OUT_MODE(tp)	(((tp)->t_termio.c_oflag & OPOST) == 0)
#define	_IS_TANDEM_MODE(tp)	(((tp)->t_termio.c_iflag & IXOFF) != 0)
#define	_IS_XTABS_MODE(tp)	(((tp)->t_termio.c_oflag & TABDLY) == TAB3)

#else	/* if ! _I386 */

#define	_IS_EOF_CHAR(tp,c)	((tp)->t_tchars.t_eofc == (c))
#define	_IS_INTRRUPT_CHAR(tp,c)	((tp)->t_tchars.t_intrc == (c))
#define	_IS_QUIT_CHAR(tp,c)	((tp)->t_tchars.t_quitc == (c))
#define	_IS_START_CHAR(tp,c)	((tp)->t_tchars.t_startc == (c))
#define	_IS_STOP_CHAR(tp,c)	((tp)->t_tchars.t_stopc == (c))
#define	_IS_ERASE_CHAR(tp,c)	(((tp)->t_sgttyb.sg_erase == (c))
#define	_IS_KILL_CHAR(tp,c)	(((tp)->t_sgttyb.sg_kill == (c))

#define	_IS_CANON_MODE(tp)	((tp)->t_sgttyb.sg_flags & \
				 (RAWIN | CBREAK)) == 0)
#define	_IS_ECHO_MODE(tp)	(((tp)->t_sgttyb.sg_flags & ECHO) != 0)
#define _IS_ICRNL_MODE(tp)	(((tp)->t_sgttyb.sg_flags & CRMOD) != 0)
#define _IS_IGNCR_MODE(tp)	0
#define	_IS_ISIG_MODE(tp)	(! _IS_RAW_INPUT_MODE (tp))
#define	_IS_ISTRIP_MODE(tp)	(! _IS_RAW_INPUT_MODE (tp))
#define _IS_IXON_MODE(tp)	(! _IS_RAW_INPUT_MODE (tp))
#define _IS_OCRNL_MODE(tp)	0
#define _IS_ONLCR_MODE(tp)	(((tp)->t_sgttyb.sg_flags & CRMOD) != 0)
#define	_IS_RAW_OUTPUT_MODE(tp)	(((tp)->t_sgttyb.sg_flags & RAWOUT) != 0)
#define	_IS_TANDEM_MODE(tp)	(((tp)->t_sgttyb.sg_flags & TANDEM) != 0)
#define	_IS_XTABS_MODE(tp)	(((tp)->t_sgttyb.sg_flags & XTABS) != 0)

#endif	/* ! _I386 */

#endif	/* ! defined (__SYS_KTTY_H__) */
@


1.6
log
@Kernel 79 w/streams
@
text
@a1 2
 * <sys/ktty.h>
 *
a2 2
 *
 * Revised: Mon Jul 12 06:29:59 1993 CDT
d8 1
a15 1
#include <sys/timeout.h>
@


1.5
log
@hal: newupdates for kernel 73, several
changes by Nigel for __COHERENT__
@
text
@d2 2
d5 2
d11 1
d13 1
a13 1
#include <poll.h>
d16 1
a16 1
#ifdef _I386
d47 1
a47 1
#ifdef _I386
d56 1
a56 1
#ifdef _I386
d63 3
a65 5
 * Test macros.
 * Assume `tp' holds a TTY pointer.
 *	  `c'  a character.
 * Be very careful if you work on the
 * tty driver that this is true.
a66 3
#define	ISBRK	(tp->t_tchars.t_brkc   == c)
#define	stopc	(tp->t_tchars.t_stopc)
#define	startc	(tp->t_tchars.t_startc)
d68 2
a72 2
#define	ISRIN	(tp->t_sgttyb.sg_flags&RAWIN)
#define	ISCRT	(tp->t_sgttyb.sg_flags&CRT)
d74 2
a75 1
#if _I386
d77 1
a77 7
#define	ISEOF	(tp->t_termio.c_cc[VEOF]   == c)
#define	ISERASE	(tp->t_termio.c_cc[VERASE] == c)
#define	ISINTR	(tp->t_termio.c_cc[VINTR]  == c)
#define	ISKILL	(tp->t_termio.c_cc[VKILL]  == c)
#define	ISQUIT	(tp->t_termio.c_cc[VQUIT]  == c)
#define	ISSTART	(CSTART == c)
#define	ISSTOP	(CSTOP == c)
d79 7
a85 14
#define	ISBBYB	((tp->t_termio.c_lflag & ICANON) == 0)
#define	ISCBRK	((tp->t_termio.c_lflag & ICANON) == 0)
#define	ISECHO	(tp->t_termio.c_lflag & ECHO)
#define ISICRNL	(tp->t_termio.c_iflag & ICRNL)
#define ISIGNCR	(tp->t_termio.c_iflag & IGNCR)
#define	ISISIG	(tp->t_termio.c_lflag & ISIG)
#define	ISISTRIP (tp->t_termio.c_iflag & ISTRIP)
#define ISIXON	(tp->t_termio.c_iflag & IXON)
#define ISIXANY	(tp->t_termio.c_iflag & IXANY)
#define ISOCRNL	(tp->t_termio.c_oflag & OCRNL)
#define ISONLCR	(tp->t_termio.c_oflag & ONLCR)
#define	ISROUT	((tp->t_termio.c_oflag & OPOST) == 0)
#define	ISTAND	(tp->t_termio.c_iflag & IXOFF)
#define	ISXTABS	((tp->t_termio.c_oflag & TABDLY) == TAB3)
d86 1
a86 1

a86 2
#define ISXSTOP	(tp->t_flags & T_XSTOP)
#else
d88 13
a100 5
#define	ISEOF	(tp->t_tchars.t_eofc   == c)
#define	ISINTR	(tp->t_tchars.t_intrc  == c)
#define	ISQUIT	(tp->t_tchars.t_quitc  == c)
#define	ISSTART	(tp->t_tchars.t_startc == c)
#define	ISSTOP	(tp->t_tchars.t_stopc  == c)
d102 1
a102 15
#define	ISBBYB	(tp->t_sgttyb.sg_flags&(RAWIN|CBREAK))
#define	ISCBRK	(tp->t_sgttyb.sg_flags&CBREAK)
#define	ISECHO	(tp->t_sgttyb.sg_flags&ECHO)
#define	ISERASE	(tp->t_sgttyb.sg_erase == c)
#define ISICRNL	(tp->t_sgttyb.sg_flags&CRMOD)
#define ISIGNCR	0
#define	ISISIG	(!ISRIN)
#define	ISISTRIP (!ISRIN)
#define ISIXON	(!ISRIN)
#define	ISKILL	(tp->t_sgttyb.sg_kill  == c)
#define ISOCRNL	0
#define ISONLCR	(tp->t_sgttyb.sg_flags&CRMOD)
#define	ISROUT	(tp->t_sgttyb.sg_flags&RAWOUT)
#define	ISTAND	(tp->t_sgttyb.sg_flags&TANDEM)
#define	ISXTABS	(tp->t_sgttyb.sg_flags&XTABS)
d104 7
a110 1
#endif
d112 17
a128 1
#endif
@


1.4
log
@hal: support IXANY, kernel 70
@
text
@d4 3
a6 2
#ifndef	 KTTY_H
#define	 KTTY_H
@


1.3
log
@hal: kernel 69 update
@
text
@a63 2
#define	ISSTART	(tp->t_tchars.t_startc == c)
#define	ISSTOP	(tp->t_tchars.t_stopc  == c)
d80 2
d91 1
d96 1
a96 1
#define	ISXTABS	(tp->t_termio.c_oflag & XTABS)
d98 1
d104 2
@


1.2
log
@hal: kernel 68 update
@
text
@d50 4
d91 2
a92 1
#define ISONLCR	(tp->t_termio.c_iflag & ONLCR)
d113 1
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
#include <sys/poll.h>
a58 3
#define	ISINTR	(tp->t_tchars.t_intrc  == c)
#define	ISQUIT	(tp->t_tchars.t_quitc  == c)
#define	ISEOF	(tp->t_tchars.t_eofc   == c)
a61 5
#define	ISCRMOD	((tp->t_sgttyb.sg_flags&CRMOD) != 0)
#define	ISXTABS	((tp->t_sgttyb.sg_flags&XTABS) != 0)
#define	ISECHO	((tp->t_sgttyb.sg_flags&ECHO)  != 0)
#define	ISERASE	(tp->t_sgttyb.sg_erase == c)
#define	ISKILL	(tp->t_sgttyb.sg_kill  == c)
d68 2
a69 6
#define	ISRIN	((tp->t_sgttyb.sg_flags&RAWIN) != 0)
#define	ISROUT	((tp->t_sgttyb.sg_flags&RAWOUT)!= 0)
#define	ISCRT	((tp->t_sgttyb.sg_flags&CRT)   != 0)
#define	ISCBRK	((tp->t_sgttyb.sg_flags&CBREAK)!= 0)
#define	ISTAND	((tp->t_sgttyb.sg_flags&TANDEM)!= 0)
#define	ISBBYB	((tp->t_sgttyb.sg_flags&(RAWIN|CBREAK)) != 0)
d71 42
d114 2
@
