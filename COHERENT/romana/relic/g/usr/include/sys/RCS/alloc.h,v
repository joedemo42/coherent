head     1.4;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.4
date     93.07.16.19.22.05;  author root;  state Exp;
branches ;
next     1.3;

1.3
date     93.07.16.10.19.40;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     93.03.02.07.50.09;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.07.12.25.17;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Hal: 2nd try at r79
@
text
@/* (-lgl
 * 	COHERENT Version 3.0
 * 	Copyright (c) 1982, 1990 by Mark Williams Company.
 * 	All rights reserved. May not be copied without permission.
 -lgl) */
/*
 * Kernel memory allocator.
 */

#ifndef	 __SYS_ALLOC_H__
#define	 __SYS_ALLOC_H__

#include <common/feature.h>
#include <common/ccompat.h>
#include <common/__size.h>
#include <common/__parith.h>

#if	! __KERNEL__
# error	You must be compiling the kernel to use this header
#endif

#define	NEXT_FIT	1

/*
 * Structure for allocator.
 */

#if	NEXT_FIT

typedef	struct _heap	heap_t;

#else

typedef	__VOID__      *	heap_t;

#endif


__EXTERN_C_BEGIN__

heap_t	      *	setarena	__PROTO ((__VOID__ * _base, __size_t _size));
__VOID__      *	alloc		__PROTO ((heap_t * _arena, __size_t _size));

__EXTERN_C_END__

#endif	/* ! defined (__SYS_ALLOC_H__) */
@


1.3
log
@Kernel 79 w/streams
@
text
@d22 2
d28 1
a28 3
typedef union all_u {
	__ptr_arith_t	a_link;
} ALL;
d30 1
d32 7
d41 2
a42 2
ALL	      *	setarena	__PROTO ((__VOID__ * _base, __size_t _size));
__VOID__      *	alloc		__PROTO ((ALL * _arena, __size_t _size));
@


1.2
log
@hal: newupdates for kernel 73, several
changes by Nigel for __COHERENT__
@
text
@d7 1
a7 1
 * Allocator.
d9 1
d13 9
d25 3
a27 6
typedef struct all {
	union all_u {
		char	*au_link;
		char	au_free[2];
	}	a_union;
	char	a_data[];
a29 5
/*
 * Macros to transparently access allocator union.
 */
#define	a_link	a_union.au_link
#define	a_free	a_union.au_free
d31 1
a31 9
#if 0
/*
 * Portable defines for the allocator.
 */
#define align(p)	((ALL *)NULL + ((p) - (ALL *)NULL))
#define link(p)		(align((p)->a_link))
#define	tstfree(p)	((p)->a_link == (char *) link(p))
#define setfree(p)	((p)->a_link = (char *) link(p))
#define setused(p)	((p)->a_link = (char *) link(p) + 1)
d33 2
a34 1
#endif
d36 1
a36 6
#ifdef	KERNEL
/*
 * Functions and externals.
 */
extern	char	*alloc();
extern	ALL	*setarena();
d38 1
a38 3
#endif

#endif
@


1.1
log
@Initial revision
@
text
@d9 2
a10 2
#ifndef	 ALLOC_H
#define	 ALLOC_H
@
