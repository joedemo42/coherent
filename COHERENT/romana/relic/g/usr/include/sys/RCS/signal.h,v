head     1.2;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.2
date     93.07.16.19.23.37;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.31.16.07.25;  author root;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@Hal: 2nd try at r79
@
text
@#ifndef	__SYS_SIGNAL_H__
#define	__SYS_SIGNAL_H__

#include <common/feature.h>
#include <common/_signal.h>

/*
 * Signal numbers, to be used by DDI/DKI device drivers, as described in
 * signals(D5DK). The numeric values and additional commentary are taken from
 * the System V, Release 4 "Programmer's Reference Manual".
 *
 * If the values in this header are to be imported from <signal.h>, then the
 * signal-number constants are required to be macros expanding to positive
 * integral constants as per the ISO C standard (ISO/IEC 9989:1990).
 *
 * This header file should not be directly used by user-level code.
 */

#define	SIGHUP		1	/*
				 * Hangup: the device has been disconnected
				 * (DDI/DKI).
				 * Default action: terminate.
				 */
#define	SIGINT		2	/*
				 * Interrupt: the interrupt character has been
				 * received (DDI/DKI).
				 * Default action: terminate.
				 */
#define	SIGQUIT		3	/*
				 * Quit: the quit character has been received
				 * (DDI/DKI).
				 * Default action: terminate with core image.
				 */
#define	SIGILL		4	/*
				 * Illegal instruction.
				 * Default action: terminate with core image.
				 */
#define	SIGTRAP		5	/*
				 * Trace/Breakpoint trap.
				 * Default action: terminate with core image.
				 */
#define	SIGABRT		6	/*
				 * Abort.
				 * Default action: terminate with core image.
				 */
#define	SIGIOT		SIGABRT	/* Obsolete */
#define	SIGEMT		7	/*
				 * Emulation trap.
				 * Default action: terminate with core image.
				 */
#define	SIGFPE		8	/*
				 * Arithmetic exception.
				 * Default action: terminate with core image.
				 */
#define	SIGKILL		9	/*
				 * Kill. It is an error to request a non-
				 * default disposition for this signal. This
				 * signal cannot be blocked.
				 * Default action: terminate.
				 */
#define	SIGBUS		10	/*
				 * Bus error.
				 * Default action: terminate with core image.
				 */
#define	SIGSEGV		11	/*
				 * Segmentation violation.
				 * Default action: terminate with core image.
				 */
#define	SIGSYS		12	/*
				 * Bad system call.
				 * Default action: terminate with core image.
				 */
#define	SIGPIPE		13	/*
				 * Broken pipe. A write was attempted to a
				 * pipe with no readers.
				 * Default action: terminate.
				 */
#define	SIGALRM		14	/*
				 * Alarm timer expired.
				 * Default action: terminate.
				 */
#define	SIGTERM		15	/*
				 * Terminate.
				 * Default action: terminate.
				 */
#define	SIGUSR1		16	/*
				 * User signal 1.
				 * Default action: terminate.
				 */
#define	SIGUSR2		17	/*
				 * User signal 2.
				 * Default action: terminate.
				 */
#define	SIGCHLD		18	/*
				 * Child status changed.
				 * Default action: ignore.
				 */
#define	SIGCLD		SIGCHLD	/*
				 * Obsolete alias for SIGCHLD.
				 */
#define	SIGPWR		19	/*
				 * Power-failure/restart.
				 * Default action: ignore.
				 */
#define	SIGWINCH	20	/*
				 * Window size changed (DDI/DKI).
				 * Default action: ignore.
				 */
#define	SIGURG		21	/*
				 * Urgent data are available (DDI/DKI).
				 * Default action: ignore.
				 */
#define	SIGPOLL		22	/*
				 * Pollable event. A process must specifically
				 * register to receive this signal (DDI/DKI).
				 * Default action: terminate.
				 */
#define	SIGIO		SIGPOLL	/* Obsolete BSD brain damage */
#define	SIGSTOP		23	/*
				 * Stop. Discards pending SIGCONT.
				 * Default action: stop.
				 */
#define	SIGTSTP		24	/*
				 * Interactive stop. Discards pending SIGCONT.
				 * DDI/DKI character drivers must not send
				 * this signal.
				 * Default action: stop.
				 */
#define	SIGCONT		25	/*
				 * Continue. Dicards pending SIGSTOP, SIGTSTP,
				 * SIGTTIN, and SIGTTOU signals, and continues
				 * the process if it was stopped.
				 * Default action: ignore.
				 */
#define	SIGTTIN		26	/*
				 * Job control on input. Discards pending
				 * SIGCONT.
				 * Default action: stop.
				 */
#define	SIGTTOU		27	/*
				 * Job control on output. Discards pending
				 * SIGCONT.
				 * Default action: stop.
				 */
#define	SIGVTALARM	28	/*
				 * Virtual timer expired.
				 * Default action: terminate.
				 */
#define	SIGPROF		29	/*
				 * Profiling timer expired.
				 * Default action: terminate.
				 */
#define	SIGXCPU		30	/*
				 * CPU time limit exceeded.
				 * Default action: terminate with core image.
				 */
#define	SIGXFSZ		31	/*
				 * File size limit exceeded.
				 * Default action: terminate with core image.
				 */

#if	! _STDC_SOURCE && ! _POSIX_SOURCE
#define NSIG		_SIGNAL_MAX		/* Number of signals */
#endif

/*
 * Special arguments to signal.
 */

#define SIG_DFL		((__sigfunc_t) 0)	/* Default */
#define SIG_IGN		((__sigfunc_t) 1)	/* Ignore */

#if	! _STDC_SOURCE

#define SIG_ERR		((__sigfunc_t) -1)	/* Error */
#define SIG_HOLD	((__sigfunc_t) 2)	/* Hold */

#if	_SYSV4 && ! _SYSV3

typedef	n_sigset_t	sigset_t;

struct sigaction {
	int		sa_flags;
	__sigfunc_t	sa_handler;
	sigset_t	sa_mask;
	int		__NON_POSIX (sa_resv) [2];
};

#define	SA_NOCLDSTOP	((long) __SF_NOCLDSTOP) << 16)

#if	! _POSIX_SOURCE

#define	SA_ONSTACK	__SA_ONSTACK
#define	SA_RESETHAND	__SA_RESETHAND
#define	SA_RESTART	__SA_RESTART
#define	SA_SIGINFO	__SA_SIGINFO
#define	SA_NODEFER	__SA_NODEFER
#define	SA_NOCLDWAIT	((long) __SF_NOCLDWAIT << 16)

#endif

#else	/* ! _SYSV4 */

typedef	o_sigset_t	sigset_t;

struct sigaction {
	__sigfunc_t	sa_handler;
	sigset_t	sa_mask;
	int		sa_flags;
};

#define	SA_NOCLDSTOP		1

#endif	/* ! _SYSV4 */

/*
 * "how" flags for sigprocmask ()
 */

#define	SIG_SETMASK		0
#define	SIG_BLOCK		1
#define	SIG_UNBLOCK		2

#endif	/* ! _STDC_SOURCE */

#endif	/* ! defined (__SYS_SIGNAL_H__) */
@


1.1
log
@Initial revision
@
text
@d1 6
d8 3
a10 1
 * For the benefit of user programs.
d12 5
a16 1
 * /usr/include/sys/signal.h
d19 142
a160 2
#ifndef	 SIGNAL_H
#define	 SIGNAL_H	SIGNAL_H
d162 3
a164 23
#define SIGHUP	1			/* Hangup */
#define	SIGINT	2			/* Interrupt */
#define SIGQUIT	3			/* Quit */
#define SIGILL	4			/* Illegal instruction */
#define	SIGTRAP	5			/* Trace trap */	
#define SIGIOT	6			/* IOT instruction */
#define SIGABRT	6			/* replace by SIGIOT in the future */
#define	SIGEMT	7			/* emulator trap */
#define	SIGFPE	8			/* floating point exception */
#define SIGKILL	9			/* Kill */
#define	SIGBUS	10			/* bus error */
#define	SIGSEGV	11			/* Segmentation violation */
#define SIGSYS	12			/* Bad argument to system call */
#define	SIGPIPE	13			/* Write to pipe with no readers */
#define SIGALRM	14			/* Alarm */
#define SIGTERM	15			/* Software termination signal */
#define	SIGUSR1	16
#define	SIGUSR2	17
#define	SIGCLD	18			/* Death of a child - not done yet */
#define	SIGCHLD	18			/* Death of a child - not done yet */
#define SIGPWR	19			/* Restart */
#define	SIGWINCH 20			/* window change */
#define	SIGPOLL	22			/* polled event in stream */
a165 3
#define NSIG	23			/* Number of signals */
#define	MAXSIG	32

a168 4
#define SIG_DFL (void(*)())0		/* Default */
#define SIG_ERR (void(*)())-1		/* Error */
#define SIG_IGN (void(*)())1		/* Ignore */
#define SIG_HOLD (void(*)())2		/* Hold */
d170 2
a171 2
extern void	(*signal())();
extern void	(*sigset())();
d173 27
a199 7
#ifdef	KERNEL
#define	SIGDEFER	0x100
#define	SIGHOLD		0x200
#define	SIGRELSE	0x400
#define	SIGIGNORE	0x800
#define	SIGPAUSE	0x1000
#define	SIGDEFAULT	0x8000
d202 25
a226 1
#endif
@
