head     1.6;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.6
date     93.07.16.16.16.47;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     93.07.16.10.17.28;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     93.06.14.13.18.48;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     93.03.02.07.42.54;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.09.29.09.06.46;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.07.12.24.28;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@hal: 2nd kernel 79 go-around
@
text
@/*
 * /usr/include/signal.h
 *
 * COHERENT signal support.
 *
 * Revised: Wed May 12 07:56:47 1993 CDT
 */
#ifndef	 __SIGNAL_H__
#define	 __SIGNAL_H__

#include <common/feature.h>
#include <common/ccompat.h>
#include <common/__pid.h>

#if	_I386

#include <sys/signal.h>

typedef	long	sig_atomic_t;


__EXTERN_C_BEGIN__

__sigfunc_t	signal		__PROTO ((int _sig, __sigfunc_t _func));
int		raise		__PROTO ((int _sig));

#if	! _STDC_SOURCE

int		kill		__PROTO ((__pid_t _pid, int _sig));
int		sigaction	__PROTO ((int _sig,
					  __CONST__ struct sigaction * _act,
					  struct sigaction * _oact));
int		sigaddset	__PROTO ((sigset_t * _set, int _signo));
int		sigdelset	__PROTO ((sigset_t * _set, int _signo));
int		sigemptyset	__PROTO ((sigset_t * _set));
int		sigfillset	__PROTO ((sigset_t * _set));
int		sigismember	__PROTO ((__CONST__ sigset_t * _set,
					  int _signo));
int		sigpending	__PROTO ((sigset_t * _set));
int		sigprocmask	__PROTO ((int _how,
					  __CONST__ sigset_t * _set,
					  sigset_t * _oset));
int		sigsuspend	__PROTO ((__CONST__ sigset_t * _sigmask));

#if	_SYSV3

/*
 * Pre-SVR4 systems make these available as inlines. For us, this is optional
 * but still legal. For SVR4 systems, we require proper error checking. For
 * this to work, we depend on __SIGSET_UNIT (ss, n) not evaluating "n".
 */

#define	sigfillset(set)		((set)->_sigbits [0] = -1UL, 0)
#define	sigemptyset(set)	((set)->_sigbits [0] = 0)
#define	sigismember(set, signo)	((set)->_sigbits [0] & __SIGSET_MASK (signo))
#define sigaddset(set, signo)	((set)->_sigbits [0] |= \
					__SIGSET_MASK (signo), 0)
#define	sigdelset(set, signo)	((set)->_sigbits [0] &= \
					~ __SIGSET_MASK (signo), 0)

#endif	/* _SYSV3 */

#endif	/* ! _STDC_SOURCE */

__EXTERN_C_END__

#else	/* if ! _I386 */

#include <sys/msig.h>

#define SIGHUP	1			/* Hangup */
#define	SIGINT	2			/* Interrupt */
#define SIGQUIT	3			/* Quit */
#define SIGALRM	4			/* Alarm */
#define SIGTERM	5			/* Software termination signal */
#define SIGREST	6			/* Restart */
#define SIGSYS	7			/* Bad argument to system call */
#define	SIGPIPE	8			/* Write to pipe with no readers */
#define SIGKILL	9			/* Kill */
#define SIGTRAP	10			/* Breakpoint */
#define	SIGSEGV	11			/* Segmentation violation */

#endif	/* ! _I386 */

#endif	/* ! defined (__SIGNAL_H__) */
@


1.5
log
@Kernel 79 w/streams
@
text
@d45 18
@


1.4
log
@update by hal for ker 78
@
text
@d11 3
a13 3
#ifdef _I386
extern void	(*signal())();
extern void	(*sigset())();
d15 1
a15 23
#define SIGHUP	1			/* Hangup */
#define	SIGINT	2			/* Interrupt */
#define SIGQUIT	3			/* Quit */
#define SIGILL	4			/* Illegal instruction */
#define	SIGTRAP	5			/* Trace trap */	
#define SIGIOT	6			/* IOT instruction */
#define SIGABRT	6			/* replace by SIGIOT in the future */
#define	SIGEMT	7			/* emulator trap */
#define	SIGFPE	8			/* floating point exception */
#define SIGKILL	9			/* Kill */
#define	SIGBUS	10			/* bus error */
#define	SIGSEGV	11			/* Segmentation violation */
#define SIGSYS	12			/* Bad argument to system call */
#define	SIGPIPE	13			/* Write to pipe with no readers */
#define SIGALRM	14			/* Alarm */
#define SIGTERM	15			/* Software termination signal */
#define	SIGUSR1	16
#define	SIGUSR2	17
#define	SIGCLD	18			/* Death of a child */
#define	SIGCHLD	18			/* Death of a child - not done yet */
#define SIGPWR	19			/* Restart */
#define	SIGWINCH 20			/* window change */
#define	SIGPOLL	22			/* polled event in stream */
d17 1
a17 2
#define NSIG	23			/* Number of signals */
#define	MAXSIG	32
d19 1
a19 7
/*
 * Special arguments to signal.
 */
#define SIG_DFL (void(*)())0		/* Default */
#define SIG_ERR (void(*)())-1		/* Error */
#define SIG_IGN (void(*)())1		/* Ignore */
#define SIG_HOLD (void(*)())2		/* Hold */
a20 12
#ifdef	KERNEL
/*
 * According to iBCS2, signal() shares a system call number with
 * sigset(), sighold(), sigrelse(), sigignore(), and sigpause().
 * The latter are distinguished according to the high 16 bits of
 * the signal number, as below.
 */
#define	SIGSET		0x100
#define	SIGHOLD		0x200
#define	SIGRELSE	0x400
#define	SIGIGNORE	0x800
#define	SIGPAUSE	0x1000
d22 1
a22 2
#define SIG_BIT(signal)		(1 << ((signal) - 1))
#endif
d24 27
a50 1
#else
a63 1
#endif
d65 3
a67 1
#endif
@


1.3
log
@hal: newupdates for kernel 73, several
changes by nigel for __COHERENT__
@
text
@d3 4
d51 7
a57 1
#define	SIGDEFER	0x100
d62 2
a63 1
#define	SIGDEFAULT	0x8000
@


1.2
log
@updated with kernel 63 source
@
text
@d2 1
a2 1
 * For the benefit of user programmes.
d4 2
a5 2
#ifndef	 SIGNAL_H
#define	 SIGNAL_H	SIGNAL_H
d29 1
a29 1
#define	SIGCLD	18			/* Death of a child - not done yet */
@


1.1
log
@Initial revision
@
text
@a0 5
/* (-lgl
 * 	COHERENT Version 4.0
 * 	Copyright (c) 1982, 1992 by Mark Williams Company.
 * 	All rights reserved. May not be copied without permission.
 -lgl) */
@
