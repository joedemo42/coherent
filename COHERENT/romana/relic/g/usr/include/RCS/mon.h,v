head     1.7;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.7
date     93.07.16.10.17.15;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     93.03.11.08.41.36;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     93.03.02.07.42.48;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.09.29.08.51.39;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.08.12.07.25.28;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.07.17.09.59.18;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.07.12.24.21;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.7
log
@Kernel 79 w/streams
@
text
@/* (-lgl
 * 	COHERENT 386 Device Driver Kit release 2.0
 * 	Copyright (c) 1982, 1992 by Mark Williams Company.
 * 	All rights reserved. May not be copied without permission.
 -lgl) */

/*
 * mon.h
 * Program profiling (monitor) header.
 *
 * A call to monitor() creates a mon.out file structured as follows:
 *	header			struct m_hdr
 *	function count array	struct m_func[m_nfuncs]
 *	profil buffer		short[m_nbins]
 * The profil data scales the pc as follows:
 *	bin number = (pc - low pc) * (scale/2) / (1<<16)
 */

#ifndef	__MON_H__
#define	__MON_H__

#include <sys/types.h>
#include <common/_null.h>

struct	m_hdr	{
	unsigned short	m_nbins;	/* number of bins		*/
	unsigned short	m_scale;	/* scale factor			*/
	unsigned short	m_nfuncs;	/* number of function counts	*/
	caddr_t		m_lowpc;	/* lowest pc to monitor		*/
	caddr_t		m_lowsp;	/* lowest sp in scount		*/
	caddr_t		m_hisp;		/* highest sp in scount		*/
};

struct	m_func	{
	caddr_t		m_addr;		/* address in function		*/
	long		m_ncalls;	/* number of times function called */
};

/*
 * The C compiler allocates an m_flst structure for each function
 * compiled with the -VPROF option.
 */
struct	m_flst	{
	struct	m_func	m_data;		/* data on this function	*/
	struct	m_flst	*m_link;	/* link to next function in list */
};

#endif	/* ! defined (__MON_H__) */
@


1.6
log
@Hal: kernel 74 changes
@
text
@d23 1
a23 1
#include <sys/_null.h>
d48 1
a48 3
#endif

/* end of mon.h */
@


1.5
log
@hal: newupdates for kernel 73, several
changes by nigel for __COHERENT__
@
text
@d23 1
a24 4
#ifndef NULL
#define	NULL	((char *)0)
#endif

d29 3
a31 3
	vaddr_t		m_lowpc;	/* lowest pc to monitor		*/
	vaddr_t		m_lowsp;	/* lowest sp in scount		*/
	vaddr_t		m_hisp;		/* highest sp in scount		*/
d35 1
a35 1
	vaddr_t		m_addr;		/* address in function		*/
@


1.4
log
@updated with 63 kernel
@
text
@d2 1
a2 1
 * 	COHERENT Version 4.0
d6 1
d19 2
a20 2
#ifndef	_MON_H
#define	_MON_H
@


1.3
log
@update by stevesf
@
text
@d2 1
a2 1
 * 	COHERENT Version 4.0.1
@


1.2
log
@update by steve for profiling in 4.0
./
@
text
@d2 1
a2 1
 * 	COHERENT Version 4.0
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
 * 	COHERENT Version 3.2
 * 	Copyright (c) 1982, 1991 by Mark Williams Company.
d10 4
a13 5
 * The layout of the mon.out file created by a call to monitor is
 * as follows:
 *	header (m_hdr)
 *	function count buffer (array of m_funcs)
 *	profil buffer (array of shorts)
d18 2
a19 2
#ifndef	MON_H
#define	MON_H	MON_H
d27 7
a33 7
struct m_hdr {
	unsigned	m_nbins,	/* number of bins */
			m_scale,	/* scale factor */
			m_nfuncs;	/* number of function counts */
	vaddr_t		m_lowpc;	/* lowest pc to monitor */
	vaddr_t		m_lowsp;	/* lowest sp in scount */
	vaddr_t		m_hisp;		/* highest sp in scount */
d36 2
a37 2
struct m_func {
	vaddr_t		m_addr;		/* address in function */
d42 2
a43 2
 * The m_flst structure is allocated (by the C compiler) for every routine
 * compiled with the -p option.
d45 3
a47 3
struct m_flst {
	struct m_func	m_data;		/* data on this function */
	struct m_flst	*m_link;	/* link to next function in list */
@
