head     1.8;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.8
date     93.08.10.13.26.34;  author root;  state Exp;
branches ;
next     1.7;

1.7
date     93.07.16.10.17.31;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     93.03.02.07.42.56;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     93.02.15.11.56.21;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     93.02.08.10.24.00;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     93.01.27.09.14.57;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.09.01.09.31.49;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.07.12.24.31;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.8
log
@kernel 82 header update
@
text
@/* (-lgl
 * 	COHERENT Version 4.0.2
 * 	Copyright (c) 1982, 1993 by Mark Williams Company.
 * 	All rights reserved. May not be copied without permission.
 -lgl) */
/*
 * stdio.h
 * COHERENT Standard Input/Output library header.
 * ANSI C Standard, Section 4.9.
 */

#ifndef	__STDIO_H__
#define	__STDIO_H__

#include <common/feature.h>
#include <common/ccompat.h>
#include <common/__off.h>
#include <common/__valist.h>
#include <common/_size.h>
#include <common/_null.h>
#include <common/whence.h>

/* Macros. */
#define	BUFSIZ		512		/* default buffer size	*/
#define	EOF		(-1)		/* end of file		*/
#define	_EOFCHAR	26		/* ASCII EOF character	*/
#define	FILENAME_MAX	64		/* max filename length	*/
#define	FOPEN_MAX	_NFILE		/* max # of open files	*/
#define	_NFILE		60		/* number of FILEs	*/
#define	_NSTDFILE	3		/* number of predefined FILEs	*/
#define	L_tmpnam	64		/* tmpnam length	*/
#define	P_tmpdir	"/tmp"		/* default temporary directory */
#define	TMP_MAX		91		/* number of tmpnams	*/

/* Types. */
typedef long		fpos_t;		/* file position type	*/

/*
 * The order the first 5 FILE members corresponds to the order in iBCS2,
 * to allow a degree of binary compatability.
 */
typedef struct	FILE {
	int		_cc;		/* character count	*/
	unsigned char	*_cp;		/* current character	*/
	struct _FILE2	*_f2p;		/* more info		*/
	char		_ff1;		/* flags		*/
	char		_fd;		/* file descriptor	*/
	char		_ff2;		/* more flags; see below */
	char		_mode;		/* mode			*/
}	FILE;
/* These additional members are not in struct FILE for compatability reasons. */
typedef	struct	_FILE2 {
	int		(*_gt)();	/* getc function	*/
	int		(*_pt)();	/* putc function	*/
	unsigned char	*_bp;		/* start of buffer	*/
	unsigned char	*_dp;		/* start of data	*/
	unsigned char	*_ep;		/* end of buffer	*/
	char		*_nm;		/* temp file name	*/
	int		_uc;		/* ungot char		*/
}	_FILE2;

/* iBCS2 compatability. */
#define	_cnt	_cc
#define	_ptr	_cp
#define	_base	_f2p
#define	_flag	_ff1
#define	_file	_fd

/*
 * Standard FILEs. Technically, these definitions violate the user name-space,
 * but these names are required for iBCS2.
 */
extern	FILE	_iob[_NSTDFILE];
extern	FILE	*_fp[_NFILE];
#define	stdin	(&_iob[0])
#define	stdout	(&_iob[1])
#define	stderr	(&_iob[2])

/* _IO[FLN]BF are used for setvbuf() type args. */
#define	_IOFBF		0x00		/* fully buffered	*/
#define	_IONBF		0x04		/* unbuffered		*/
#define	_IOLBF		0x40		/* line buffered	*/

/* Flags in _ff1, cf. iBCS2. */
#define	_FEOF		0x10		/* end of file		*/
#define	_FERR		0x20		/* error		*/

/* Non-iBCS2 flags in _ff1. */
#define	_FRONLY		0x01		/* read only		*/
#define	_FWONLY		0x02		/* write only		*/
#define	_FRW		0x80		/* read and write	*/

/* Flags in _ff2, not in iBCS2. */
#define	_FINUSE		0x01		/* in use		*/
#define	_FAPPND		0x02		/* append		*/
#define _FASCII		0x04		/* ASCII		*/
#define	_FDONTC		0x08		/* do not close		*/
#define	_FFREEB		0x10		/* free buffer when closed	*/
#define	_FUNGOT		0x80		/* ungotten char present	*/

/* Mode field values. */
#define	_MODE_FBUF	0x01		/* fully buffered	*/
#define	_MODE_LBUF	0x02		/* line buffered	*/
#define	_MODE_NBUF	0x04		/* unbuffered		*/
#define	_MODE_STR	0x08		/* string		*/
#define	_MODE_UNINIT	0x10		/* uninitialized	*/

/* External declarations for non-conforming implementations. */
/* Standard functions. */

__EXTERN_C_BEGIN__

int		remove		__PROTO ((__CONST__ char * _filename));
int		rename		__PROTO ((__CONST__ char * _old,
					  __CONST__ char * _new));
FILE	      *	tmpfile		__PROTO ((void));
char	      *	tmpnam		__PROTO ((char * _s));
int		fclose		__PROTO ((FILE * _stream));
int		fflush		__PROTO ((FILE * _stream));
FILE	      *	fopen		__PROTO ((__CONST__ char * _filename,
					  __CONST__ char * _mode));
FILE	      *	freopen		__PROTO ((__CONST__ char * _filename,
					  __CONST__ char * _mode,
					  FILE * _stream));
void		setbuf		__PROTO ((FILE * _stream, char * _buf));
int		setvbuf		__PROTO ((FILE * _stream, char * _buf,
					  int _mode, size_t _size));
int		fprintf		__PROTO ((FILE * _stream,
					  __CONST__ char * _format, ...));
int		fscanf		__PROTO ((FILE * _stream,
					  __CONST__ char * _format, ...));
int		printf		__PROTO ((__CONST__ char * _format, ...));
int		scanf		__PROTO ((__CONST__ char * _format, ...));
int		sprintf		__PROTO ((char * _s,
					  __CONST__ char * _format, ...));
int		sscanf		__PROTO ((__CONST__ char * _s,
					  __CONST__ char * _format, ...));
int		vfprintf	__PROTO ((FILE * _stream,
					  __CONST__ char * _format,
					  __va_list arg));
int		vprintf		__PROTO ((__CONST__ char * _format,
					  __va_list arg));
int		vsprintf	__PROTO ((char * _s,
					  __CONST__ char * _format,
					  __va_list arg));
int		fgetc		__PROTO ((FILE * _stream));
char	      *	fgets		__PROTO ((char * _s, int _n, FILE * _stream));
int		fputc		__PROTO ((int _c, FILE * _stream));
int		fputs		__PROTO ((__CONST__ char * _s,
					  FILE * _stream));
int		getc		__PROTO ((FILE * stream));
int		getchar		__PROTO ((void));
char	      *	gets		__PROTO ((char * _s));
int		putc		__PROTO ((int _c, FILE * _stream));
int		putchar		__PROTO ((int _c));
int		puts		__PROTO ((__CONST__ char * _s));
int		ungetc		__PROTO ((int _c, FILE * _stream));
size_t		fread		__PROTO ((__VOID__ * _ptr, size_t _size,
					  size_t _nmemb, FILE * _stream));
size_t		fwrite		__PROTO ((__CONST__ __VOID__ * _ptr,
					  size_t _size, size_t _nmemb,
					  FILE * _stream));
int		fgetpos		__PROTO ((FILE * _stream, fpos_t * _pos));
int		fseek		__PROTO ((FILE * _stream, __off_t _offset,
					  int whence));
int		fsetpos		__PROTO ((FILE * _stream,
					  __CONST__ fpos_t * pos));
__off_t		ftell		__PROTO ((FILE * _stream));
void		rewind		__PROTO ((FILE * _stream));
void		clearerr	__PROTO ((void));
int		feof		__PROTO ((FILE * _stream));
int		ferror		__PROTO ((FILE * _stream));
void		perror		__PROTO ((__CONST__ char * _s));

#if	! _STDC_SOURCE

FILE	      *	fdopen		__PROTO ((int _fildes,
					  __CONST__ char * _type));
int		fileno		__PROTO ((FILE * _stream));

#if	! _POSIX_SOURCE

FILE	      *	popen		__PROTO ((__CONST__ char * _command,
					  __CONST__ char * _how));

#endif	/* ! _POSIX_SOURCE */
#endif	/* ! _STDC_SOURCE */

__EXTERN_C_END__

#if	0
/* Internal functions. */
extern	void	_dassign();
extern	int	_dscan	();
extern	char *	_dtefg	();
extern	void	_dtoa	();
extern	int	_fgetb	();
extern	int	_fgetc	();
extern	int	_fgete	();
extern	int	_fgetstr();
extern	int	_fginit	();
extern	int	_filbuf	();
extern	void	_finish	();
extern	int	_flsbuf	();
extern	FILE *	_fopen	();
extern	int	_fpinit	();
extern	int	_fpseek	();
extern	int	_fputa	();
extern	int	_fputb	();
extern	int	_fputc	();
extern	int	_fpute	();
extern	int	_fputt	();
extern	int	_scanf	();
extern	FILE *	_stropen();

#endif	/* not permitted in <stdio.h> */

/* Macros covering standard functions. */
#define	clearerr(fp)	((fp)->_ff1 &= ~(_FERR|_FEOF))
#define	feof(fp)	((fp)->_ff1 & _FEOF)
#define	ferror(fp)	((fp)->_ff1 & _FERR)
#define	getc(fp)	(--(fp)->_cc<0 ? ++(fp)->_cc,(*(fp)->_f2p->_gt)((fp)) \
				       : *(fp)->_cp++)
#define	getchar()	getc(stdin)
#define	putc(c,fp)	(--(fp)->_cc<0 ? ++(fp)->_cc,(*(fp)->_f2p->_pt)((c),(fp)) \
				       : (*(fp)->_cp++=(c)))
#define	putchar(c)	putc((c), stdout)

/* Other macros, non-ANSI. */
#define	fileno(fp)	((fp)->_fd)

#endif	/* ! defined (__STDIO_H__) */
@


1.7
log
@Kernel 79 w/streams
@
text
@d128 1
a128 1
void		fprintf		__PROTO ((FILE * _stream,
@


1.6
log
@hal: newupdates for kernel 73, several
changes by nigel for __COHERENT__
@
text
@d15 7
a21 3
#ifndef	NULL
#define	NULL	((char *)0)
#endif
a32 3
#define	SEEK_CUR	1		/* from current position */
#define	SEEK_END	2		/* from end		*/
#define	SEEK_SET	0		/* from beginning	*/
d37 1
a37 4
#ifndef	_SIZE_T
#define	_SIZE_T
typedef	unsigned int	size_t;		/* sizeof result type	*/
#endif
d69 4
a72 1
/* Standard FILEs. */
d83 1
d87 1
a109 41
extern	void	clearerr();		/* 4.9.10.1 */
extern	int	fclose	();		/* 4.9.5.1  */
extern	int	feof	();		/* 4.9.10.2 */
extern	int	ferror	();		/* 4.9.10.3 */
extern	int	fflush	();		/* 4.9.5.2  */
extern	int	fgetc	();		/* 4.9.7.1  */
extern	int	fgetpos	();		/* 4.9.9.1  */
extern	char *	fgets	();		/* 4.9.7.2  */
extern	FILE *	fopen	();		/* 4.9.5.3  */
extern	int	fprintf	();		/* 4.9.6.1  */
extern	int	fputc	();		/* 4.9.7.3  */
extern	int	fputs	();		/* 4.9.7.4  */
extern	size_t	fread	();		/* 4.9.8.1  */
extern	FILE *	freopen	();		/* 4.9.5.4  */
extern	int	fscanf	();		/* 4.9.6.2  */
extern	int	fseek	();		/* 4.9.9.2  */
extern	int	fsetpos	();		/* 4.9.9.3  */
extern long int	ftell	();		/* 4.9.9.4  */
extern	size_t	fwrite	();		/* 4.9.8.2  */
extern	int	getc	();		/* 4.9.7.5  */
extern	int	getchar	();		/* 4.9.7.6  */
extern	char *	gets	();		/* 4.9.7.7  */
extern	void	perror	();		/* 4.9.10.4 */
extern	int	printf	();		/* 4.9.6.3  */
extern	int	putc	();		/* 4.9.7.8  */
extern	int	putchar	();		/* 4.9.7.9  */
extern	int	puts	();		/* 4.9.7.10 */
extern	int	remove	();		/* 4.9.4.1  */
extern	int	rename	();		/* 4.9.4.2  */
extern	void	rewind	();		/* 4.9.9.5  */
extern	int	scanf	();		/* 4.9.6.4  */
extern	void	setbuf	();		/* 4.9.5.5  */
extern	int	setvbuf	();		/* 4.9.5.6  */
extern	int	sprintf	();		/* 4.9.6.5  */
extern	int	sscanf	();		/* 4.9.6.6  */
extern	FILE *	tmpfile	();		/* 4.9.4.3  */
extern	char *	tmpnam	();		/* 4.9.4.4  */
extern	int	ungetc	();		/* 4.9.7.11 */
extern	int	vfprintf();		/* 4.9.6.7  */
extern	int	vprintf	();		/* 4.9.6.8  */
extern	int	vsprintf();		/* 4.9.6.9  */
d111 81
d216 1
a216 3
/* Nonstandard functions. */
extern	FILE *	fdopen();
extern	FILE *	popen();
a230 1
#endif
d232 1
a232 1
/* end of stdio.h */
@


1.5
log
@norm: changes for _NULL for gcc release
@
text
@d3 1
a3 1
 * 	Copyright (c) 1982, 1992 by Mark Williams Company.
d12 2
a13 2
#ifndef	_STDIO_H
#define	_STDIO_H
d15 3
a17 1
#include <sys/_null.h>
@


1.4
log
@steve: added defines for *fdopen, *popen, added P_tempdir
@
text
@d15 1
a15 3
#ifndef	NULL
#define	NULL	((char *)0)
#endif
@


1.3
log
@steve: ansified for gcc
@
text
@d28 1
d173 4
@


1.2
log
@update by bob per hal, increased _NFILE to 60
@
text
@d2 2
a3 2
 * 	COHERENT Version 3.2
 * 	Copyright (c) 1982, 1991 by Mark Williams Company.
d8 2
a9 1
 * COHERENT Standard I/O library.
d12 2
a13 2
#ifndef	STDIO_H
#define	STDIO_H
a14 17
/* The FILE structure. */
typedef struct	FILE {
	unsigned char	*_cp,		/* current character ptr */
			*_dp,		/* ptr to start of data in buffer */
			*_bp;		/* buffer pointer */
	int	_cc;			/* character count */
	int	(*_gt)(),		/* getc function */
		(*_pt)();		/* putc function */
	char	_ff;			/* flags; see below */
	char	_fd;			/* file descriptor (reqd by reopen) */
	int	_uc;			/* ungot char */
}	FILE;

/* Manifest constants. */
#define	_NFILE	60
#define	BUFSIZ	(1<<9)
#define	EOF	(-1)
d19 13
a31 3
/* Definitions for System V-style tmpnam() and tempnam(). */
#define	L_tmpnam	64		/* Maximum length of temp file name */
#define	P_tmpdir	"/tmp"		/* Default temporary directory */
d33 37
a69 5
/* Origin arguments for fseek() and lseek(). */
#define	SEEK_SET	0		/* from beginning */
#define	SEEK_CUR	1		/* from current position */
#define	SEEK_END	2		/* from end */

d71 5
a75 4
extern	FILE	_stdin, _stdout, _stderr, *_fp[_NFILE];
#define	stdin	(&_stdin)
#define	stdout	(&_stdout)
#define	stderr	(&_stderr)
d77 11
a87 6
/* Flags in _ff. */
#define	_FINUSE	0x01
#define	_FSTBUF	0x02		/* setbuf was called */
#define	_FUNGOT	0x04		/* ungotten char present */
#define	_FEOF	0x40
#define	_FERR	0x80
d89 7
a95 12
/* Functions. */
FILE	*_stropen();
FILE	*fdopen();
char	*fgets();
FILE	*fopen();
FILE	*freopen();
long	ftell();
char	*gets();
char	*malloc();
FILE	*popen();
char	*sbrk();
void	setbuf();
d97 80
a176 7
/* Macros. */
#define	_ep(fp)		((fp)->_bp+BUFSIZ)
#define	clearerr(fp)	((fp)->_ff &= ~(_FERR|_FEOF))
#define	feof(fp)	((fp)->_ff&_FEOF)
#define	ferror(fp)	((fp)->_ff&_FERR)
#define	fileno(fp)	((fp)->_fd)
#define	getc(fp)	(++(fp)->_cc>0 ? --(fp)->_cc,(*(fp)->_gt)((fp)) \
d179 1
a179 1
#define	putc(c,fp)	(--(fp)->_cc<0 ? ++(fp)->_cc,(*(fp)->_pt)((c),(fp)) \
d181 1
a181 2
#define	putchar(c)	putc(c, stdout)
#define	wdleng()	(16)
d183 2
@


1.1
log
@Initial revision
@
text
@d28 1
a28 1
#define	_NFILE	20
@
