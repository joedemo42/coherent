head     2.0;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


2.0
date     93.07.16.19.59.33;  author bin;  state Exp;
branches ;
next     ;


desc
@@



2.0
log
@*** empty log message ***
@
text
@#if !defined(V_SLEEP)
#define    doscsi(r, n, m1, m1, m1, x)  doscsiX(r, n, x)
#endif
/***********************************************************************
 *  Module: ct.c
 *
 *  Unix device driver functions for accessing SCSI tape drives as
 *  character devices.  Conforms to Mark Williams Coherent definition
 *  of the Unix Device Driver interface for Coherent v4.0.1.
 *
 *  Copyright (c) 1993, Christopher Sean Hilton, All Rights Reserved.
 *
 *  Last Modified: Mon Jun  7 16:38:38 1993 by [chris]
 *  READ THIS  *  READ THIS  *  READ THIS  *  READ THIS  *  READ THIS  *
 *
 *  This module is set up for my tape drive, a Tandberg TDC 3600 which
 *  is an oddball so here's why things are set up the way they are.
 *  This driver is set up for the possiblility that the tape drive
 *  is in an external cabinet from the PC.  This means that the tape
 *  drive may not be turned on when Coherent comes up and runs through
 *  the init routines.  Thus the init routine only prints a message
 *  to the effect that the driver is here.  The open routine handles
 *  the details of initializing the tape drive.  My TDC 3600 automatically
 *  retensions the tape cartridge after the tape is loaded and whenever
 *  the drive is reset.  I've timed this process at about 160 seconds
 *  from start to finish.  That is why the open routine will wait for
 *  180 seconds testing the drive through the load/unload command with
 *  immediate return.  This brings up the important fact that tape drives
 *  in general are slow devices and can take a long time to
 *  complete operations.  During the time when a tape drive is busy
 *  handling some action the SCSI driver could be doing something
 *  else so use the immediate return options whenever possible.
 */

#include <stddef.h>
#include <sys/coherent.h>
#include <sys/buf.h>
#include <sys/file.h>
#include <sys/stat.h>
#include <sys/sched.h>
#include <errno.h>
#include <sys/mtioctl.h>

#include <sys/haiscsi.h>

#define TDC3600         /* Compensate for weirdness */
#define FIXED           /* Fixed block length reads/writes okay */
#define VARIABLE        /* Variable Block length reads/writes okay */
#define SHOWBLKSZ       /* Report blocksize on first open */

#define CTIDLE      0
#define CTINIT      1
#define CTIO        2
#define CTBLKIO     3
#define CTSENSE     4
#define CTWRITEFM   5
#define CTSPACE     6
#define CTREWIND    7
#define CTERASE     8
#define CTLOADRETEN 9

#define REWINDTAPE      0x01
#define     IMMEDIATE   0x0010
#define REQSENSE        0x03
#define READBLKLMT      0x05
#define READ            0x08
#define WRITE           0x0a
#define WRITEFM         0x10
#define SPACE           0x11
#define     SKIP_BLK    0x00
#define     SKIP_FM     0x01
#define     SKIP_SEQFM  0x02
#define     SKIP_EOT    0x03
#define MODESELECT      0x15
#define ERASE           0x19
#define     ERASE_BLOCK 0x0000
#define     ERASE_TAPE  0x0001
#define MODESENSE       0x1a
#define LOAD            0x1b
#define     RETENSION   0x0020

/***********************************************************************
 *  The Tandberg TDC3600 requires special handling because it doesn't
 *  respond properly to a write when the tape is at the logical end
 *  of tape.  Tape should be organized as follows:
 *
 *  File 1 --------------| File 2-m
 *  DATA[1] | ...DATA[n] | FILEMARK | DATA[1-n] | FILEMARK | FILEMARK |
 *
 *  The double file marks signify the Logical End of Tape.  When a
 *  tape opened in write mode is written to and then closed on the
 *  no rewind device it is necessary to write a Logical End of tape
 *  and then skip backwards over one of the filemarks.  This leaves
 *  the tape positioned between the two filemarks. When this happens
 *  on my Tandberg the drive will then lock up (nice huh?) and fail
 *  to do anything until the tape is rewound or retensioned.
 */


#define CTDIRTY         0x0001
#define CTCLOSING       0x0002

#define CTILI           0x0020      /* Sensekey's Illegal Length Indicator */
#define CTEOM           0x0040      /* Sensekey's End OF Media bit */
#define CTFILEMARK      0x0080      /* Sensekey's Filemark bit */
#define     CTSKMASK    (CTILI | CTEOM | CTFILEMARK)

#define CTRAWMODE       0x0100
#define CTBLKRD         0x0200
#define CTBLKWRT        0x0400
#define     CTMODEMASK  (CTRAWMODE | CTBLKRD | CTBLKWRT)
int CACHESIZE =         40 * BSIZE; /* 40 Block Cache for each device */

typedef struct blkdscr_s *blkdscr_p;

typedef struct blkdscr_s {
    union {
        unsigned char   mediatype;
        unsigned long   totalblocks;
    } mt;
    union {
        unsigned char reserved;
        unsigned long blocksize;
    } rb;
} blkdscr_t;

typedef struct ctctrl_s *ctctrl_p;

typedef struct ctctrl_s {
    BUF             *actf,      /* First Buffer */
                    *actl;      /* Last Buffer */
    char            *cache,     /* Transfer Cache */
                    *start;     /* Start of data in cache */
    size_t          count;      /* Count of bytes in cache */
    unsigned short  state,      /* State of device */
                    inuse,      /* In Use flag */
                    flags,      /* Flags from device */
                    block;      /* Block size of device */
    srb_t           srb;        /* SCSI Request block for transfers */
    BUF             buf;        /* A buffer for pseudo raw i/o */
} ctctrl_t;

static int ctinit();        /* Initialize a SCSI device at (id) */
static void ctopen();       /* Open SCSI tape at (dev) */
static void ctclose();      /* Close a SCSI tape at (dev) */
#ifdef FIXED
static void ctblock();      /* Block read/write */
#endif
static void ctread();       /* Read from SCSI tape at (dev) */
static void ctwrite();      /* Write SCSI tape at (dev) */
static void ctioctl();      /* I/O Control routine */
static void flushcache();   /* Flush the contents of the tape cache */

extern int nulldev();
extern int nonedev();

#define min(a, b)           ((a) < (b) ? (a) : (b))

#ifdef FIXED
dca_t ctdca = {
    ctopen,         /* Open */
    ctclose,        /* Close */
    ctblock,        /* Block */
    ctread,         /* Read */
    ctwrite,        /* Write */
    ctioctl,        /* Ioctl */
    ctinit,         /* Load */
    nulldev,        /* Unload */
    nulldev         /* Poll */
};
#else
dca_t ctdca = {
    ctopen,         /* Open */
    ctclose,        /* Close */
    nonedev,        /* Block No Block point here */
    ctread,         /* Read */
    ctwrite,        /* Write */
    ctioctl,        /* Ioctl */
    ctinit,         /* Load */
    nulldev,        /* Unload */
    nulldev         /* Poll */
};
#endif

static ctctrl_p     ctdevs[MAXDEVS];

/***********************************************************************
 *  Utility functions.                                                 *
 ***********************************************************************/

/***********************************************************************
 *  loadtape()
 *
 *  Move the tape to the load point.
 */

static int loadtape(c, opt)
register ctctrl_p c;
int opt;
{
    register srb_p      r = &(c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);

    c->state = CTLOADRETEN;
    r->buf. space = r->buf. addr. vaddr = r->buf. size = 0;
    r->xferdir = 0;
    r->timeout = 300;
    memset(g0, 0, sizeof(cdb_t));
    g0->opcode = LOAD;
    g0->xfr_len = 1;
    if (opt & IMMEDIATE)
        g0->lun_lba |= 1;
    if (opt & RETENSION)
        g0->xfr_len |= 2;
    doscsi(r, 4, CVTTIN, IVTTIN, SVTTIN, "loadtape");
    if (r->status != ST_GOOD && printerror(r, "Load failed"))
        u. u_error = EIO;

    c->state = CTIDLE;
    c->flags &= ~(CTFILEMARK | CTEOM);
    return (r->status == ST_GOOD);
}   /* loadtape() */

/***********************************************************************
 *  writefm()
 *
 *  Write Filemarks on the tape.
 */

static void writefm(c, count)
register ctctrl_p c;
int count;
{
    register srb_p      r = &(c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);

    c->state = CTWRITEFM;
    r->buf. space = r->buf. addr. vaddr = r->buf. size = 0;
    r->xferdir = 0;
    r->timeout = 40;
    g0->opcode = WRITEFM;
    g0->lun_lba = (r->lun << 5);
    g0->lba_mid = ((unsigned char *) &count)[2];
    g0->lba_low = ((unsigned char *) &count)[1];
    g0->xfr_len = ((unsigned char *) &count)[0];
    g0->control = 0;
    doscsi(r, 4, CVBLKIO, IVBLKIO, SVBLKIO, "writefm");
    if (r->status != ST_GOOD && printerror(r, "Write filemarks failed"))
        u. u_error = EIO;
    c->state = CTIDLE;
}   /* writefm() */

/***********************************************************************
 *  space()
 *
 *  Space over blocks/filemarks/etc.
 */

static void space(c, count, object)
register ctctrl_p c;
int count;
int object;
{
    register srb_p      r = &(c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);

    c->state = CTSPACE;
    r->buf. space = r->buf. addr. vaddr = r->buf. size = 0;
    r->xferdir = 0;
    r->timeout = 300;
    g0->opcode = SPACE;
    g0->lun_lba = (r->lun << 5) | (object & 3);
    g0->lba_mid = ((unsigned char *) &count)[2];
    g0->lba_low = ((unsigned char *) &count)[1];
    g0->xfr_len = ((unsigned char *) &count)[0];
    g0->control = 0;
    doscsi(r, 2, CVBLKIO, IVBLKIO, SVBLKIO, "space");
    if (r->status != ST_GOOD && printerror(r, "Space failed"))
        u. u_error = EIO;
    c->state = CTIDLE;
}   /* space() */

/***********************************************************************
 *  rewind()
 *
 *  Rewind the tape drive back to the load point.
 */

static void rewind(c, wait)
register ctctrl_p c;
int wait;
{
    register srb_p      r = &(c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);

    c->state = CTREWIND;
    r->buf. space = r->buf. addr. vaddr = r->buf. size = 0;
    r->timeout = 300;
    r->xferdir = 0;
    memset(g0, 0, sizeof(cdb_t));
    g0->opcode = REWINDTAPE;
    if (!wait)
        g0->lun_lba = (r->lun << 5) | 1;
    doscsi(r, 2, CVBLKIO, IVBLKIO, SVBLKIO, "rewind");
    if (r->status != ST_GOOD && printerror(r, "Rewind failed"))
        u. u_error = EIO;
    c->flags = 0;
    c->state = CTIDLE;
}   /* rewind() */

static void erase(c, to_eot)
register ctctrl_p c;
int to_eot;
{
    register srb_p      r = &(c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);

    c->state = CTERASE;
    r->buf. space = r->buf. addr. vaddr = r->buf. size = 0;
    r->timeout = 300;
    r->xferdir = 0;
    memset(g0, 0, sizeof(cdb_t));
    g0->opcode = ERASE;
    g0->lun_lba = (r->lun << 5);
    if (to_eot)
        g0->lun_lba |= 1;
    doscsi(r, 2, CVBLKIO, IVBLKIO, SVBLKIO, "erase");
    if (r->status != ST_GOOD && printerror(r, "Erase failed"))
        u. u_error = EIO;
    if (to_eot)
        c->flags &= ~(CTFILEMARK | CTEOM | CTILI | CTDIRTY);
    c->state = CTIDLE;
}   /* erase() */

/***********************************************************************
 *  Device Driver Entry Point routines.                                *
 ***********************************************************************/

/***********************************************************************
 *  ctinit()
 *
 *  Initialize the tape device at (id).  This doesn't do anything,
 *  not even verify that the drive is there because it could be powered
 *  off.
 */

static int ctinit(id)
register int id;
{
    register ctctrl_p c = kalloc(sizeof(ctctrl_t) /* + CACHESIZE */);

    if (!c) {
        printf("\tCould not allocate control structure.\n");
        return 0;
    }

    printf("\tCoherent SCSI Tape driver v1.0.0 beta\n");
    memset(c, 0, sizeof(ctctrl_t));
    c->inuse = 0;
    c->cache = NULL; /* ((char *) c) + sizeof(ctctrl_t); */
    c->srb. target = id;
    c->srb. lun = 0;
    c->state = CTIDLE;
    ctdevs[id] = c;
    return 1;
}

static void ctopen(dev, mode)
dev_t   dev;
int mode;
{
    register ctctrl_p   c = ctdevs[tid(dev)];
    register srb_p      r = &(c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);
    int s;
#if 0
#pragma align 1
    struct {
        unsigned long   max;
        unsigned short  min;
    } blim;
#pragma align
#else
    unsigned long blim;
#endif
    char buf[64];
    blkdscr_p   bd = (blkdscr_p) (buf + 4);

    if (!c) {
        u. u_error = ENXIO;
        return;
    }
    if ((mode != IPR) && (mode != IPW)) {
        u. u_error = EINVAL;
        return;
    }

    s = sphi();
    if (c->inuse) {
        u. u_error = EDBUSY;
        goto done;
    }
    c->inuse = 1;
    c->state = CTINIT;
    r->dev = dev;      /* Save the rewind bit for close. */

/***********************************************************************
 *  Repeat the test unit ready command to the tape drive.  This should
 *  return one of three ways:
 *
 *      Either there isn't a tape in the drive and the test unit ready
 *      will fail all the time: Sense Key 70 00 02 (Not Ready),
 *
 *      Or there is a tape in the drive and the user just put it in
 *      there: Sense Key 70 00 06 (Unit Attention - tape changed)
 *
 *      Or there is a tape in the drive and it's been in use for a
 *      used (No Sense Key data at all).
 *
 *      If there is a new tape in the drive then do the load command
 *      to make sure that it is ready to go.
 */

    r->timeout = 2;
    r->buf. space = r->buf. addr. vaddr = r->buf. size = 0;
    r->xferdir = 0;
    memset(g0, 0, sizeof(cdb_t));       /* Test Unit Ready */
    memset(r->sensebuf, 0, sizeof(r->sensebuf));
    doscsi(r, 4, CVTTIN, IVTTIN, SVTTIN, "ctopen");

/***********************************************************************
 *  If the command fails there probably wasn't a tape in the drive.
 */

    if (r->status != ST_GOOD) {
        if (r->status != ST_USRABRT)
            u. u_error = ENXIO;
        goto openfailed;
    }

/***********************************************************************
 *  Command Passed: check for sense data which would say that the tape
 *  was just loaded.  If it was then block here because it is very
 *  inconvienent to do so in the block routine.  (loadtape needs to
 *  use v_sleep).
 */

    else if (r->sensebuf[0] == 0x70 && r->sensebuf[2] == 0x06) {
        if (!loadtape(c, 0))
            goto openfailed;
    }

/***********************************************************************
 *  Read Block Limits to determine what kind of reads/writes to do.
 *  If we have a fixed block tape drive set the block size to the number
 *  of bytes per block and use that otherwise set the block size to
 *  0 through mode select.
 *
 * READ ME * READ ME * READ ME * READ ME * READ ME * READ ME * READ ME *
 *
 *  Implementation Notes:  This is the preferred way to determine if
 *  the Tape drive is capable of variable mode operation. On my Tandberg
 *  this is broken so I am using the result of the Mode Sense command
 *  and just leaving the tape drive in the default configuration.
 *  This should work for all tape drives but users will be stuck with
 *  the default media and the default block size (variable or fixed).
 *
 * READ ME * READ ME * READ ME * READ ME * READ ME * READ ME * READ ME *
 */

#ifndef TDC3600
    r->buf. space = KRNL_ADDR;
    r->buf. addr. vaddr = (caddr_t) &blim;
    r->buf. size = sizeof(blim);
    r->xferdir = DMAREAD;
    r->timeout = 2;
    memset(g0, 0, sizeof(cdb_t));
    g0->opcode = READBLKLM;
    doscsi(r, 3, CVTTIN, IVTTIN, SVTTIN, "ctopen");
    if (r->status != ST_GOOD) {
        if (printerror(r, "Read block limits failed"))
            u. u_error = EIO;
        goto openfailed;
    }
    flip(blim. max);
    flip(blim. min);
    if (blim. max == blim. min) {
        c->block = blim. max;
        CACHESIZE -= CACHESIZE % c->block;
    }
    else {
        c->block = 0;
        if (CACHESIZE > blim. max)
            CACHESIZE = blim.max;
    }
#endif

/***********************************************************************
 *  Do a mode sense right now to check if the tape is write protected
 *  and the user asked for write access.
 */

    r->buf. space = KRNL_ADDR;
    r->buf. addr. vaddr = (caddr_t) buf;
    r->buf. size = sizeof(buf);
    r->xferdir = DMAREAD;
    r->timeout = 2;
    memset(g0, 0, sizeof(cdb_t));
    g0->opcode = MODESENSE;
    g0->xfr_len = sizeof(buf);
    doscsi(r, 3, CVTTIN, IVTTIN, SVTTIN, "ctopen");
    if (r->status != ST_GOOD) {
        if (printerror(r, "Mode sense failed"))
            u. u_error = EIO;
        goto openfailed;
    }

/***********************************************************************
 *  If tape drive opened in write mode make sure the tape is not write
 *  protected now.
 */

    if (mode == IPW && (buf[2] & 0x80) != 0) {
        devmsg(dev, "Tape is write protected");
        u. u_error = ENXIO;
        goto openfailed;
    }

/***********************************************************************
 *  If mode sense returned any media descriptors take the first one
 *  and use it.  This should be the default media type.
 */

    if (buf[3]) {   /* If mode sense returned any media descriptors */
        blim = (bd->rb. blocksize & 0xffffff00);
        flip(blim);
        c->block = blim;
        if (CACHESIZE % c->block) {
            CACHESIZE -= (CACHESIZE % c->block);
            devmsg(r->dev, "Cachesize adjusted to %d bytes", CACHESIZE);
        }
    }
    else {
        u. u_error = ENXIO;
        goto openfailed;
    }
#ifdef SHOWBLKSZ
    devmsg(dev, "Using blocksize %d bytes", c->block);
#endif

/***********************************************************************
 *  Set the tape type up to the default and the tape writes to buffered
 *  mode.
 */

#if 0           /* Not until I get a better tape drive */
    memset(buf, 0, 12);
    buf[2] = (1 << 4);
    buf[3] = 8;
    r->buf. space = KRNL_ADDR;
    r->buf. addr. vaddr = (caddr_t) buf;
    r->buf. size = 12;
    r->xferdir = DMAWRITE;
    r->timeout = 2;
    memset(g0, 0, sizeof(cdb_t));
    g0->opcode = MODESELECT;
    g0->xfr_len = 4;
    doscsi(r, 3, CVTTIN, IVTTIN, SVTTIN, "ctopen");
    if (r->status != ST_GOOD) {
        if (printerror(r, "Mode select failed"))
            u. u_error = EIO;
        goto openfailed;
    }
#endif

    c->flags = 0;
    c->state = CTIDLE;
    goto done;

openfailed:
    c->state = CTIDLE;
    c->inuse = 0;

done:
    spl(s);
}   /* ctopen() */

/***********************************************************************
 *  ctclose()
 *
 *  Close the SCSI Device at (dev).
 */

static void ctclose(dev)
register dev_t  dev;
{
    register ctctrl_p   c = ctdevs[tid(dev)];
    register srb_p      r = &(c->srb);
    int                 s;

    if (!c) {
        u. u_error = EINVAL;
        return;
    }

#ifdef FIXED
    if (c->flags & CTBLKWRT) {
        s = sphi();
        c->flags |= CTCLOSING;
        flushcache(c);
        while (c->state != CTIDLE) {
#if defined(V_SLEEP)
            v_sleep(&(c->flags), CVBLKIO, IVBLKIO, SVBLKIO, "ctclose");
            if (nondsig()) {
                u. u_error = EINTR;
                break;
            }
#else
            if (x_sleep(&(c->flags), pritape, slpriSigCatch, "ctclose")) {
                u. u_error = EINTR;
                break;
            }
#endif
        }
        spl(s);
        if (c->cache) {
            kfree(c->cache);
            c->cache = c->start = NULL;
            c->count = 0;
        }
    }
#endif

#ifndef TDC3600
/*
 *  Write two filemarks (Logical End of Tape) and then skip backwards
 *  over one of them to ready for the another write operation on the
 *  no rewind device.  This code guarantees properly formed tapes according
 *  to the wisened old nine-track hacker that I work with.  The problem
 *  is that...
 */
    if (c->flags & CTDIRTY) {
        writefm(c, 1);         /* Write a file mark */
        writefm(c, 1);         /* Write another filemark */
        space(c, -1, SKIP_FM); /* Go back to the first filemark */
    }
#else
/*
 *  ... problem is that my Tandberg considers it an error to do anything
 *  after it has skipped past a filemark. So all commands except load and
 *  rewind fail after the the previous code.  The following will work in
 *  all situations but there is a risk that a user's tapes will only
 *  have one filemark at Logical End-of-Tape if the user isn't careful
 *  to use the rewind device the last time he uses tape drive.  This is
 *  only a problem with drives which insist upon doing a Retension each
 *  time the tape is changed or the drive gets reset.
 */
    if (c->flags & CTDIRTY) {
        writefm(c, 1);
        if (r->dev & REWIND)
            writefm(c, 1);
    }
#endif

    if (r->dev & REWIND)
        rewind(c, 0);

    c->inuse = 0;
    return;
}   /* ctclose() */

#ifdef FIXED
static void ctstart();

/***********************************************************************
 *  drainqueue()
 *
 *  Mark all requests in the queue with errors because we could not
 *  recover from an error condition. There haven't been any requests
 *  to drain in all of my testing but...
 */

static void drainqueue(c)
register ctctrl_p c;
{
    register BUF *bp;

    for (bp = c->actf; bp != NULL; bp = bp->b_actf) {
        bp->b_flag |= BFERR;
        bdone(bp);
    }
    c->actf = c->actl = NULL;
}   /* drainqueue() */

/***********************************************************************
 *  filldone()
 *
 *  Cleanup after the fill cache routine has finished.
 */

static void filldone(r)
register srb_p r;
{
    register ctctrl_p   c = ctdevs[r->target];
    register extsense_p e;
    size_t              info;

    switch (c->state) {
    case CTBLKIO:
        switch (r->status) {
        case ST_GOOD:
            c->start = c->cache;
            c->count = CACHESIZE;
            break;
        case ST_CHKCOND:
            r->timeout = 4;
            r->buf. space = KRNL_ADDR;
            r->buf. addr. vaddr = (caddr_t) r->sensebuf;
            r->buf. size = sizeof(r->sensebuf);
            r->xferdir = DMAREAD;
            memset(&(r->cdb), 0, sizeof(cdb_t));
            r->cdb. g0. opcode = REQSENSE;
            r->cdb. g0. lun_lba = (r->lun << 5);
            r->cdb. g0. xfr_len = r->buf. size;
            if (startscsi(r))
                c->state = CTSENSE;
            return;
        default:
            devmsg(r->dev, "Block read failed: status: (0x%x)", r->status);
            drainqueue(c);
            break;
        }
        break;
    case CTSENSE:
        if (r->status != ST_GOOD) {
            devmsg(r->dev, "Block read sense failed: status: (0x%x)", r->status);
            drainqueue(c);
        }
        else {
            e = r->sensebuf;
            if ((e->errorcode & 0x70) == 0x70) {
                info = 0;
                if (e->errorcode & 0x80) {
                    info = e->info;
                    flip(info);
                }
                if (e->sensekey & (CTFILEMARK | CTEOM)) {

                    c->flags |= (e->sensekey & (CTFILEMARK | CTEOM));
                    c->start = c->cache;
                    c->count = CACHESIZE - (info * c->block);
                    break;
                }
            }
            printsense(r->dev, "Block read failed", r->sensebuf);
            drainqueue(c);
        }
        break;
    default:
        devmsg(r->dev, "filldone() called from state (%d)", c->state);
        drainqueue(c);
        break;
    }

    c->state = CTIDLE;
    while (c->state == CTIDLE && c->actf)
        ctstart(c);
}   /* filldone() */

/***********************************************************************
 *  fillcache()
 *
 *  Fill the tape cache from the tape drive.
 */

static void fillcache(c)
register ctctrl_p c;
{
    register srb_p      r = (&c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);
    size_t              xfrsize;

    r->buf. space = KRNL_ADDR;
    r->buf. addr. vaddr = (caddr_t) c->cache;
    r->buf. size = xfrsize = CACHESIZE;
    r->xferdir = DMAREAD;
    r->timeout = 30;
    r->tries = 0;
    r->cleanup = &filldone;
    g0->opcode = READ;
    g0->lun_lba = (r->lun << 5);
    if (c->block) {
        g0->lun_lba |= 1;
        xfrsize = (xfrsize + c->block - 1) / c->block;
    }
    g0->lba_mid = ((unsigned char *) &xfrsize)[2];
    g0->lba_low = ((unsigned char *) &xfrsize)[1];
    g0->xfr_len = ((unsigned char *) &xfrsize)[0];
    g0->control = 0;
    if (startscsi(r))
        c->state = CTBLKIO;
}   /* fillcache() */

/***********************************************************************
 *  flushdone()
 *
 *  Called when the operations started in flushcache have completed
 *  with a pointer to the srb in question.
 */

static void flushdone(r)
register srb_p r;
{
    register ctctrl_p   c = ctdevs[r->target];

    switch (c->state) {
    case CTBLKIO:
        switch (r->status) {
        case ST_GOOD:
            c->start = c->cache;
            c->count = 0;
            c->flags |= CTDIRTY;
            break;
        case ST_CHKCOND:
            r->timeout = 4;
            r->buf. space = KRNL_ADDR;
            r->buf. addr. vaddr = (caddr_t) r->sensebuf;
            r->buf. size = sizeof(r->sensebuf);
            r->xferdir = DMAREAD;
            memset(&(r->cdb), 0, sizeof(cdb_t));
            r->cdb. g0. opcode = REQSENSE;
            r->cdb. g0. lun_lba = (r->lun << 5);
            r->cdb. g0. xfr_len = r->buf. size;
            if (startscsi(r))
                c->state = CTSENSE;
            return;
        default:
            devmsg(r->dev, "Block write failed: status: (0x%x)", r->status);
            drainqueue(c);
            break;
        }
        break;
    case CTSENSE:
        if (r->status == ST_GOOD)
            printsense(r->dev, "Block write failed", r->sensebuf);
        else
            devmsg(r->dev, "Block write sense failed");
        drainqueue(c);
        break;
    default:
        devmsg(r->dev, "flushdone() called from state (%d)", c->state);
        drainqueue(c);
        break;
    }

    c->state = CTIDLE;
    if (c->flags & CTCLOSING)
        wakeup(&(c->flags));
    else
        while (c->state == CTIDLE && c->actf)
            ctstart(c);
}   /* flushdone() */

/***********************************************************************
 *  flushcache()
 *
 *  Flush the tape cache to the tape drive.  Hopefully the data within
 *  will be written error free.
 */

static void flushcache(c)
register ctctrl_p c;
{
    register srb_p      r = (&c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);
    size_t              xfrsize;

    if (!c->count)
        return;

    r->buf. space = KRNL_ADDR;
    r->buf. addr. vaddr = (caddr_t) c->cache;
    r->buf. size = xfrsize = c->count;
    r->xferdir = DMAWRITE;
    r->timeout = 30;
    r->tries = 0;
    r->cleanup = &flushdone;
    g0->opcode = WRITE;
    g0->lun_lba = (r->lun << 5);
    if (c->block) {
        g0->lun_lba |= 1;
        xfrsize = (c->count + c->block - 1) / c->block;
    }
    g0->lba_mid = ((unsigned char *) &xfrsize)[2];
    g0->lba_low = ((unsigned char *) &xfrsize)[1];
    g0->xfr_len = ((unsigned char *) &xfrsize)[0];
    g0->control = 0;
    if (startscsi(r))
        c->state = CTBLKIO;
}   /* flushcache() */

/***********************************************************************
 *  ctstart()
 *
 *  Start the ball rolling on a block request.
 */

static void ctstart(c)
register ctctrl_p c;
{
    register BUF    *bp = c->actf;
    register size_t xfrsize;
    size_t          count;

    while (bp && c->state == CTIDLE) {
        count = ((c->flags & CTBLKRD) == CTBLKRD) ?
                c->count :
                (CACHESIZE - c->count);
        if (count <= 0) {
            if (c->flags & CTBLKWRT)
                flushcache(c);
            else if ((c->flags & (CTFILEMARK | CTEOM)) == 0)
                fillcache(c);
            else if (c->flags & CTFILEMARK) {
                bdone(bp);
                c->actf = c->actf->b_actf;
                if (c->actf) {
                    printf("Active Blocks After Filemark\n");
                    drainqueue(c);
                }
                if (bp->b_resid == bp->b_count)
                    c->flags &= ~CTFILEMARK;
            }
            else {
                printf("End Of Tape\n");
                bp->b_flag |= BFERR;
                bdone(bp);
                c->actf = c->actf->b_actf;
                if (c->actf) {
                    printf("Active Blocks After EOT\n");
                    drainqueue(c);
                }
            }
            return;
        }

        if (c->flags & CTBLKRD) {
            xfrsize = min(c->count, bp->b_resid);
            if (xfrsize > NBPC)
                xfrsize = NBPC;
            xpcopy(c->start,
                   bp->b_paddr + bp->b_count - bp->b_resid,
                   xfrsize,
                   SEG_386_KD|SEG_VIRT);
            c->count -= xfrsize;
        }
        else {
            xfrsize = min(count, bp->b_resid);
            if (xfrsize > NBPC)
                xfrsize = NBPC;
            pxcopy(bp->b_paddr + bp->b_count - bp->b_resid,
                   c->start,
                   xfrsize,
                   SEG_386_KD|SEG_VIRT);
            c->count += xfrsize;
        }

        c->start += xfrsize;
        bp->b_resid -= xfrsize;
        if (bp->b_resid == 0) {
            c->actf = bp->b_actf;
            bdone(bp);
            bp = c->actf;
        }
    }
}   /* ctstart() */

/***********************************************************************
 *  ctblock()
 *
 *  Block device transfer routine.  This should be the fastest entry
 *  point for the tape drive because it will be cached.
 */

static void ctblock(bp)
register BUF *bp;
{
    register ctctrl_p c = ctdevs[tid(bp->b_dev)];
    register int s;

    bp->b_resid = bp->b_count;
    if (!c) {
        bp->b_flag |= BFERR;
        bdone(bp);
        return;
    }

    if (!(c->flags & CTMODEMASK)) {
        c->cache = kalloc(CACHESIZE);
        if (!c->cache) {
            devmsg(bp->b_dev, "Could not allocate tape cache");
            bp->b_flag |= BFERR;
            bdone(bp);
            return;
        }
        c->count = 0;
        c->start = c->cache;
        c->flags |= ((bp->b_req == BREAD) ? CTBLKRD : CTBLKWRT);
    }
    else
        if ((bp->b_req == BREAD && (c->flags & CTBLKWRT)) ||
            (bp->b_req != BREAD && (c->flags & CTBLKRD))) {
            bp->b_flag |= BFERR;
            bdone(bp);
            return;
        }

    s = sphi();
    bp->b_actf = NULL;
    if (!c->actf)
        c->actf = bp;
    else
        c->actl->b_actf = bp;
    c->actl = bp;

    while (c->state == CTIDLE && c->actf)
        ctstart(c);
    spl(s);
}   /* ctblock() */

#endif

/***********************************************************************
 *  ctread()
 *
 *  SCSI Driver read entry point for character style devices.  This
 *  has to stay this way so that raw reads can use a block size other
 *  than BSIZE.
 */

static void ctread(dev, iop)
dev_t   dev;
IO      *iop;
{
    register ctctrl_p   c = ctdevs[tid(dev)];
#ifdef VARIABLE
    register srb_p      r = &(c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);
    size_t              xfrsize;
    extsense_p          e;
    int                 info;
#endif

    if (!c) {
        u. u_error = EINVAL;
        return;
    }

/***********************************************************************
 *  Check here for first open.  If so then set up the tape drive for
 *  Whatever mode is applicable.  Eventually this should be set up
 *  so that to work with all three types of tape drive. A fixed block
 *  only tape drive will do all I/O through its block entry point.
 *  Hopefully the blocksize on such a device will be an even multiple
 *  of BSIZE bytes. If the drive is capable of variable mode operation
 *  then the character read and write entry points can use whatever
 *  blocksize it would like.  Drives that can do both are not properly
 *  supported right now - they use whatever they default to.
 */

#ifdef VARIABLE
    if (!(c->flags & CTMODEMASK)) {
        if (!c->block)
            c->flags |= CTRAWMODE;

        /* Set the drive up for variable size operation here */
        /* For right now, if tape drive is in block mode just */
        /* use it that way. Otherwise, when done, set c->block  */
        /* to 0 */
    }

    if (c->block) {
        /* Couldn't use variable block mode have to settle */
#endif
        ioreq(&(c->buf), iop, dev, BREAD, BFIOC | BFRAW);
#ifdef VARIABLE
        return;
    }

    if (c->flags & CTEOM) {
        u. u_error = EIO;
        return;
    }
    if (c->flags & CTFILEMARK) {
        c->flags &= ~CTFILEMARK;
        return;
    }
    c->state = CTIO;
    switch (iop->io_seg) {
    case IOSYS:
        r->buf. space = KRNL_ADDR;
        r->buf. addr. vaddr = iop->io. vbase;
        break;
    case IOUSR:
        r->buf. space = USER_ADDR;
        r->buf. addr. vaddr = iop->io. vbase;
        break;
    case IOPHY:
        r->buf. space = PHYS_ADDR;
        r->buf. addr. paddr = iop->io. pbase;
        break;
    }
    xfrsize = iop->io_ioc;
    r->buf. size = xfrsize;
    r->xferdir = DMAREAD;
    r->timeout = 30;
    g0->opcode = READ;
    g0->lun_lba = (r->lun << 5);
    g0->lba_mid = ((unsigned char *) &xfrsize)[2];
    g0->lba_low = ((unsigned char *) &xfrsize)[1];
    g0->xfr_len = ((unsigned char *) &xfrsize)[0];
    g0->control = 0;
    info = 0;
    doscsi(r, 1, CVBLKIO, IVBLKIO, SVBLKIO, "ctread");
    switch (r->status) {
    case ST_GOOD:
        iop->io_ioc -= r->buf. size;
        break;
    case ST_CHKCOND:
        e = r->sensebuf;
        if ((e->errorcode & 0x70) == 0x70) {
            info = 0;
            if (e->errorcode & 0x80) {
                info = (long) e->info;
                flip(info);
            }
            if (e->sensekey & (CTFILEMARK | CTEOM)) {
                c->flags |= (e->sensekey & (CTFILEMARK | CTEOM));
                break;
            }
            else if (e->sensekey & CTILI) {
                devmsg(r->dev,
                       "Read failed buffer size %d blocksize %d",
                       xfrsize,
                       xfrsize - info);
                u. u_error = EIO;
                break;
            }
        }
        printsense(r->dev, "Read failed", r->sensebuf);
        u. u_error = EIO;
        break;
    case ST_USRABRT:
        break;
    default:
        devmsg(r->dev, "Read failed: status (0x%x)", r->status);
        u. u_error = EIO;
        break;
    }
    c->state = CTIDLE;
#endif
}   /* ctread() */

/***********************************************************************
 *  ctwrite()
 *
 *  Write Entry Point for SCSI Tape devices.
 */

static void ctwrite(dev, iop)
dev_t   dev;
IO      *iop;
{
    register ctctrl_p   c = ctdevs[tid(dev)];
#ifdef VARIABLE
    register srb_p      r = &(c->srb);
    register g0cmd_p    g0 = &(r->cdb. g0);
    size_t              xfrsize;
#endif

    if (!c) {
        u. u_error = EINVAL;
        return;
    }

/***********************************************************************
 *  This is the same as the read entry point.  Here we can determine
 *  access type, variable/fixed block size and set up the tape drive
 *  accordingly.
 */
#ifdef VARIABLE
    if (!(c->flags & CTMODEMASK)) {
        if (!c->block)
            c->flags |= CTRAWMODE;
    }

    if (c->block) {
#endif
        ioreq(&(c->buf), iop, dev, BWRITE, BFIOC | BFRAW);
#ifdef VARIABLE
        return;
    }

    c->state = CTIO;
    switch (iop->io_seg) {
    case IOSYS:
        r->buf. space = KRNL_ADDR;
        r->buf. addr. vaddr = iop->io. vbase;
        break;
    case IOUSR:
        r->buf. space = USER_ADDR;
        r->buf. addr. vaddr = iop->io. vbase;
        break;
    case IOPHY:
        r->buf. space = PHYS_ADDR;
        r->buf. addr. paddr = iop->io. pbase;
        break;
    }
    xfrsize = iop->io_ioc;
    r->buf. size = xfrsize;
    r->xferdir = DMAWRITE;
    r->timeout = 30;
    g0->opcode = WRITE;
    g0->lun_lba = (r->lun << 5);
    g0->lba_mid = ((unsigned char *) &xfrsize)[2];
    g0->lba_low = ((unsigned char *) &xfrsize)[1];
    g0->xfr_len = ((unsigned char *) &xfrsize)[0];
    g0->control = 0;
    doscsi(r, 1, CVBLKIO, IVBLKIO, SVBLKIO, "ctwrite");
    if (r->status != ST_GOOD && printerror(r, "Write failed"))
        u. u_error = EIO;
    else {
        iop->io_ioc -= r->buf. size;
        c->flags |= CTDIRTY;
    }
    c->state = CTIDLE;
#endif
}   /* ctwrite() */


/***********************************************************************
 *  ctioctl()
 *
 *  I/O Control Entry point for Cartridge tape devices.
 */

static void ctioctl(dev, cmd /*, vec */)
register dev_t  dev;
register int    cmd;
/* char *vec; */
{
    register ctctrl_p   c = ctdevs[tid(dev)];

    if (!c) {
        u. u_error = EINVAL;
        return;
    }

    if (!(c->flags & CTMODEMASK)) {
        c->flags |= CTRAWMODE;
    }

    switch (cmd) {
    case MTREWIND:      /* Rewind */
        rewind(c, 1);
        break;
    case MTWEOF:        /* Write end of file mark */
        writefm(c, 1);
        break;
    case MTRSKIP:       /* Record skip */
        space(c, 1, SKIP_BLK);
        break;
    case MTFSKIP:       /* File skip */
        space(c, 1, SKIP_FM);
        break;
    case MTTENSE:       /* Tension tape */
        loadtape(c, RETENSION);
        break;
    case MTERASE:       /* Erase tape */
        erase(c, ERASE_TAPE);
        break;
    case MTDEC:         /* DEC mode */
    case MTIBM:         /* IBM mode */
    case MT800:         /* 800 bpi */
    case MT1600:        /* 1600 bpi */
    case MT6250:        /* 6250 bpi */
        return;
    default:
        u. u_error = ENXIO;
        break;
    }
}   /* ctioctl() */

/* End of file */
@
