al.c: #define ALMAJ	AL0_MAJOR	/* Major number of com1_3 port */
al.c: #define ALMAJ	AL1_MAJOR	/* Major number of com2_4 ports */
asy.c: 	ASY_MAJOR,			/* Major index */
at.c: 	AT_MAJOR,			/* Major index */
at.c:  *	Action:	If drvl[AT_MAJOR] is greater than zero, decrement it.
at.c: 	if (--drvl[AT_MAJOR].d_time > 0) {
at.c: 	drvl[AT_MAJOR].d_time = ATSECS;
at.c: 		drvl[AT_MAJOR].d_time = (cmd == RESTORE(0))
at.c: 	drvl[AT_MAJOR].d_time = 0;
fdc.c: 	FL_MAJOR,			/* Major index */
fdc.c: 	drvl[FL_MAJOR].d_time = 0;
fdc.c: 		drvl[FL_MAJOR].d_time = 1;
fdc.c: 			drvl[FL_MAJOR].d_time = 0;
fl386.c: 	FL_MAJOR,			/* Major index */
ft.c: 	FL_MAJOR,			/* Major index */
hai154x.c:     drvl[SCSIMAJOR]. d_time = active;
hai154x.c:             drvl[SCSIMAJOR]. d_time = 1;
haiscsi.c: 	SCSIMAJOR,
haiscsi.c:  *  Close entry point for all devices at major index SCSIMAJOR.
haisd.c:     r->dev = makedev(SCSIMAJOR, SPECIAL | (id << 4));
haisd.c:     r->dev = makedev(SCSIMAJOR, SPECIAL | (id << 4));
hs.c: 	HS_MAJOR,			/* Major index */
kb.c: 	KB_MAJOR,			/* Major index */
kb.c: 	drvl[KB_MAJOR].d_time = 1;
lp386.c: 	LP_MAJOR,				/* Major index */
nkb.c: 	KB_MAJOR,			/* Major index */
nkb.c: 	drvl[KB_MAJOR].d_time = 1;
pty.c: 	PTY_MAJOR,			/* Major index */
qq.c: #define QQ_MAJOR	7		/* device major number */
qq.c: 	QQ_MAJOR,			/* Major index */
qq.c: 		drvl[QQ_MAJOR].d_time = 30;
qq.c: 	j = --drvl[QQ_MAJOR].d_time;
rm.c: 	RM_MAJOR,
sbp.c: 	SBP_MAJOR,			/* Major index */
sbp.c: 	printf("Loaded sbp driver at major number %d\n", SBP_MAJOR);
scsi.c: #define	SDMAJOR	13			/* Major Device Number */
scsi.c: 	SDMAJOR,			/* Major index */
scsi.c: 	++drvl[SDMAJOR].d_time;
scsi.c: 	--drvl[SDMAJOR].d_time;
scsi.c: 			++drvl[SDMAJOR].d_time;
scsi.c: 		++drvl[SDMAJOR].d_time;
scsi.c: 	--drvl[SDMAJOR].d_time;
ss.c: #include	<sys/devices.h>		/* SCSI_MAJOR */
ss.c: 	SCSI_MAJOR,			/* Major index */
ss.c: 	++drvl[SCSI_MAJOR].d_time;
ss.c: 	--drvl[SCSI_MAJOR].d_time;
vtkb.c: 	KB_MAJOR,			/* Major index */
vtkb.c: 	drvl[VT_MAJOR].d_time = 1;
vtkb.c:  * Major number must be VT_MAJOR for CPU to get here.
vtnkb.c: 	KB_MAJOR,			/* Major index */
vtnkb.c: #if	VT_MAJOR == KB_MAJOR
vtnkb.c: 	drvl[VT_MAJOR].d_time = 1;
vtnkb.c: #if	VT_MAJOR != KB_MAJOR
vtnkb.c: #if	VT_MAJOR == KB_MAJOR
vtnkb.c:  * Major number must be VT_MAJOR for CPU to get here.
xlft.c: 	FL_MAJOR,			/* Major index */
