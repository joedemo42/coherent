head     2.3;
branch   ;
access   ;
symbols  ;
locks    bin:2.3;
comment  @ * @;


2.3
date     93.08.09.13.35.38;  author bin;  state Exp;
branches ;
next     2.2;

2.2
date     93.07.20.11.10.58;  author bin;  state Exp;
branches ;
next     2.1;

2.1
date     93.07.07.10.45.48;  author root;  state Exp;
branches ;
next     ;


desc
@@


2.3
log
@Kernel 82 changes
@
text
@/* $Header: /ker/coh.386/RCS/fs3.c,v 2.2 93/07/26 15:19:55 nigel Exp $ */
/* (lgl-
 *	The information contained herein is a trade secret of Mark Williams
 *	Company, and  is confidential information.  It is provided  under a
 *	license agreement,  and may be  copied or disclosed  only under the
 *	terms of  that agreement.  Any  reproduction or disclosure  of this
 *	material without the express written authorization of Mark Williams
 *	Company or persuant to the license agreement is unlawful.
 *
 *	COHERENT Version 2.3.37
 *	Copyright (c) 1982, 1983, 1984.
 *	An unpublished work by Mark Williams Company, Chicago.
 *	All rights reserved.
 -lgl) */
/*
 * Coherent.
 * Filesystem (I/O).
 *
 * $Log:	fs3.c,v $
 * Revision 2.2  93/07/26  14:28:33  nigel
 * Nigel's R80
 * 
 * Revision 1.5  93/04/14  10:06:33  root
 * r75
 * 
 * Revision 1.2  92/01/06  11:59:34  hal
 * Compile with cc.mwc.
 * 
 * Revision 1.1	88/03/24  16:13:54	src
 * Initial revision
 * 
 * 87/11/25	Allan Cornish		/usr/src/sys/coh/fs3.c
 * vaddr_t bp->b_vaddr --> faddr_t bp->b_faddr.
 *
 * 86/02/01	Allan Cornish
 * Added code to fwrite() to avoid needless writing of pipe blocks.
 * Throughput on 6 Mhz AT rose from 30 Kbytes/sec to 79 Kbytes/sec.
 */

#include <common/_tricks.h>
#include <sys/debug.h>
#include <sys/coherent.h>
#include <sys/buf.h>
#include <canon.h>
#include <sys/con.h>
#include <sys/errno.h>
#include <sys/filsys.h>
#include <sys/mount.h>
#include <sys/io.h>
#include <sys/ino.h>
#include <sys/inode.h>
#include <sys/stat.h>
#include <sys/file.h>

/*
 * Given an inode, open it.
 */
iopen(ip, mode)
register INODE *ip;
{
	register int type;

	type = ip->i_mode & IFMT;
	switch (type) {
	case IFCHR:
	case IFBLK:
		iunlock(ip);
		dopen(ip->i_a.i_rdev, mode, type==IFCHR ? DFCHR : DFBLK);
		ilock(ip);
		break;
	case IFDIR:
		if (mode & IPW) {

			/* Return (EISDIR) if not superuser. */
			if (super() == 0) {
				/* Override EPERM set when super() failed. */
				u.u_error = EISDIR;
				return;
			}

			/*
			 * Opening a directory O_WRONLY is insane, even
			 * if you are superuser!
			 */
			if (mode == IPW) {
				u.u_error = EISDIR;
				return;
			}
		}
		break;
	case IFPIPE:
		popen(ip, mode);
		break;
	}
}

/*
 * Given an inode, close it.
 *
 * NIGEL: Modified for new dclose ().
 */
iclose(ip, mode)
register INODE *ip;
{
	register int type;

	ilock(ip);
	switch (type = ip->i_mode&IFMT) {
	case IFBLK:
		bflush(ip->i_a.i_rdev);
		/* FALL THROUGH */
	case IFCHR:
		iunlock(ip);
		dclose(ip->i_a.i_rdev, mode,  type==IFCHR ? DFCHR : DFBLK);
		ilock(ip);
		break;

	case IFPIPE:
		pclose(ip, mode);
		break;
	}
	idetach(ip);
}

/*
 * Read from a file described by an inode and an io strucuture.
 */
iread(ip, iop)
register INODE *ip;
register IO *iop;
{
	if (iop->io_ioc == 0)
		return;

	switch (ip->i_mode & IFMT) {
	case IFCHR:
		dread (ip->i_a.i_rdev, iop);
		break;

	case IFBLK:
	case IFREG:
	case IFDIR:
		fread (ip, iop);
		break;

	case IFPIPE:
		pread (ip, iop);
		break;

	default:
		u.u_error = ENXIO;
		break;
	}
}

/*
 * Write to a file described by an inode and io structure.
 */
iwrite(ip, iop)
register INODE *ip;
register IO *iop;
{
	imod (ip);	/* write - mtime */
	icrt (ip);	/* write - ctime */
	if (iop->io_ioc == 0)
		return;

	switch (ip->i_mode & IFMT) {
	case IFCHR:
		dwrite (ip->i_a.i_rdev, iop);
		break;

	case IFBLK:
		fwrite (ip, iop);
		break;

	case IFREG:
	case IFDIR:
		if (getment (ip->i_dev, 1) == NULL)
			return;
		fwrite (ip, iop);
		break;

	case IFPIPE:
		pwrite (ip, iop);
		break;

	default:
		u.u_error = ENXIO;
		break;
	}
}

/*
 * Given a block number, `b', store the offsets for the indirect blocks
 * backwards in the array, `lp', and return a pointer just after the
 * position where the first offset is stored.
 */

static int *
lmap (b, lp, numblocks)
register daddr_t b;
register int *lp;
int	      *	numblocks;
{
	register int n;

	if ((n = ND - b) > 0) {
		/*
		 * Just the one direct block, and further blocks up to the end
		 * of the block list in the inode.
		 */
		* lp ++ = b;
		* numblocks = n;
		return lp;
	}
	b -= ND;

	/*
	 * First, the initial indirect block, followed by as many further
	 * layers of indirection as we need.
	 */

	n = nbnrem (b);
	* numblocks = NBN - n;
	* lp ++ = n;

	if ((b = nbndiv (b)) == 0) {
		* lp ++ = ND;
		return lp;
	}


#if	NI > 1
	b --;	/* Make offset in next indirect block zero-based */

	* lp ++ = nbnrem (b);
	if ((b = nbndiv (b)) == 0) {
		* lp ++ = ND + 1;
		return lp;
	}

#if	NI > 2
	b --;	/* Make offset in next indirect block zero-based */

	* lp ++ = nbnrem (b);
	if ((b = nbndiv (b)) == 0) {
		* lp ++ = ND + 2;
		return lp;
	}
#endif
#endif
	SET_U_ERROR (EFBIG, "lmap");
	return NULL;
}

int	t_groupmode = 0;

/*
 * Convert the given virtual block to a physical block for the given inode.
 * If the block does not map onto a physical block because the file is sparse
 * but it does exist, 0 is returned.  If an error is encountered, -1 is
 * returned.
 */

static int
vmap (ip, lb, count, blocklist, allocflag)
register INODE *ip;
daddr_t		lb;
int		count;
daddr_t	      *	blocklist;
int		allocflag;
{
	daddr_t pb;
	int list [1 + NI];
	int		nblocks;
	daddr_t	      *	outlist;
	BUF	      *	buf;
	int	      *	lp;
	int		resid = count;

more:
	if ((lp = lmap (lb, list, & nblocks)) == NULL)
		return -1;

	if (nblocks > resid)
		nblocks = resid;
	resid -= nblocks;
	lb += nblocks;

	outlist = ip->i_a.i_addr;
	buf = NULL;

	while (-- lp != list) {
		if ((pb = outlist [* lp]) == 0) {
			/*
			 * If an indirect block is not present, then this
			 * implies that at least the next "nblocks" leaf
			 * blocks are also not present.
			 */

			do
				* blocklist ++ = -1;
			while (-- nblocks > 0);
			goto done;
		}

		if (buf != NULL) {
			brelease (buf);
			candaddr (pb);
		}

		if ((buf = bread (ip->i_dev, pb, BUF_SYNC)) == NULL)
			return -1;

		outlist = (daddr_t *) buf->b_vaddr;
	}

	do {
		if ((pb = outlist [list [0] ++]) == 0)
			pb = -1;
		else if (buf != NULL)
			candaddr (pb);
		* blocklist ++ = pb;
	} while (-- nblocks > 0);

done:
	if (buf != NULL)
		brelease (buf);

	if (t_groupmode && resid > 0)
		goto more;

	return count - resid;
}

int	t_readahead = 0;
#define	READGROUP	16		/*
					 * Maximum # of blocks to read as a
					 * single normal group.
					 */
#define	READAHEAD	8		/*
					 * Maximum # of blocks to read ahead.
					 */

/*
 * Read from a regular or block special file.
 */
fread(ip, iop)
INODE *ip;
register IO *iop;
{
	register int	n;
	register unsigned i;
	register off_t res;
	register unsigned off;
	register dev_t dev;
	register daddr_t lbn;
	register daddr_t pbn;
	register daddr_t abn;
	register daddr_t zbn;
	register BUF *bp;
	register int blk;
	daddr_t		list [READGROUP + READAHEAD];
	int		do_readahead;

	if ((ip->i_mode & IFMT) == IFBLK) {
		blk = 1;
		dev = ip->i_a.i_rdev;
	} else {
		blk = 0;
		dev = ip->i_dev;
	}
	abn = 0;
	zbn = 0;
	lbn = blockn (iop->io_seek);
	off = blocko (iop->io_seek);

	/*
	 * NIGEL: The commented-out code talks about a mysterious "unsigned
	 * prob" which does not in reality exist. All this really wants to
	 * do is pick the minimum of the remaining size and the requested
	 * size.
	 */

#if	0
	res = ip->i_size - iop->io_seek;

	if (blk != 0 || (res > 0 && res > iop->io_ioc)) 
		res = iop->io_ioc;	/* unsigned prob with io_ioc */
	if (res <= 0)
		return;
#endif

	if (blk)
		res = iop->io_ioc;
	else if ((res = ip->i_size - iop->io_seek) > iop->io_ioc)
		res = iop->io_ioc;

	if (res == 0)
		return;

	/*
	 * NIGEL: Test whether we want readahead based on whether this access
	 * immediately follows some previous access... this does not apply to
	 * inodes made from pipes, because there readahead will make us seek
	 * beyond the space that is legal (pipes store funky data where a
	 * normal file has indirect block pointers).
	 */

	if ((lbn == ip->i_lastblock + 1) && (ip->i_mode & IFMT) != IFPIPE) {
		if ((do_readahead = t_readahead) < 0)
			do_readahead = 0;
	} else
		do_readahead = 0;

	do {
		if (lbn >= zbn) {
			if ((n = blockn (res + BSIZE - 1) + do_readahead) >
			    __ARRAY_LENGTH (list))
				n = __ARRAY_LENGTH (list);

			ASSERT (n > do_readahead);

			if (blk == 0 && (n = vmap (ip, lbn, n, list, 0)) < 0)
				return;

			abn = lbn;
			for (i = 0, zbn = lbn ; i < n ; i ++, zbn ++) {
				if (blk != 0)
					list [i] = pbn = zbn;
				else if ((pbn = list [i]) == 0)
					continue;

				if (t_readahead != -1)
					(void) bread (dev, pbn, BUF_ASYNC);
			}
		}

		if (res < (n = BSIZE - off))
			n = res;

		if ((pbn = list [lbn - abn]) < 0)
			ioclear (iop, n);
		else {
			if ((bp = bread (dev, pbn, BUF_SYNC)) == NULL)
				return;
			iowrite (iop, bp->b_vaddr + off, n);
			brelease (bp);
		}

		if (u.u_error)
			return;
		lbn ++;
		off = 0;
	} while ((res -= n) > 0);

	ip->i_lastblock = lbn - 1;
}

int	t_writemode = 0;

/*
 * Write to a regular or block special file.
 */
fwrite(ip, iop)
INODE *ip;
register IO *iop;
{
	register unsigned n;
	register unsigned off;
	register daddr_t lbn;
	register BUF *bp;
	register int blk;
	register int com;

	lbn = blockn(iop->io_seek);
	off = blocko(iop->io_seek);
	blk = (ip->i_mode & IFMT) == IFBLK;
	while (iop->io_ioc > 0) {
		n = BSIZE - off;
		n = iop->io_ioc > n ? n : iop->io_ioc;
		com = off == 0 && n == BSIZE;
		if (blk == 0)
			bp = aread (ip, lbn, com);
		else {
			if (com)
				bp = bclaim (ip->i_a.i_rdev, lbn, BUF_SYNC);
			else
				bp = bread (ip->i_a.i_rdev, lbn, BUF_SYNC);
		}
		if (bp == NULL)
			return;
		ioread (iop, bp->b_vaddr + off, n);
		bp->b_flag |= BFMOD;
		if (com && (ip->i_mode & IFMT) != IFPIPE) {
			bwrite (bp, t_writemode);
			if (t_writemode)
				brelease (bp);
		} else
			brelease (bp);
		if (u.u_error)
			return;
		lbn ++;
		off = 0;
		if ((iop->io_seek += n) > ip->i_size)
			if (blk == 0)
				ip->i_size = iop->io_seek;
	}
}

/*
 * Given an inode pointer, read the requested virtual block and return
 * a buffer with the data.
 */
BUF *
vread(ip, lb)
register INODE *ip;
daddr_t lb;
{
	daddr_t		pb;
	register BUF *bp;

	if (vmap (ip, lb, 1, & pb, 0) < 0)
		return NULL;
	if (pb != -1)
		return bread (ip->i_dev, pb, BUF_SYNC);
	bp = bclaim (NODEV, (daddr_t) 0, BUF_SYNC);
	kclear (bp->b_vaddr, BSIZE);
	return bp;
}

/*
 * Given an inode pointer, read the requested virtual block and return a
 * buffer with the data.  In sparse files, the necessary blocks are allocated.
 * If the flag, `fflag' is set, the final buffer is just claimed rather than
 * read as we are going to change it's contents completely.
 */

BUF *
aread (ip, lb, fflag)
register INODE *ip;
daddr_t lb;
{
	register BUF *bp;
	register int *lp;
	register dev_t dev;
	register int l;
	register int aflag;
	register int lflag;
	daddr_t * dp;
	daddr_t pb;
	int list[1+NI];
	int		nblocks;

	if ((lp = lmap (lb, list, & nblocks)) == NULL)
		return (NULL);
	aflag = 0;
	dev = ip->i_dev;
	pb = ip->i_a.i_addr [l = * -- lp];
	if (pb == 0) {
		aflag = 1;
		if ((pb = balloc (dev)) == 0)
			return NULL;
		ip->i_a.i_addr [l] = pb;
	}
	for (;;) {
		lflag = lp == list;
		/*
		 * If we are not allocating a new block and the caller is
		 * going to preserve any of the data that we are going to
		 * return, then read in the previous block contents.
		 */
		if (! (aflag || (fflag && lflag))) {
			if ((bp = bread (dev, pb, BUF_SYNC)) == NULL)
				return NULL;
		} else {
			bp = bclaim (dev, pb, BUF_SYNC);

			/*
			 * If this is the last block and the caller is just
			 * going to overwrite it, don't zero-fill.
			 */

			if (! (fflag && lflag))
				kclear (bp->b_vaddr, BSIZE);
			bp->b_flag |= BFMOD;
		}
		if (lflag)
			return bp;

		aflag = 0;
		dp = bp->b_vaddr;
		pb = dp [l = * -- lp];
		candaddr (pb);
		if (pb == 0) {
			aflag = 1;
			if ((pb = balloc (dev)) == 0) {
				brelease(bp);
				return (NULL);
			}
			dp [l] = pb;
			candaddr (dp [l]);
			bp->b_flag |= BFMOD;
		}
		brelease (bp);
	}
}
@


2.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* $Header: /y/coh.386/RCS/fs3.c,v 1.5 93/04/14 10:06:33 root Exp $ */
d20 3
d39 3
d137 1
a137 1
		dread(ip->i_a.i_rdev, iop);
d143 1
a143 1
		fread(ip, iop);
d147 1
a147 1
		pread(ip, iop);
d195 152
d353 1
a353 1
	register unsigned n;
d364 1
a364 1
	daddr_t list[NEXREAD];
d378 9
d393 1
d395 8
d411 5
a415 2
	do_readahead = (lbn == ip->i_lastblock + 1) &&
			((ip->i_mode & IFMT) != IFPIPE);
d417 5
a421 1
	ip->i_lastblock = lbn;
d423 5
a427 8
	while (res > 0) {
		if (lbn >= zbn) {
			if ((n = blockn (res + BSIZE - 1)) < NEXREAD) {
				if ((n += do_readahead) <= 0)
					n = 1;
			} else
				n = NEXREAD;

d431 6
a436 11
					pbn = zbn;
				else {
					if ((pbn = vmap (ip, zbn)) < 0)
						return;
					if (pbn == 0) {
						list [i] = -1;
						continue;
					}
				}
				list [i] = pbn;
				bread (dev, pbn, 0);
a439 7
		/*
		 * With readhead, we can get a little ahead of ourselves.
		 */

		if (res == 0)
			break;

d446 1
a446 1
			if ((bp = bread (dev, pbn, 1)) == NULL)
d456 3
a458 2
		res -= n;
	}
d461 2
d488 1
a488 1
				bp = bclaim (ip->i_a.i_rdev, lbn);
d490 1
a490 1
				bp = bread (ip->i_a.i_rdev, lbn, 1);
d496 5
a500 3
		if (com && ((ip->i_mode & IFMT) != IFPIPE) )
			bwrite (bp, 0);
		else
d521 1
a521 1
	register daddr_t pb;
d524 1
a524 1
	if ((pb = vmap (ip, lb)) < 0)
d526 3
a528 3
	if (pb != 0)
		return bread (ip->i_dev, pb, 1);
	bp = bclaim (NODEV, (daddr_t) 0);
a533 32
 * Convert the given virtual block to a physical block for the given inode.
 * If the block does not map onto a physical block because the file is sparse
 * but it does exist, 0 is returned.  If an error is encountered, -1 is
 * returned.
 */
daddr_t
vmap(ip, lb)
register INODE *ip;
daddr_t lb;
{
	register BUF *bp;
	register int *lp;
	daddr_t * dp;
	daddr_t pb;
	int list [1 + NI];

	if ((lp = lmap (lb, list)) == NULL)
		return -1;
	pb = ip->i_a.i_addr [* -- lp];
	for (;;) {
		if (pb == 0 || lp == list)
			return pb;
		if ((bp = bread (ip->i_dev, pb, 1)) == NULL)
			return 0;
		dp = bp->b_vaddr;
		pb = dp [* -- lp];
		brelease (bp);
		candaddr (pb);
	}
}

/*
d554 1
d556 1
a556 1
	if ((lp = lmap (lb, list)) == NULL)
d575 1
a575 1
			if ((bp = bread (dev, pb, 1)) == NULL)
d578 1
a578 1
			bp = bclaim (dev, pb);
a608 30

/*
 * Given a block number, `b', store the offsets for the indirect blocks
 * backwards in the array, `lp', and return a pointer just after the
 * position where the first offset is stored.
 */
int *
lmap(b, lp)
register daddr_t b;
register int *lp;
{
	register int n;

	if (b < ND) {
		* lp ++ = b;
		return lp;
	}
	b -= ND;
	n = NI;
	do {
		if (n -- == 0) {
			u.u_error = EFBIG;
			return NULL;
		}
		* lp ++ = nbnrem (b);
		b = nbndiv (b);
	} while (b --);
	* lp ++ = ND + NI - 1 - n;
	return lp;
}
@


2.1
log
@Last Pre-STREAMS kernel
@
text
@d40 1
a40 1
#include <errno.h>
d47 1
d128 2
a129 1
	switch (ip->i_mode&IFMT) {
d133 1
d139 1
d143 1
d157 2
a158 2
	imod(ip);	/* write - mtime */
	icrt(ip);	/* write - ctime */
d161 2
a162 1
	switch (ip->i_mode&IFMT) {
d164 1
a164 1
		dwrite(ip->i_a.i_rdev, iop);
d166 1
d168 1
a168 1
		fwrite(ip, iop);
d170 1
d173 1
a173 1
		if (getment(ip->i_dev, 1) == NULL)
d175 1
a175 1
		fwrite(ip, iop);
d177 1
d179 1
a179 1
		pwrite(ip, iop);
d181 1
d207 1
d209 1
a209 1
	if ((ip->i_mode&IFMT) == IFBLK) {
d218 2
a219 2
	lbn = blockn(iop->io_seek);
	off = blocko(iop->io_seek);
d221 3
a223 2
	if ( (blk!=0) || ((res>0) && (res>iop->io_ioc)) )  /* unsigned prob */
		res = iop->io_ioc;			   /* with io_ioc   */
d226 14
a239 8
	if (res+off <= BSIZE) {
		bp = blk ? bread(dev, lbn, 1) : vread(ip, lbn);
		if (bp == NULL)
			return;
		iowrite(iop, bp->b_vaddr+off, (unsigned)res);
		brelease(bp);
		return;
	}
d242 4
a245 1
			if ((n=blockn(res+BSIZE-1)) > NEXREAD)
d247 1
a247 2
			if (n <= 0)
				n = 1;
d249 1
a249 1
			for (i=0, zbn=lbn; i<n; i++, zbn++) {
d253 1
a253 1
					if ((pbn=vmap(ip, zbn)) < 0)
d256 1
a256 1
						list[i] = -1;
d260 2
a261 2
				list[i] = pbn;
				bread(dev, pbn, 0);
d264 15
a278 5
		if ((pbn=list[lbn-abn]) < 0) {
			bp = bclaim(NODEV, (daddr_t)0);
			kclear(bp->b_vaddr, BSIZE);
		} else {
			if ((bp=bread(dev, pbn, 1)) == NULL)
d280 2
d283 1
a283 4
		n = BSIZE - off;
		n = res>n ? n : res;
		iowrite(iop, bp->b_vaddr+off, n);
		brelease(bp);
d286 1
a286 1
		lbn++;
d308 1
a308 1
	blk = (ip->i_mode&IFMT) == IFBLK;
d311 2
a312 2
		n = iop->io_ioc>n ? n : iop->io_ioc;
		com = off==0 && n==BSIZE;
d314 1
a314 1
			bp = aread(ip, lbn, com);
d317 1
a317 1
				bp = bclaim(ip->i_a.i_rdev, lbn);
d319 1
a319 1
				bp = bread(ip->i_a.i_rdev, lbn, 1);
d323 1
a323 1
		ioread(iop, bp->b_vaddr+off, n);
d325 2
a326 2
		if (com && ((ip->i_mode&IFMT) != IFPIPE) )
			bwrite(bp, 0);
d328 1
a328 1
			brelease(bp);
d331 1
a331 1
		lbn++;
d333 1
a333 1
		if ((iop->io_seek+=n) > ip->i_size)
d351 2
a352 2
	if ((pb=vmap(ip, lb)) < 0)
		return (NULL);
d354 4
a357 4
		return (bread(ip->i_dev, pb, 1));
	bp = bclaim(NODEV, (daddr_t)0);
	kclear(bp->b_vaddr, BSIZE);
	return (bp);
d375 1
a375 1
	int list[1+NI];
d377 3
a379 3
	if ((lp=lmap(lb, list)) == NULL)
		return (-1);
	pb = ip->i_a.i_addr[*--lp];
d381 4
a384 4
		if (pb==0 || lp==list)
			return (pb);
		if ((bp=bread(ip->i_dev, pb, 1)) == NULL)
			return (0);
d386 3
a388 3
		pb = dp[*--lp];
		brelease(bp);
		candaddr(pb);
d398 1
d400 1
a400 1
aread(ip, lb, fflag)
d414 1
a414 1
	if ((lp=lmap(lb, list)) == NULL)
d418 1
a418 1
	pb = ip->i_a.i_addr[l=*--lp];
d421 3
a423 3
		if ((pb=balloc(dev)) == 0)
			return (NULL);
		ip->i_a.i_addr[l] = pb;
d426 9
a434 4
		lflag = lp==list;
		if (aflag==0  &&  (fflag==0 || lflag==0)) {
			if ((bp=bread(dev, pb, 1)) == NULL)
				return (NULL);
d436 9
a444 2
			bp = bclaim(dev, pb);
			kclear(bp->b_vaddr, BSIZE);
d448 1
a448 1
			return (bp);
d452 2
a453 2
		pb = dp[l=*--lp];
		candaddr(pb);
d456 1
a456 1
			if ((pb=balloc(dev)) == 0) {
d460 2
a461 2
			dp[l] = pb;
			candaddr( dp[l] );
d464 1
a464 1
		brelease(bp);
d481 2
a482 2
		*lp++ = b;
		return (lp);
d487 1
a487 1
		if (n-- == 0) {
d489 1
a489 1
			return (NULL);
d491 5
a495 6
		*lp = nbnrem(b);
		++lp;
		b = nbndiv(b);
	} while (b--);
	*lp++ = ND+NI-1-n;
	return (lp);
@
