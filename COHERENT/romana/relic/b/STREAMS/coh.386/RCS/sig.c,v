head     2.4;
branch   ;
access   ;
symbols  ;
locks    bin:2.4;
comment  @ * @;


2.4
date     93.08.09.13.36.08;  author bin;  state Exp;
branches ;
next     2.3;

2.3
date     93.07.20.11.11.35;  author bin;  state Exp;
branches ;
next     2.2;

2.2
date     93.07.12.13.17.35;  author root;  state Exp;
branches ;
next     2.1;

2.1
date     93.07.07.10.46.01;  author root;  state Exp;
branches ;
next     ;


desc
@@


2.4
log
@Kernel 82 changes
@
text
@/* (lgl-
 *	The information contained herein is a trade secret of Mark Williams
 *	Company, and  is confidential information.  It is provided  under a
 *	license agreement,  and may be  copied or disclosed  only under the
 *	terms of  that agreement.  Any  reproduction or disclosure  of this
 *	material without the express written authorization of Mark Williams
 *	Company or persuant to the license agreement is unlawful.
 *
 *	COHERENT Version 5.0
 *	Copyright (c) 1982, 1993.
 *	An unpublished work by Mark Williams Company, Chicago.
 *	All rights reserved.
 -lgl) */
/*
 * File:	coh.386/sig.c
 *
 * Purpose:	signal handling
 *
 * Revised: Tue May  4 11:59:15 1993 CDT
 */

/*
 * ----------------------------------------------------------------------
 * Includes.
 */

#include <common/_limits.h>
#include <common/_wait.h>
#include <common/_gregset.h>
#include <kernel/sigproc.h>

#include <sys/coherent.h>
#include <sys/errno.h>
#include <sys/ino.h>
#include <sys/inode.h>
#include <sys/io.h>
#include <sys/proc.h>
#include <sys/ptrace.h>
#include <sys/sched.h>
#include <sys/seg.h>
#include <sys/file.h>
#include <sys/core.h>


/*
 * ----------------------------------------------------------------------
 * Definitions.
 *	Constants.
 *	Macros with argument lists.
 *	Typedefs.
 *	Enums.
 */

/*
 * ----------------------------------------------------------------------
 * Functions.
 *	Import Functions.
 *	Export Functions.
 *	Local Functions.
 */
void	curr_check_signals();
int	ptset();
void	sendsig();
int	sigdump();
__sigfunc_t	usigsys();

static struct _fpstate * empack();
static	int		ptret();

/*
 * ----------------------------------------------------------------------
 * Global Data.
 *	Import Variables.
 *	Export Variables.
 *	Local Variables.
 */
/*
 * Patchable variables.
 *
 * Patch DUMP_TEXT nonzero to make text segment show up in core files.
 * Patch DUMP_LIM set the upper limit in bytes of how much of a
 * segment is written to a core file.
 *
 * CATCH_SEGV can be patched to allow signal () to be used to catch the
 * SIGSEGV signal (). This is off by default because:
 *   i)	Experience has shown that kernel printf () messages being on by
 *	default is very useful for catching bugs.
 *  ii)	Certain extremely ill-behaved applications apparently catch SIGSEGV
 *	blindly as part of some catch-all behaviour, and when such faults
 *	happen have been known to loop generating kernel printf () output
 *	which bogs down the system unacceptably.
 * iii)	Turning the signal off to avoid ii) causes less actual disruption than
 *	leaving it on.
 * This only applies to the signal () interface; we assume that apps which are
 * smart enough to use sigset () or sigaction () also know what to do with
 * SIGSEGV.
 */

int	DUMP_TEXT = 0;
int	DUMP_LIM=512*1024;
int	CATCH_SEGV = 0;

/*
 * ----------------------------------------------------------------------
 * Code.
 */

/*
 * Or an entire signal mask into the "hold" mask.
 */

static void
sigMask (mask)
__sigset_t * mask;
{
	int		i;
	__sigmask_t   *	loop = mask->_sigbits;
	__sigset_t	signal_mask;

	curr_signal_mask (NULL, & signal_mask);

	for (i = 0 ; i < __ARRAY_LENGTH (mask->_sigbits) ; i ++)
		signal_mask._sigbits [i] |= * loop ++;

	curr_signal_mask (& signal_mask, NULL);
}


/*
 * Set up the action to be taken on a signal.
 */

__sigfunc_t
usigsys (signal, func, regsetp)
unsigned	signal;
__sigfunc_t	func;
gregset_t     *	regsetp;
{
	int		sigtype;
	__sigmask_t	mask;
	__sigset_t	signal_mask;
	__sigaction_t	signal_action;

	sigtype = signal & ~ 0xFF;
	signal &= 0xFF;

#if 0
	T_HAL(8, printf("[%d]sig(%d, %x) ", SELF->p_pid, signal, func));
#endif

	/*
	 * Check the passed signal number. SIGKILL and SIGSTOP are not allowed
	 * to be caught.
	 */

	/* Range check on 1-based signal number. */
	if (signal <= 0 || signal > NSIG || signal == SIGSTOP ||
	    signal == SIGKILL) {
		u.u_error = EINVAL;
		return;
	}

	signal_action.sa_handler = func;
	signal_action.sa_flags = 0;
	__SIGSET_EMPTY (signal_action.sa_mask);
	func = 0;

	curr_signal_mask (NULL, & signal_mask);

	mask = __SIGSET_MASK (signal);

	switch (sigtype) {
	case SIGHOLD:
		__SIGSET_ADDMASK (signal_mask, signal, mask);
		break;

	case SIGRELSE:
		__SIGSET_CLRMASK (signal_mask, signal, mask);
		break;

	case SIGIGNORE:
		__SIGSET_CLRMASK (signal_mask, signal, mask);
		signal_action.sa_handler = SIG_IGN;
		curr_signal_action (signal, & signal_action, NULL);
		break;

	case 0:				/* signal () */
		if (signal == SIGSEGV && CATCH_SEGV == 0) {
			u.u_error = EINVAL;
			return 0;
		}
		u.u_sigreturn = (__sigfunc_t) regsetp->_i386._edx;

		if (signal == SIGCHLD) {
			/*
			 * With signal (), the argument implicitly mangles the
			 * SA_NOCLDWAIT flag. I have no idea whether the
			 * SA_NOCLDSTOP flag is also implicitly affected, but
			 * for now we leave it alone.
			 */

			curr_signal_misc (__SF_NOCLDWAIT,
					  signal_action.sa_handler ==
						SIG_IGN ? __SF_NOCLDWAIT : 0);
		}
		signal_action.sa_flags |= __SA_RESETHAND;
		curr_signal_action (signal, & signal_action, & signal_action);

		/*
		 * Using the signal () interface automatically causes a
		 * pending signal to be discarded.
		 */

		proc_unkill (SELF, signal);
		return signal_action.sa_handler;		

	case SIGSET:
		u.u_sigreturn = (__sigfunc_t) regsetp->_i386._edx;

		if (__SIGSET_TSTMASK (signal_mask, signal, mask))
			func = SIG_HOLD;

		if (signal_action.sa_handler == SIG_HOLD) {

			__SIGSET_ADDMASK (signal_mask, signal, mask);

			if (func != SIG_HOLD) {
				curr_signal_action (signal, NULL,
						    & signal_action);
				func = signal_action.sa_handler;
			}
			break;
		}

		if (signal == SIGCHLD) {
			/*
			 * With sigset (), the argument implicitly mangles the
			 * SA_NOCLDWAIT flag. I have no idea whether the
			 * SA_NOCLDSTOP flag is also implicitly affected, but
			 * for now we leave it alone.
			 */

			curr_signal_misc (__SF_NOCLDWAIT,
					  signal_action.sa_handler ==
						SIG_IGN ? __SF_NOCLDWAIT : 0);
		}
		__SIGSET_CLRMASK (signal_mask, signal, mask);
		__SIGSET_ADDMASK (signal_action.sa_mask, signal, mask);
		curr_signal_action (signal, & signal_action, & signal_action);

		if (func != SIG_HOLD)
			func = signal_action.sa_handler;
		break;

	case SIGPAUSE:
		/*
		 * Like upause(), do a sleep on an event which never gets a
		 * wakeup. The sleep returns immediately if a signal was
		 * already holding.
		 */

		__SIGSET_CLRMASK (signal_mask, signal, mask);
		curr_signal_mask (& signal_mask, NULL);
		(void) x_sleep ((char *) & u, prilo, slpriSigCatch,
				"sigpause");
		return 0;

	default:
		u.u_error = SIGSYS;
		return 0;
	}

	curr_signal_mask (& signal_mask, NULL);
	return func;
}

/*
 * Send a signal to the process `pp'. This function is only valid for use with
 * signals generated from user level with kill (), sigsend () or
 * sigsendset ().
 */

void
sendsig(sig, pp)
register unsigned sig;
register PROC *pp;
{
	__siginfo_t	siginfo;

#if 0
	T_HAL(8, if (sig == SIGINT) printf("[%d]gets int ", pp->p_pid));
#else
	T_HAL(8, printf ("[%d] sig=%d ", pp->p_pid, sig));
#endif

	siginfo.__si_signo = sig;
	siginfo.__si_code = 0;
	siginfo.__si_errno = 0;
	siginfo.__si_pid = SELF->p_pid;
	siginfo.__si_uid = SELF->p_uid;

	proc_send_signal (pp, & siginfo);
}


/*
 * Return signal number if we have a non ignored or delayed signal, else zero.
 */

int
nondsig()
{
	return curr_signal_pending ();
}


/*
 * If we have a signal that isn't ignored, activate it. The register set is
 * not "const" because the low-level trap code that uses it wants to modify
 * it.
 */

#if	__USE_PROTO__
void curr_check_signals (gregset_t * regsetp)
#else
void
curr_check_signals (regsetp)
gregset_t     *	regsetp;
#endif
{
	register int signum;
	int ptval;

	/*
	 * Fetch an unprocessed signal.
	 * Return if there are none.
	 * The while() structure is only for traced processes.
	 */
	while ((signum = curr_signal_pending ()) != 0) {
		__sigaction_t	signal_action;

		/*
		 * Reset the signal to indicate that it has been processed,
		 * and fetch the signal disposition.
		 */

got_signal:
		proc_unkill (SELF, signum);
		curr_signal_action (signum, NULL, & signal_action);

		/*
		 * Store the signal number in the u area.
		 * This is how a core dump records the death signal.
		 */
		u.u_signo = signum;

		/*
		 * If the signal is not defaulted, go run the requested
		 * function.
		 */

		if (signal_action.sa_handler != SIG_DFL) {
			if (__xmode_286 (regsetp))
				oldsigstart (signum, signal_action.sa_handler,
					     regsetp);
			else
				msigstart (signum, signal_action.sa_handler,
					   regsetp);

	/*
	 * If the signal needs to be reset after delivery, do so. Note that
	 * all signal-related activity goes though the defined function
	 * interface; many subtle things may need to happen, so we let the
	 * layering take care of it.
	 */

			if ((signal_action.sa_flags & __SA_RESETHAND) != 0) {
				signal_action.sa_handler = SIG_DFL;
				curr_signal_action (signum, & signal_action,
						    NULL);
			} else
				sigMask (& signal_action.sa_mask);

			return;
		}

		/*
		 * msysgen() is a nop for COHERENT 4.0.  The comment in the
		 * assembly code is "Nothing useful to save".
		 */

		msysgen (u.u_sysgen);

		/*
		 * When a traced process is signaled, it may need to exchange
		 * data with its parent (via ptret).
		 */

		if ((SELF->p_flags & PFTRAC) != 0) {
			SELF->p_flags |= PFWAIT;
			ptval = ptret (regsetp);

			T_HAL(0x10000, printf("ptret()=%x ", ptval));

			SELF->p_flags &= ~ (PFWAIT | PFSTOP);

			while ((signum = curr_signal_pending ()) != 0)
				proc_unkill (SELF, signum);

			if (ptval == 0)
				/* see if another signal came in */
				continue;

			if ((signum = ptval) != SIGKILL)
				goto got_signal;
		}

		/*
		 * Some signals cause a core file to be written.
		 */
		switch (signum) {
		case SIGQUIT:
		case SIGILL:
		case SIGTRAP:
		case SIGABRT:
		case SIGFPE:
		case SIGSEGV:
		case SIGSYS:
			if (sigdump ())
				signum |= __WCOREFLG;
			break;
		}
		pexit (signum);
	}
}

/*
 * Create a dump of ourselves onto the file `core'.
 */

int
sigdump ()
{
	register INODE *ip;
	register SR *srp;
	register SEG * sp;
	register int n;
	register paddr_t ssize;
	extern	int	DUMP_LIM;
	struct ch_info chInfo;
	IO		io;
	struct direct	dir;

	if (SELF->p_flags & PFNDMP)
		return 0;

	/* Make the core with the real owners */
	schizo ();

	io.io_seg = IOSYS;
	io.io_flag = 0;
	if (ftoi ("core", 'c', & io, & dir)) {
		schizo ();
		return 0;
	}

	if ((ip = u.u_cdiri) == NULL) {
		if ((ip = imake (IFREG | 0644, 0, & io, & dir)) == NULL) {
			schizo ();
			return 0;
		}
	} else {
		if ((ip->i_mode & IFMT) != IFREG || iaccess (ip, IPW) == 0 ||
		    getment (ip->i_dev, 1) == NULL) {
			idetach (ip);
			schizo ();
			return 0;
		}
		iclear (ip);
	}
	schizo ();
	u.u_error = 0;

	/* Write core file header */
	chInfo.ch_magic = CORE_MAGIC;
	chInfo.ch_info_len = sizeof (chInfo);
	chInfo.ch_uproc_offset = U_OFFSET;

	io.io_seek = 0;
	io.io_seg = IOSYS;
	io.io.vbase = & chInfo;
	io.io_ioc = sizeof (chInfo);
	io.io_flag = 0;

	iwrite (ip, & io);

	/*
	 * Added to aid in kernel debugging - if DUMP_TEXT is nonzero,
	 * dump the text segment (to see if it was corrupted) and set
	 * the dump flag so that postmortem utilities will know that
	 * text is present in the core file.
	 */

	if (DUMP_TEXT)
		u.u_segl [SISTEXT].sr_flag |= SRFDUMP;

	for (srp = u.u_segl + 1 ; u.u_error == 0 && srp < u.u_segl + NUSEG ;
	     srp ++) {

		if ((srp->sr_flag & SRFDUMP) == 0)
			continue;

		/* Don't try to dump empty segments. */
		if ((sp = srp->sr_segp) == NULL) {
			srp->sr_flag &= ~SRFDUMP;
			continue;
		}

		/* Don't dump segments too big to dump. */
		if (sp->s_size > DUMP_LIM)
			srp->sr_flag &= ~SRFDUMP;
	}

	/* Always dump the U segment. */
	u.u_segl [SIUSERP].sr_flag |= SRFDUMP;

	for (srp = u.u_segl ; u.u_error == 0 && srp < u.u_segl + NUSEG ;
	     srp ++) {

		/* Only dump segments flagged for dumping. */
		if ((srp->sr_flag & SRFDUMP) == 0)
			continue;

		sp = srp->sr_segp;

		ssize = sp->s_size;
		io.io_seg = IOPHY;
		io.io.pbase = MAPIO (sp->s_vmem, 0);
		io.io_flag = 0;
		sp->s_lrefc ++;
		while (u.u_error == 0 && ssize != 0) {
			n = ssize > SCHUNK ? SCHUNK : ssize;
			io.io_ioc = n;
			iwrite (ip, & io);
			io.io.pbase += n;
			ssize -= (paddr_t) n;
		}
		sp->s_lrefc --;
	}
	idetach (ip);
	return u.u_error == 0;
}

/*
 * Send a ptrace command to the child.
 *
 * "pid" is child pid.
 */

int
ptset(req, pid, addr, data)
unsigned req;
int *addr;
{
	register PROC *pp;

	lock (pnxgate);
	for (pp = procq.p_nforw ; pp != & procq ; pp = pp->p_nforw)
		if (pp->p_pid == pid)
			break;
	unlock (pnxgate);
	if (pp == & procq || (pp->p_flags & PFSTOP) == 0 ||
	    pp->p_ppid != SELF->p_pid) {
		u.u_error = ESRCH;
		return;
	}

	lock (pts.pt_gate);
	pts.pt_req = req;
	pts.pt_pid = pid;
	pts.pt_addr = addr;
	pts.pt_data = data;
	pts.pt_errs = 0;
	pts.pt_rval = 0;
	pts.pt_busy = 1;

	wakeup ((char *) & pts.pt_req);

	while (pts.pt_busy) {
		x_sleep ((char *) & pts.pt_busy, primed, slpriSigCatch,
			 "ptrace");
		/* Send a ptrace command to the child.  */
	}

	u.u_error = pts.pt_errs;
	unlock (pts.pt_gate);
	return pts.pt_rval;
}

/*
 * This routine is called when a child that is being traced receives a signal
 * that is not caught or ignored.  It follows up on any requests by the parent
 * and returns when done.
 *
 * After ptrace handling done in this routine, a real or simulated signal
 * may need to be sent to the traced process.
 * Return a signal number to be sent to the child process, or 0 if none.
 */

static int
ptret (regsetp)
gregset_t     *	regsetp;
{
	extern void (*ndpKfrstor)();
	register PROC *pp;
	register PROC *pp1;
	register int sign;
	unsigned off;
	int doEmUnpack = 0;
	struct _fpstate * fstp = empack ();

	pp = SELF;
next:
	u.u_error = 0;
	if (pp->p_ppid == 1)
		return SIGKILL;
	sign = -1;

	/* wake up parent if it is sleeping */
	lock (pnxgate);
	pp1 = & procq;
	for (;;) {
		if ((pp1 = pp1->p_nforw) == & procq) {
			sign = SIGKILL;
			break;
		}
		if (pp1->p_pid != pp->p_ppid)
			continue;
		if (ASLEEP (pp1))
			wakeup ((char *) pp1);
		break;
	}
	unlock (pnxgate);

	while (sign < 0) {
		/* If no pending ptrace transaction for this process, sleep. */
		if (pts.pt_busy == 0 || pp->p_pid != pts.pt_pid) {
			/*
			 * If a signal bit is set now, just exit - let
			 * actvsig() handle it next time through.
			 * Doing sleep and goto next will stick us in a loop
			 */

			if (nondsig ())
				return 0;
			x_sleep ((char *) & pts.pt_req, primed,
				 slpriSigCatch, "ptret");
			goto next;
		}

		switch (pts.pt_req) {
		case PTRACE_RD_TXT:
			if (__xmode_286 (regsetp)) {
				pts.pt_rval = getuwd (NBPS + pts.pt_addr);
				break;
			}
			/* Fall through for 386 mode processes. */

		case PTRACE_RD_DAT:
			pts.pt_rval = getuwd (pts.pt_addr);
			break;

		case PTRACE_RD_USR:
			/* See ptrace.h for valid offsets. */
			off = (unsigned) pts.pt_addr;
			if (off & 3)
				u.u_error = EINVAL;
			else if (off < PTRACE_FP_CW) {
				/* Reading CPU general register state */
				if (off == PTRACE_SIG)
					pts.pt_rval = u.u_signo;
				else
					pts.pt_rval =
						((int *) regsetp) [off >> 2];
			} else if (off < PTRACE_DR0) {
				/*
				 * Reading NDP state.
				 * If NDP state not already saved, save it.
				 * Fetch desired info.
				 * Restore NDP state in case we will resume.
				 */
				if (rdNdpUser ()) {
					/* if using coprocessor */
					if (! rdNdpSaved ()) {
						ndpSave (& u.u_ndpCon);
						wrNdpSaved (1);
					}
pts.pt_rval = ((int *) & u.u_ndpCon) [(off - PTRACE_FP_CW) >> 2];
					ndpRestore (& u.u_ndpCon);
					wrNdpSaved (0);
				} else if (fstp) {
pts.pt_rval = getuwd(((int *) fstp) + ((off - PTRACE_FP_CW) >> 2));
					/* if emulating */
				} else { /* no ndp state to display */
					pts.pt_rval = 0;
					u.u_error = EFAULT;
				}
			} else /* Bad pseudo offset. */
				u.u_error = EINVAL;
			break;

		case PTRACE_WR_TXT:
			if (__xmode_286 (regsetp)) {
				putuwd (NBPS + pts.pt_addr, pts.pt_data);
				break;
			}
			/* Fall through for 386 mode processes. */

		case PTRACE_WR_DAT:
			putuwd (pts.pt_addr, pts.pt_data);
			break;

		case PTRACE_WR_USR:
			/* See ptrace.h for valid offsets. */
			off = (unsigned) pts.pt_addr;

			if (off & 3)
				u.u_error = EINVAL;
			else if (off < PTRACE_FP_CW) {
				/* Writing CPU general register state */
				if (off == PTRACE_SIG)
					u.u_error = EINVAL;
				else
					((int *) regsetp) [off >> 2] =
						pts.pt_data;
			} else if (off < PTRACE_DR0) {
				if (rdNdpUser ()) {
					/*
					 * Writing NDP state.
					 * If NDP state not already saved, save it.
					 * Store desired info.
					 * Restore NDP state in case we will resume.
					 */
					if (! rdNdpSaved ()) {
						ndpSave (& u.u_ndpCon);
						wrNdpSaved (1);
					}
((int *)&u.u_ndpCon)[(off - PTRACE_FP_CW)>>2] = pts.pt_data;
					ndpRestore (& u.u_ndpCon);
					wrNdpSaved (0);
				} else if (fstp && ndpKfrstor) {
putuwd(((int *)fstp) + ((off - PTRACE_FP_CW)>>2), pts.pt_data);
					doEmUnpack = 1;
				} else { /* No NDP state to modify. */
					u.u_error = EFAULT;
				}
			} else /* Bad pseudo offset. */
				u.u_error = EINVAL;
			break;

		case PTRACE_RESUME:
			regsetp->_i386._eflags &= ~ MFTTB;
			goto sig;

		case PTRACE_TERM:
			sign = SIGKILL;
			break;

		case PTRACE_SSTEP:
			regsetp->_i386._eflags |= MFTTB;
		sig:
			if (pts.pt_data < 0 || pts.pt_data > NSIG) {
				u.u_error = EINVAL;
				break;
			}
			sign = pts.pt_data;
			break;

		default:
			u.u_error = EINVAL;
		}

		if ((pts.pt_errs = u.u_error) == EFAULT)
			pts.pt_errs = EINVAL;

		pts.pt_busy = 0;
		wakeup((char *) & pts.pt_busy);
	}
	if (doEmUnpack)
		(* ndpKfrstor) (fstp, & u.u_ndpCon);
	return sign;
}

/*
 * If using floating point emulator, make room on user stack and save
 * floating point context there.  Code elsewhere takes care of floating
 * point context if there is a coprocessor.
 *
 * Return the virtual address in user space of the context area, or
 * return NULL if not using FP emulation.
 */

static struct _fpstate *
empack (regsetp)
gregset_t     *	regsetp;
{
	int		sphi;
	struct _fpstate * ret;
	SEG	      *	segp = u.u_segl [SISTACK].sr_segp;
	extern void (*ndpKfsave)();
	unsigned long sw_old;

	/* If not emulating, do nothing */
	if (rdNdpUser () || ! rdEmTrapped () || ! ndpKfsave)
		return NULL;

	/*
	 * Will copy at least u_sigreturn, _fpstackframe, and ndpFlags.
	 * If using ndp, need room for an _fpstate.
	 * If emulating, need room for an _fpemstate.
	 */

	ret = (struct _fpstate *)
		(__xmode_286 (regsetp) ? regsetp->_i286._usp :
					 regsetp->_i386._uesp) - 1;

	/* Add to user stack if necessary. */
	sphi = __xmode_286 (regsetp) ? ISP_286 : ISP_386;

	if (sphi - segp->s_size > (__ptr_arith_t) ret) {
		cseg_t	      *	pp;

		pp = c_extend (segp->s_vmem, btoc (segp->s_size));
		if (pp == 0) {
			printf ("Empack failed.  cmd=%s  c_extend(%x,%x)=0 ",
				u.u_comm, segp->s_vmem, btoc (segp->s_size));
			return NULL;
		}

		segp->s_vmem = pp;
		segp->s_size += NBPC;
		if (sproto (0) == 0) {
			printf ("Empack failed.  cmd=%s  sproto(0)=0 ",
				u.u_comm);
			return NULL;
		}

		segload ();
	}

	(* ndpKfsave) (& u.u_ndpCon, ret);
	sw_old = getuwd (& ret->sw);
	putuwd (& ret->status, sw_old);
	putuwd (& ret->sw, sw_old & 0x7f00);

	return ret;
}
@


2.3
log
@*** empty log message ***
@
text
@d134 4
a137 3
usigsys(signal, func)
int	signal;
__sigfunc_t func;
d144 1
a144 1
	sigtype = signal & ~0xFF;
d192 1
a192 1
		u.u_sigreturn = (__sigfunc_t) u.u_regl [EDX];
d218 1
a218 1
		u.u_sigreturn = (__sigfunc_t) u.u_regl [EDX];
d347 1
a390 1
		msysgen(u.u_sysgen);
d392 2
d398 1
d401 2
a402 1
			ptval = ptret();
d404 6
a409 1
			SELF->p_flags &= ~(PFWAIT|PFSTOP);
d413 3
a415 2
			else
				signum = ptval;
d421 1
a421 1
		switch(signum) {
d440 1
d442 1
a442 1
sigdump()
d451 2
d454 1
a454 1
	if (SELF->p_flags&PFNDMP)
d456 1
a456 2
	u.u_io.io_seg  = IOSYS;
	u.u_io.io_flag = 0;
d458 6
a463 3
	schizo();
	if (ftoi("core", 'c')) {
		schizo();
d466 4
a469 3
	if ((ip=u.u_cdiri) == NULL) {
		if ((ip=imake(IFREG|0644, 0)) == NULL) {
			schizo();
d473 4
a476 5
		if ((ip->i_mode&IFMT)!=IFREG
		 || iaccess(ip, IPW)==0
		 || getment(ip->i_dev, 1)==NULL) {
			idetach(ip);
			schizo();
d479 1
a479 1
		iclear(ip);
d481 1
a481 1
	schizo();
a482 1
	u.u_io.io_seek = 0;
d486 1
a486 1
	chInfo.ch_info_len = sizeof(chInfo);
d489 5
a493 4
	u.u_io.io_seg = IOSYS;
	u.u_io.io.vbase = &chInfo;
	u.u_io.io_ioc = sizeof(chInfo);
	u.u_io.io_flag = 0;
d495 1
a495 1
	iwrite(ip, &u.u_io);
d503 1
d505 1
a505 1
		u.u_segl[SISTEXT].sr_flag |= SRFDUMP;
d507 2
a508 1
	for (srp=u.u_segl + 1; u.u_error==0 && srp < u.u_segl + NUSEG; srp++) {
d510 1
a510 1
		if ((srp->sr_flag & SRFDUMP)==0)
d514 1
a514 1
		if ((sp = srp->sr_segp)==NULL) {
d525 1
a525 1
	u.u_segl[SIUSERP].sr_flag |= SRFDUMP;
d527 2
a528 1
	for (srp=u.u_segl; u.u_error==0 && srp < u.u_segl + NUSEG; srp++) {
d531 1
a531 1
		if ((srp->sr_flag & SRFDUMP)==0)
d537 4
a540 4
		u.u_io.io_seg = IOPHY;
		u.u_io.io.pbase = MAPIO(sp->s_vmem, 0);
		u.u_io.io_flag = 0;
		sp->s_lrefc++;
d543 4
a546 4
			u.u_io.io_ioc = n;
			iwrite(ip, &u.u_io);
			u.u_io.io.pbase += n;
			ssize -= (paddr_t)n;
d548 1
a548 1
		sp->s_lrefc--;
d550 2
a551 2
	idetach(ip);
	return (u.u_error==0);
d559 1
d567 2
a568 2
	lock(pnxgate);
	for (pp=procq.p_nforw; pp!=&procq; pp=pp->p_nforw)
d571 3
a573 2
	unlock(pnxgate);
	if (pp==&procq || (pp->p_flags&PFSTOP)==0 || pp->p_ppid!=SELF->p_pid){
d577 2
a578 1
	lock(pts.pt_gate);
d586 3
a588 1
	wakeup((char *)&pts.pt_req);
d594 1
d596 2
a597 2
	unlock(pts.pt_gate);
	return (pts.pt_rval);
d611 2
a612 1
ptret()
d620 1
a621 2
	struct _fpstate * fstp = empack();

d626 1
a626 1
		return (SIGKILL);
d630 2
a631 2
	lock(pnxgate);
	pp1 = &procq;
d633 1
a633 1
		if ((pp1=pp1->p_nforw) == &procq) {
d639 2
a640 2
		if (ASLEEP(pp1))
			wakeup((char *)pp1);
d643 1
a643 1
	unlock(pnxgate);
d647 3
a649 2
		if (pts.pt_busy==0 || pp->p_pid!=pts.pt_pid) {
			/* If a signal bit is set now, just exit - let
d651 4
a654 2
			 * Doing sleep and goto next will stick us in a loop */
			if (nondsig())
d656 2
a657 2
			x_sleep((char *)&pts.pt_req,
			  primed, slpriSigCatch, "ptret");
d660 1
d663 2
a664 2
			if (XMODE_286) {
				pts.pt_rval = getuwd(NBPS+pts.pt_addr);
d668 1
d670 1
a670 1
			pts.pt_rval = getuwd(pts.pt_addr);
d672 1
d675 1
a675 1
			off = (unsigned)pts.pt_addr;
d683 2
a684 1
					pts.pt_rval = u.u_regl[off>>2];
d692 1
a692 1
				if (rdNdpUser()) {
d694 3
a696 3
					if (!rdNdpSaved()) {
						ndpSave(&u.u_ndpCon);
						wrNdpSaved(1);
d698 3
a700 3
pts.pt_rval = ((int *)&u.u_ndpCon)[(off - PTRACE_FP_CW)>>2];
					ndpRestore(&u.u_ndpCon);
					wrNdpSaved(0);
d702 1
a702 1
pts.pt_rval = getuwd(((int *)fstp) + ((off - PTRACE_FP_CW)>>2));
d711 1
d713 2
a714 2
			if (XMODE_286) {
				putuwd(NBPS+pts.pt_addr, pts.pt_data);
d718 1
d720 1
a720 1
			putuwd(pts.pt_addr, pts.pt_data);
d722 1
d725 1
a725 1
			off = (unsigned)pts.pt_addr;
d734 2
a735 1
					u.u_regl[off>>2] = pts.pt_data;
d737 1
a737 1
				if (rdNdpUser()) {
d744 3
a746 3
					if (!rdNdpSaved()) {
						ndpSave(&u.u_ndpCon);
						wrNdpSaved(1);
d749 2
a750 2
					ndpRestore(&u.u_ndpCon);
					wrNdpSaved(0);
d760 1
d762 1
a762 1
			u.u_regl[EFL] &= ~MFTTB;
d764 1
d768 1
d770 1
a770 1
			u.u_regl[EFL] |= MFTTB;
d772 1
a772 1
			if (pts.pt_data<0 || pts.pt_data>NSIG) {
a776 3
			if (pts.pt_addr != SIG_IGN) {
				u.u_regl[EIP] = (int)pts.pt_addr;
			}
d778 1
d782 2
a783 1
		if ((pts.pt_errs=u.u_error) == EFAULT)
d785 1
d787 1
a787 1
		wakeup((char *)&pts.pt_busy);
d790 2
a791 2
		(*ndpKfrstor)(fstp, &u.u_ndpCon);
	return (sign);
d802 1
d804 2
a805 1
empack()
d807 3
a809 5
	int uesp;
	int sphi, splo;
	SEG * segp;
	cseg_t * pp;
	struct _fpstate * ret = NULL;
d814 1
a814 1
	if (rdNdpUser() || !rdEmTrapped() || !ndpKfsave)
a821 1
	uesp = u.u_regl[UESP] - sizeof(struct _fpstate);
d823 4
d828 1
a828 3
	segp = u.u_segl[SISTACK].sr_segp;
	sphi = (XMODE_286) ? ISP_286 : ISP_386;
	splo = sphi - segp->s_size;
d830 7
a836 5
	if (splo > uesp) {
		pp = c_extend(segp->s_vmem, btoc(segp->s_size));
		if (pp==0) {
			printf("Empack failed.  cmd=%s  c_extend(%x,%x)=0 ",
			  u.u_comm, segp->s_vmem, btoc(segp->s_size));
d842 3
a844 3
		if (sproto(0)==0) {
			printf("Empack failed.  cmd=%s  sproto(0)=0 ",
			  u.u_comm);
d848 1
a848 1
		segload();
d851 4
a854 5
	ret = (struct _fpstate *)uesp;
	(*ndpKfsave)(&u.u_ndpCon, uesp);
	sw_old = getuwd(&ret->sw);
	putuwd(&ret->status, sw_old);
	putuwd(&ret->sw, sw_old & 0x7f00);
@


2.2
log
@From Nigel
@
text
@d191 1
a191 1
		u.u_sigreturn = u.u_regl [EDX];
d217 1
a217 1
		u.u_sigreturn = u.u_regl [EDX];
d362 2
a363 1
				oldsigstart(signum, signal_action.sa_handler);
d365 2
a366 2
				msigstart(signum, signal_action.sa_handler,
					  regsetp);
d441 1
a441 1
		return (0);
d448 1
a448 1
		return (0);
d453 1
a453 1
			return (0);
d461 1
a461 1
			return (0);
a478 1
	sp->s_lrefc++;
a479 1
	sp->s_lrefc--;
d490 1
a490 1
	for (srp=u.u_segl; u.u_error==0 && srp<&u.u_segl[NUSEG]; srp++) {
d506 2
a507 1
	for (srp=u.u_segl; u.u_error==0 && srp<&u.u_segl[NUSEG]; srp++) {
d509 2
d515 2
d626 1
a626 1
			if (nondsig ())
d628 2
a629 2
			x_sleep ((char *) & pts.pt_req, primed, slpriSigCatch,
				 "ptret");
d672 1
a672 1
				} else /* no ndp state to display */
d674 3
a676 1
			} else
d718 2
d721 1
a721 1
			} else
@


2.1
log
@Last Pre-STREAMS kernel
@
text
@d26 6
d33 1
a33 1
#include <errno.h>
d41 1
a41 1
#include <signal.h>
d44 1
a52 1
typedef void (*VFPTR)();	/* pointer to void function */
d61 1
a61 3
int	actvsig();
int	nondsig();
int	ptret();
a63 6
void	sigDefault();
void	sigHold();
void	sigIgnore();
void	sigPause();
void	sigRelease();
int	sigSet();
d65 1
a65 1
int	usigsys();
d68 1
d84 13
a96 3
 * Patch CATCH_SEGV nonzero if you are trying to run software that was
 * written in blatant defiance of the SVID 2 caution that handling SIGSEGV
 * is nonportable and should not be assumed valid on all systems.
d98 1
d109 1
a109 6
 * Given 1-based signal number, ask whether a signal handler was
 * attached to the current process using sigset().  This allows
 * the kernel to process sigset() differently from signal(), as
 * required.
 *
 * return 1 if sigset(), 0 if not.
d111 4
a114 3
int
sigSet(signal)
int signal;
d116 3
a118 2
	return (SELF->p_dsig & SIG_BIT(signal)) ? 1 : 0;
}
d120 1
a120 13
/*
 * Given 1-based signal number, ignore that signal in the current process.
 */
void
sigIgnore(signal)
int signal;
{
	int sigbit = SIG_BIT(signal);

	SELF->p_dfsig &= ~sigbit;	/* No longer defaulted.  */
	SELF->p_isig |= sigbit;		/* Mark signal as ignored.  */
	u.u_sfunc[signal - 1] = SIG_IGN;
}
d122 2
a123 12
/*
 * Given 1-based signal number, restore default handling for the current
 * process.
 *
 * There is some duplication of work done in sigAttach(), but sigDefault()
 * is also called from msig.c
 */
void
sigDefault(signal)
int signal;
{
	int sigbit = SIG_BIT(signal);
d125 1
a125 3
	SELF->p_dfsig |= sigbit;
	SELF->p_isig &= ~sigbit;
	u.u_sfunc[signal - 1] = SIG_DFL;
d128 1
d130 1
a130 1
 * Given 1-based signal number, hold that signal for the current process.
d132 5
a136 3
void
sigHold(signal)
int signal;
d138 4
a141 2
	SELF->p_hsig |= SIG_BIT(signal);
}
d143 7
a149 9
/*
 * Given 1-based signal number, pause for that signal for the current process.
 */
void
sigPause(signal)
int signal;
{
	SELF->p_hsig &= ~SIG_BIT(signal);

d151 2
a152 2
	 * Like upause(), do a sleep on an event which never gets a wakeup.
	 * The sleep returns immediately if a signal was already holding.
a153 3
	x_sleep((char *)&u, prilo, slpriSigCatch, "sigpause");
	actvsig();
}
d155 5
a159 10
/*
 * Given 1-based signal number, release that signal for the current process.
 */
void
sigRelease(signal)
int signal;
{
	SELF->p_hsig &= ~SIG_BIT(signal);
	if (nondsig()) {
		actvsig();
a160 1
}
d162 4
a165 21
/*
 * Given 1-based signal number, a pointer to a signal-handling function,
 * and a flag, attach the signal handler to the current process.
 *
 * Function pointer "func" may take on special values SIG_DFL, SIG_IGN,
 * and, if "how" is SIGSET, SIG_HOLD.
 *
 * The flag "how" is 0 if attachment is via signal(), SIGSET if attachment
 * is via sigset().
 *
 * Return the previously attached signal handler, or SIG_HOLD if signals
 * were previously held.
 */
VFPTR
sigAttach(signal, func, how)
int signal;
VFPTR func;
int how;
{
	VFPTR retval;
	int sigbit = SIG_BIT(signal);
d167 1
a167 10
	/*
	 * Set up the return value, which says what was previously
	 * done with the given signal.
	 */
	if (SELF->p_isig & sigbit)
		retval = (VFPTR)SIG_IGN;
	else if (SELF->p_hsig & sigbit)
		retval = (VFPTR)SIG_HOLD;
	else
		retval = u.u_sfunc[signal - 1];
d169 1
a169 2
	u.u_sigreturn = (VFPTR)(u.u_regl[EDX]);
	u.u_sfunc[signal - 1] = func;
d171 4
a174 6
	/*
	 * Remove previous default, ignore, or hold status.
	 */
	SELF->p_dfsig &= ~sigbit;
	SELF->p_isig &= ~sigbit;
	SELF->p_hsig &= ~sigbit;
d176 3
a178 4
	/*
	 * Any pending signal is lost.
	 */
	SELF->p_ssig &= ~sigbit;
d180 4
a183 6
	/*
	 * Special cases for handler.
	 */
	switch ((int)func) {
	case (int)SIG_DFL:
		sigDefault(signal);
a184 7
	case (int)SIG_IGN:
		sigIgnore(signal);
		break;
	case (int)SIG_HOLD:
		sigHold(signal);
		break;
	}
d186 6
a191 7
	/*
	 * Remember whether handler was attached with sigset() vs signal().
	 */
	if (how == SIGSET)
		SELF->p_dsig |= sigbit;
	else
		SELF->p_dsig &= ~sigbit;
d193 7
a199 2
	return retval;
}
d201 6
a206 10
/*
 * Set up the action to be taken on a signal.
 */
int
usigsys(signal, func)
int	signal;
VFPTR func;
{
	int	sigtype;
	int	retval = 0;
d208 4
a211 2
	sigtype = signal & ~0xFF;
	signal &= 0xFF;
d213 2
a214 2
	T_HAL(8, if (signal == SIGINT)
	  printf("[%d]sigint(%x, %x) ", SELF->p_pid, sigtype, func));
d216 2
a217 5
	/* Range check on 1-based signal number. */
	if (signal <= 0 || signal > NSIG) {
		u.u_error = EINVAL;
		return;
	}
d219 2
a220 10
	/*
	 * Don't allow setting/holding/releasing some signals.
	 *
	 * NOTICE:  Ignoring SIGSEGV causes runaway user faults.
	 * SVID Issue 2 says *don't* do signal(SIGSEGV,...)!!!
	 */
	if (signal == SIGKILL) {
		u.u_error = EINVAL;
		return;
	}
d222 30
a251 8
	if (signal == SIGSEGV && CATCH_SEGV == 0) {
		u.u_error = EINVAL;
		return;
	}
	 
	switch (sigtype) {
	case SIGHOLD:
		sigHold(signal);
d253 1
a253 12
	case SIGRELSE:
		sigRelease(signal);
		break;
	case SIGIGNORE:
		sigIgnore(signal);
		break;
	case 0:				/* old system entry */
		retval = (int)sigAttach(signal, func, 0);
		break;
	case SIGSET:			/* new system entry */
		retval = (int)sigAttach(signal, func, SIGSET);
		break;
d255 12
a266 2
		sigPause(signal);
		break;
d269 1
a269 1
		break;
d271 3
a273 1
	return retval;
d277 3
a279 4
 * Send a signal to the process `pp'.
 * Return 1 if signal was sent.
 * Return 0 if signal was ignored.
 * The return value is of use to the trap handler.
d281 1
d287 1
a287 2
	register sig_t f;
	register int s;
d289 1
d291 3
d295 5
a299 4
	/*
	 * Convert the signal to a bit position.
	 */
	f = SIG_BIT(sig);
d301 2
a302 6
	/*
	 * If the signal is ignored, and is not SIGCLD, do nothing.
	 */
	if ((pp->p_isig & f) && sig != SIGCLD) {
		goto sendSigDone;
	}
a303 10
	/*
	 * No further processing for delayed or held signals.
	 */
	if ((pp->p_ssig & f) && (pp->p_hsig|pp->p_dsig) & f)
		goto sendSigDone;
	
	/*
	 * Actually send the signal by flagging the needed bit.
	 */
	pp->p_ssig |= f;
a304 18
	/*
	 * If the process is sleeping, wake it up so that
	 * it can process this signal.
	 */
	if (pp->p_state == PSSLSIG) {
		s = sphi();
		pp->p_lback->p_lforw = pp->p_lforw;
		pp->p_lforw->p_lback = pp->p_lback;
#ifndef _I386
		addu(pp->p_cval, (utimer-pp->p_lctim)*CVCLOCK);
#endif
		setrun(pp);
		spl(s);
	}
sendSigDone:
	return;
}

d308 1
d312 2
a313 3
	register PROC *pp;
	register sig_t mask;
	register int signo;
a314 2
	pp = SELF;
	signo = 0;
a315 24
	/*
	 * Turn off all ignored signals except SIGCLD.
	 */
	pp->p_ssig &= ~(pp->p_isig & ~SIG_BIT(SIGCLD));

	/*
	 * If any signals have arrived, but which are not held,
	 * figure out what they are.
	 */
	if (pp->p_ssig&~pp->p_hsig) {
		/*
		 * There is at least one signal.  Extract its number
		 * from the signal bits.
		 */
		mask = (sig_t) 1;
		signo += 1;
		while (((pp->p_ssig&~pp->p_hsig) & mask) == 0) {
			mask <<= 1;
			signo += 1;
		}
	}
	return signo;
}

d317 3
a319 1
 * If we have a signal that isn't ignored, activate it.
d321 8
a328 2
int
actvsig()
a330 2
	register PROC *pp;
	register int (*func)();
d338 2
a339 1
	while (signum = nondsig()) {
a340 2
		pp = SELF;

d342 2
a343 3
		 * Reset the signal to indicate that it has been processed.
		 * Bit table p_ssig uses 0-based signals, while signal.h
		 * lists 1-based signals.
a344 1
		pp->p_ssig &= ~SIG_BIT(signum);
d346 3
d350 2
a351 3
		 * Fetch the user function that goes with this signal.
		 * Function table u_sfunc uses 0-based signals, while signal.h
		 * lists 1-based signals.
a352 12
		func = u.u_sfunc[signum-1];

		/*
		 * SIGCLD causes no work here if defaulted or ignored.
		 */
		if (signum == SIGCLD && (func == SIG_DFL || func == SIG_IGN))
			return;

		/*
		 * Store the (1-based) signal number in the u area.
		 * This is how a core dump records the death signal.
		 */
d359 22
a380 6
		if (func != SIG_DFL) {
			if (XMODE_286)
				oldsigstart(signum, func);
			else {
				msigstart(signum, func);
			}
a384 4
		 * ASSERTION:  the signal being processed is SIG_DFL'd.
		 */

		/*
d394 2
a395 2
		if (pp->p_flags&PFTRAC) {
			pp->p_flags |= PFWAIT;
d398 1
a398 1
			pp->p_flags &= ~(PFWAIT|PFSTOP);
d417 2
a418 2
			if (sigdump())
				signum |= 0x80;
d421 1
a421 1
		pexit(signum);
d440 1
a440 1
		return 0;
d447 1
a447 1
		return 0;
d452 1
a452 1
			return 0;
d460 1
a460 1
			return 0;
d478 1
d480 1
d491 1
a491 1
	for (srp=u.u_segl + 1; u.u_error==0 && srp < u.u_segl + NUSEG; srp++) {
d507 1
a507 2
	/* Always dump the U segment. */
	u.u_segl[SIUSERP].sr_flag |= SRFDUMP;
a508 2
	for (srp=u.u_segl; u.u_error==0 && srp < u.u_segl + NUSEG; srp++) {

a512 2
		sp = srp->sr_segp;

d562 2
a563 1
		x_sleep((char *)&pts.pt_busy, primed, slpriSigCatch, "ptrace");
d580 2
a581 1
int
d622 1
a622 1
			if (nondsig())
d624 2
a625 2
			x_sleep((char *)&pts.pt_req,
			  primed, slpriSigCatch, "ptret");
d668 1
a668 1
				} else { /* no ndp state to display */
d670 1
a670 3
					u.u_error = EFAULT;
				}
			} else /* Bad pseudo offset. */
a711 2
				} else { /* No NDP state to modify. */
					u.u_error = EFAULT;
d713 1
a713 1
			} else /* Bad pseudo offset. */
@
