head     2.2;
branch   ;
access   ;
symbols  ;
locks    bin:2.2;
comment  @ * @;


2.2
date     93.07.20.11.15.28;  author bin;  state Exp;
branches ;
next     2.1;

2.1
date     93.07.07.10.34.08;  author root;  state Exp;
branches ;
next     ;


desc
@@


2.2
log
@*** empty log message ***
@
text
@/*
 * i386/msig.c
 *
 * signal handler start and return
 *
 * Revised: Tue May 11 14:24:00 1993 CDT
 */

/*
 * ----------------------------------------------------------------------
 * Includes.
 */

#include <common/_gregset.h>
#include <kernel/sigproc.h>
#include <sys/debug.h>

#include <sys/coherent.h>

/*
 * ----------------------------------------------------------------------
 * Definitions.
 *	Constants.
 *	Macros with argument lists.
 *	Typedefs.
 *	Enums.
 */

/*
 * ----------------------------------------------------------------------
 * Functions.
 *	Import Functions.
 *	Export Functions.
 *	Local Functions.
 */
void	msigend();
void	msigstart();

/*
 * ----------------------------------------------------------------------
 * Global Data.
 *	Import Variables.
 *	Export Variables.
 *	Local Variables.
 */
extern void	(*ndpKfsave)();
extern void	(*ndpKfrstor)();

/*
 * ----------------------------------------------------------------------
 * Code.
 */

/*
 * msigstart(signum, func)
 *
 * signum is 1-based signal number
 * func points to signal handler in user text, which is the address of a
 *	real handler and not a cookie such as SIG_DFL.
 *
 * This routine will set up the stack as shown before entering the user
 * signal handler:
 *
 *	ndp/emulator context (struct _fpstate or struct _fpemstate or absent)
 *	ndp/emulator flags
 *	previous signal mask
 *	fpstackframe:
 *		wsp (Weitek context pointer - always null, but part of BCS)
 *		fpsp (floating point context pointer, possibly null)
 *		CPU register set (SS+1 long registers)
 *		1-based signal number (user can overwrite this one)
 *	u.u_sigreturn (in place of user return address)
 */

/*
 * A special define for signal stack arithmetic:
 * Will copy at least u_sigreturn, _fpstackframe, previous mask, and ndpFlags.
 * Note that _fpstackframe is an iBCS2 anomaly, not present in the ABI; below
 * we define a structure with similar data and identical structure up to a
 * point.
 */

struct basic_signal_frame {
	ulong_t		sf_sigreturn;
	struct _fpstackframe _thank_you_intel;

	/*
	 * From this point on is not subject to iBCS2.
	 */

	__sigset_t	sf_signal_mask;
	ulong_t		sf_ndpflags;
};
#define	sf_signo	_thank_you_intel.signo
#define	sf_regset	_thank_you_intel.regs [0]
#define	sf_fpsp		_thank_you_intel.fpsp
#define	sf_weitekp	_thank_you_intel.wsp

/*
 * Be careful! sf_regset yields something not quite the right size!
 */
#define	SF_REGSET(rs)	(* (gregset_t *) & (rs).sf_regset)

void
msigstart(signum, func, regsetp)
__sigfunc_t	func;
gregset_t     *	regsetp;
{
	register int uesp;
	int sphi, splo;
	SEG * segp;
	cseg_t * pp;
	int sigArea;	/* number of bytes written to user's stack */
	struct _fpstate * fpsp;
	struct basic_signal_frame
			signal_frame;

	/*
	 * The following is all highly specific to i386 tasks. Also, check
	 * that our notion of general-register set matches the iBCS2 cookies.
	 */

	ASSERT (__xmode_286 (regsetp) == 0);
	ASSERT ((SS + 1) * sizeof (long) == sizeof (gregset_t));

	/*
	 * Will copy at least u_sigreturn, _fpstackframe, and ndpFlags.
	 * If using ndp, need room for an _fpstate.
	 * If emulating, need room for an _fpemstate.
	 * Fp context is immediately above regular signal context.
	 */

	sigArea = sizeof (signal_frame);
	uesp = regsetp->_i386._uesp;

	if (rdNdpUser () || rdEmTrapped ()) {
		fpsp = (struct _fpstate *) uesp - 1;
		sigArea += sizeof (struct _fpstate);
	} else
		fpsp = 0;

	uesp -= sigArea;

	/* Add to user stack if necessary. */
	segp = u.u_segl[SISTACK].sr_segp;
	sphi = ISP_386;
	splo = sphi - segp->s_size;

	if (splo > uesp) {
		pp = c_extend(segp->s_vmem, btoc(segp->s_size));
		if (pp==0) {
			printf("Signal failed.  cmd=%s  c_extend(%x,%x)=0 ",
			  u.u_comm, segp->s_vmem, btoc(segp->s_size));
			return;
		}

		segp->s_vmem = pp;
		segp->s_size += NBPC;
		if (sproto(0)==0) {
			printf("Signal failed.  cmd=%s  sproto(0)=0 ",
			  u.u_comm);
			return;
		}

		segload();
	}

	/*
	 * Build signal stack frame locally and copy as a group.
	 */

	curr_signal_mask (NULL, & signal_frame.sf_signal_mask);

	signal_frame.sf_weitekp = 0;
	signal_frame.sf_fpsp = fpsp;

	SF_REGSET (signal_frame) = * regsetp;
	signal_frame.sf_signo = signum;
	signal_frame.sf_sigreturn = u.u_sigreturn;

	/*
	 * Turn off single-stepping, and set up user registers.
	 */

	regsetp->_i386._eflags &= ~ MFTTB;
	regsetp->_i386._eip = func;
	regsetp->_i386._uesp = uesp;

	/*
	 * We are about to enter a signal handling function for the process.
	 * If current process is using ndp
	 *   copy ndp state and related flags into signal handler stack
	 *   mark the process as not using ndp
	 *   arm EM traps in case signal handler uses ndp
	 * Else if process is using emulator
	 *   copy emulator state and flags into signal handler stack
	 *   mark the process as not using emulator
	 * Else
	 *   put ndp/emulator flags on stack
	 */

	if (rdNdpUser ()) {
		/* if ndp state not saved yet for this process, save it now */
		if (! rdNdpSaved ()) {
			ndpSave (& u.u_ndpCon);
			wrNdpSaved (1);
		}

		signal_frame.sf_ndpflags = u.u_ndpFlags;

		kucopy (& u.u_ndpCon, fpsp, sizeof (struct _fpstate));
		ndpDetach ();

		wrNdpUser (0);
		wrNdpSaved (0);
		ndpEmTraps (1);
	} else {
		signal_frame.sf_ndpflags = u.u_ndpFlags;

		if (rdEmTrapped()) {
			if (ndpKfsave) {
				unsigned long sw_old;

				(* ndpKfsave) (& u.u_ndpCon, fpsp);
				sw_old = getuwd (& fpsp->sw);
				putuwd (& fpsp->status, sw_old);
				putuwd (& fpsp->sw, sw_old & 0x7f00);
			}
			wrEmTrapped(0);
		}
	}

	if (kucopy (& signal_frame, uesp, sizeof (signal_frame)) !=
			sizeof (signal_frame)) {
		printf ("Could not build signal frame!\n");
		return;
	}
}

void
msigend (regset)
gregset_t	regset;
{
	int savedNdpFlags;
	int sigNdpUser;
	int		temp;
	__sigset_t	signal_mask;
	struct basic_signal_frame
		      *	signal_framep;

	/*
	 * Retrieved saved signal mask and ndp flags; note that the sigreturn
	 * and signo members of the signal frame have vanished.
	 */

	signal_framep = (struct basic_signal_frame *) (regset._i386._uesp -
						       2 * sizeof (ulong_t));
	ASSERT (getuwd (& signal_framep->sf_weitekp) == 0);

	temp = ukcopy (& signal_framep->sf_signal_mask, & signal_mask,
		       sizeof (signal_mask));
	ASSERT (temp == sizeof (signal_mask));

	curr_signal_mask (& signal_mask, NULL);

	savedNdpFlags = getuwd (& signal_framep->sf_ndpflags);

	sigNdpUser = rdNdpUser ();
	u.u_ndpFlags = savedNdpFlags;

	/*
	 * We are about to leave a signal handling function for this process.
	 * If signal function for this process was using ndp
	 * And main process was *not* using ndp
	 *   Detach signal function from ndp
	 *   Restore current EM to its pre-signal value.
	 * If main process *was* using ndp
	 *   restore its ndp state and make it ndp owner again.
	 * If main process was using emulator
	 *   restore emulator state.
	 */
	if (sigNdpUser && !rdNdpUser()) {
		ndpDetach();
		ndpEmTraps(1);
	}

	if (rdNdpUser()) {
		ndpEmTraps(0);

		ASSERT (signal_framep + 1 == getuwd (& signal_framep->sf_fpsp));
		temp = ukcopy (signal_framep + 1, & u.u_ndpCon,
			       sizeof (struct _fpstate));
		ASSERT (temp == sizeof (struct _fpstate));

		ndpRestore (& u.u_ndpCon);
		wrNdpSaved (0);
		ndpMine();
	} else if (rdEmTrapped () && ndpKfrstor)
		(* ndpKfrstor) (signal_framep + 1, & u.u_ndpCon);

	/* Restore user process state to pre-signal values */

	temp = ukcopy (& signal_framep->sf_regset, & regset, sizeof (regset));
	ASSERT (temp == (SS + 1) * sizeof (long));
}
@


2.1
log
@Last Pre-STREAMS kernel
@
text
@d13 5
d58 2
a59 2
 * func points to signal handler in user text,
 *   or func is magic value (SIG_DFL, etc.)
d66 1
d71 1
a71 1
 *		1-based signal number
d77 4
a80 1
 * Will copy at least u_sigreturn, _fpstackframe, and ndpFlags.
a81 1
#define SIG_AREA_BASE	(sizeof(struct _fpstackframe) + 2 * sizeof(long))
d83 21
d105 3
a107 1
msigstart(signum, func)
d115 2
d119 2
a120 4
	 * If signal handler was attached with sigset(), temporarily
	 * hold further instances of the same signal.
	 * Otherwise, signal handler was attached with signal(), so
	 * unless at a breakpoint, we detach it and restore SIG_DFL handling.
a121 4
	if (sigSet(signum))
		sigHold(signum);
	else if (signum != SIGTRAP)
		sigDefault(signum);
d123 3
d130 1
a131 4
	sigArea = SIG_AREA_BASE;
	if (rdNdpUser() || rdEmTrapped())
		sigArea += sizeof(struct _fpstate);
	uesp = u.u_regl[UESP] - sigArea;
d133 11
d146 1
a146 1
	sphi = (XMODE_286) ? ISP_286 : ISP_386;
d169 1
a169 2
	 * Set the ndp/emulator context pointer fpsp.
	 * Fp context is immediately above SIG_AREA_BASE.
a170 4
	if (rdNdpUser() || rdEmTrapped())
		fpsp = (struct _fpstate *)(uesp + SIG_AREA_BASE);
	else
		fpsp = 0;
d172 9
d182 1
a182 1
	 * Write fpsp and wsp (Weitek state pointer always null).
a183 2
	putuwd(uesp + (SS+3) * sizeof(long), fpsp);
	putuwd(uesp + (SS+4) * sizeof(long), 0);
d185 3
a187 6
	kucopy(u.u_regl, uesp + 2*sizeof(long), (SS+1) * sizeof(long));
	putuwd(uesp+sizeof(long), signum);
	putuwd(uesp, u.u_sigreturn);
	u.u_regl[EFL] &= ~MFTTB;
	u.u_regl[EIP] = func;
	u.u_regl[UESP] = uesp;
d201 2
a202 1
	if (rdNdpUser()) {
d204 3
a206 3
		if (!rdNdpSaved()) {
			ndpSave(&u.u_ndpCon);
			wrNdpSaved(1);
d209 1
a209 1
		putuwd(uesp + (SS+5) * sizeof(long), u.u_ndpFlags);
d211 2
a212 2
		kucopy(&u.u_ndpCon, fpsp, sizeof(struct _fpstate));
		ndpDetach();
d214 16
a229 11
		wrNdpUser(0);
		wrNdpSaved(0);
		ndpEmTraps(1);
	} else if (rdEmTrapped()) {
		putuwd(uesp + (SS+5) * sizeof(long), u.u_ndpFlags);
		if (ndpKfsave) {
			unsigned long sw_old;
			(*ndpKfsave)(&u.u_ndpCon, fpsp);
			sw_old = getuwd(&fpsp->sw);
			putuwd(&fpsp->status, sw_old);
			putuwd(&fpsp->sw, sw_old & 0x7f00);
a230 3
		wrEmTrapped(0);
	} else {
		putuwd(uesp + (SS+5) * sizeof(long), u.u_ndpFlags);
d232 6
d241 2
a242 2
msigend(gs, fs, es, ds, edi, esi, ebp, esp, ebx, edx, ecx, eax, trapno, err,
  eip, cs, efl, uesp, ss)
a243 2
	register int signo;
	register PROC *pp = SELF;
d246 4
a250 2
	u.u_regl = &gs;

d252 2
a253 7
	 * BOGUS - assumes nothing clobbers user stack.
	 * There is a small probability that the u_sigreturn code,
	 * which is
	 *	add	$4,%esp
	 *	lcall	$0xf,$0
	 * might get a signal hit between the first and second instructions.
	 * This will clobber the value being fetched to signo.
a254 1
	signo = getuwd(uesp-sizeof(long)); 
d256 3
a258 1
	savedNdpFlags = getuwd(uesp + (SS+3) * sizeof(long));
d260 9
a268 1
	sigNdpUser = rdNdpUser();
d289 8
a296 4
		ukcopy(uesp + (SS+4)*sizeof(long), &u.u_ndpCon,
		  sizeof(struct _fpstate));
		ndpRestore(&u.u_ndpCon);
		wrNdpSaved(0);
d298 2
a299 4
	} else if (rdEmTrapped()) {
		if (ndpKfrstor)
			(*ndpKfrstor)(uesp + (SS+4)*sizeof(long), &u.u_ndpCon);
	}
d301 1
a301 2
	/* Restore process state to pre-signal values. */
	ukcopy(uesp, u.u_regl, (SS+1) * sizeof(long));
d303 2
a304 7
	/*
	 * If the signal has been sigset simulate a sigrelse(signal).
	 *
	 * As per S5, if the user's signal handler tries to do a sighold,
	 * it will be ignored.
	 */
	sigRelease(signo);
@
