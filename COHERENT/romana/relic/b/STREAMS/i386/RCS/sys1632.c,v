head     2.4;
branch   ;
access   ;
symbols  ;
locks    bin:2.4;
comment  @ * @;


2.4
date     93.08.09.13.39.39;  author bin;  state Exp;
branches ;
next     2.3;

2.3
date     93.07.20.11.16.04;  author bin;  state Exp;
branches ;
next     2.2;

2.2
date     93.07.14.14.03.18;  author root;  state Exp;
branches ;
next     2.1;

2.1
date     93.07.07.10.34.19;  author root;  state Exp;
branches ;
next     ;


desc
@@


2.4
log
@Kernel 82 changes
@
text
@/*
 * i386/sys1632.c
 *
 * This file contains the code for those system calls whose implementation
 * must vary, according to system call arguments size (16 or 32 bits)
 *
 * exec: argv[], envp[] pointers (ingoing and outgoing)
 * istat:alignment of longs (called by ustat, ufstat in [sys?.c])
 * ftime:alignment of longs
 * lseek:argument is a long pointer
 * dup, dup2: old implementation
 *
 * Revised: Fri Jul 16 12:23:39 1993 CDT
 */

#include <common/_limits.h>
#include <common/_tricks.h>
#include <common/_gregset.h>
#include <sys/debug.h>

#include <sys/coherent.h>
#include <sys/acct.h>
#include <sys/buf.h>
#include <canon.h>
#include <sys/con.h>
#include <sys/errno.h>
#include <sys/filsys.h>
#include <sys/ino.h>
#include <sys/inode.h>
#include <l.out.h>
#include <sys/proc.h>
#include <sys/sched.h>
#include <sys/seg.h>
#include <signal.h>
#include <sys/oldstat.h>
#include <sys/timeb.h>
#include <sys/fd.h>

#include <kernel/systab.h>


/*
 * emulate a 16 bit system call
 * called from trap.c
 */

static char cvtsig [] = 
{
	0,
	SIGHUP, SIGINT, SIGQUIT, SIGALRM, SIGTERM, SIGPWR, 
	SIGSYS, SIGPIPE, SIGKILL, SIGTRAP, SIGSEGV,
	SIGEMT, /* SIGDIVE */
	SIGEMT, /* SIGOVFL */
	SIGUSR1,
	SIGUSR2,
	SIGUSR2
};

int	ostat();
int	ofstat();
int	oftime();
int	upgrp();
int	ugetuid();
int	ugetgid();
int	usysi86();
int	ulock();
int	ufcntl();
int	uexece();
int	obrk();
long	oalarm2 ();
long	otick ();


/*
 * Duplicate a file descriptor number.  This has the same calling
 * sequence as the dup2 system call and even uses the silly DUP2 bit.
 */

coh286dup(ofd, nfd)
register unsigned ofd;
register unsigned nfd;
{
	register FD *fdp;

	if ((fdp = fdget (ofd & ~ DUP2)) == NULL)
		return -1;
	if ((ofd & DUP2) != 0) {
		if (nfd >= NOFILE) {
			SET_U_ERROR (EBADF, "coh286dup ()");
			return -1;
		}
		ofd &= ~ DUP2;
		if (ofd == nfd)
			return nfd;
		if (u.u_filep [nfd] != NULL) {
			fdclose (nfd);
			if (u.u_error)
				return -1;
		}
	} else
		nfd = 0;

	return fddup (ofd, nfd);
}


int
ostime (timep)
time_t	      *	timep;
{
	return ustime (getuwd (timep));
}


int
opipe (pipep)
short	      *	pipep;
{
	short		res;

	res = upipe ();

	putusd (pipep, res);
	putusd (pipep + 1, u.u_rval2);
	return 0;
}


int
osetpgrp ()
{
	upgrp (1);
}

int
ogetpgrp ()
{
	upgrp (0);
}


int
ogeteuid ()
{
	(void) ugetuid ();
	return u.u_rval2;
}

int
ogetegid ()
{
	(void) ugetgid ();
	return u.u_rval2;
}


int
ounique ()
{
	return usysi86 (SYI86UNEEK);
}


int
okill (pid, signal)
short		pid;
unsigned	signal;
{
	if (signal >= __ARRAY_LENGTH (cvtsig)) {
		SET_U_ERROR (EINVAL, "286 kill ()");
		return -1;
	}

	return ukill (pid, cvtsig [signal]);
}


__sigfunc_t
osignal (signal, func, regsetp)
unsigned	signal;
__sigfunc_t	func;
gregset_t     *	regsetp;
{
	if (signal >= __ARRAY_LENGTH (cvtsig)) {
		SET_U_ERROR (EINVAL, "286 signal ()");
		return -1;
	}

	return usigsys (cvtsig [signal], func, regsetp);
}


#if	__SHRT_BIT != 16
# error	This code expects 16-bit shorts
#endif

long
olseek (fd, seeklo, seekhi, whence)
unsigned	fd;
unsigned short	seeklo;
unsigned short	seekhi;
unsigned	whence;
{
	return ulseek (fd, seeklo + (seekhi << 16), whence);
}


/* msgsys, shmsys, and semsys are not emulated */
/* poll is not emulated;NOTE:the code calls putuwd */

int
oldsys (regsetp)
gregset_t     *	regsetp;
{
	register struct	systab	*stp;
	unsigned int	callnum;
	int		i;
	int		res;
	int		args [MSACOUNT];

	u.u_error = 0;
	callnum = getusd (NBPS + regsetp->_i286._ip - sizeof (short));

	/*
	 * Check that we are on an INT instruction, and that the fetch did
	 * not cause a memory fault. Note that the magic NBPS number above,
	 * which presumably means "Number of Bytes Per Segment", is how to
	 * get to 286 code.
	 */

	if (u.u_error || (callnum & 0xFF) != 0xCD) 
		return SIGSYS;
	callnum = (callnum >> 8) & 0x7F;

	/* Print out this 286 call number only if tracing is on.  */
	T_PIGGY (0x2, printf ("[%d]", callnum));

	if (callnum >= __ARRAY_LENGTH (sys286tab))
		return SIGSYS;
	stp = sys286tab + callnum;

	/*
	 * This is crass bullshit which allows fucked code to get away with
	 * not fully intializing a structure which shouldn't even be in the
	 * U area at all.
	 */

#if	0
	u.u_io.io_seg = IOUSR;
#endif

	if (envsave (& u.u_sigenv)) {
		u.u_error = EINTR;
		goto done;
	}

	i = stp->s_nargs + 1;
	while (-- i > 0) {
		args [i - 1] = getusd (regsetp->_i286._usp +
				       i * sizeof (short));
	}

	if (u.u_error)
		return SIGSYS;

	/*
	 * Perform the system call and collect the return value in "res".
	 */

	res = __DOSYSCALL (stp->s_nargs, stp->s_func, args, regsetp);

	if (stp->s_type == __SYSCALL_LONG)
		regsetp->_i286._dx = res >> 16;
	else
		regsetp->_i286._dx = u.u_rval2;
	regsetp->_i286._ax = res;

done:
	if (u.u_error) {
		regsetp->_i286._ax = regsetp->_i286._dx = -1;
		putubd (MUERR, u.u_error);
		if (u.u_error == EFAULT)
			return SIGSYS;
	}
	return 0;
}


/*
 * Given a file descriptor, return a status structure.
 */

ofstat(fd, stp)
struct oldstat *stp;
{
	register INODE *ip;
	register FD *fdp;
	struct oldstat stat;

	if ((fdp = fdget (fd)) == NULL)
		return -1;
	ip = fdp->f_ip;
	oistat (ip, & stat);
	kucopy (& stat, stp, sizeof (stat));
	return 0;
}

/*
 * Return a status structure for the given file name.
 */
ostat(np, stp)
char *np;
struct oldstat *stp;
{
	register INODE *ip;
	struct oldstat stat;
	IO		io;
	struct direct	dir;

	if (ftoi (np, 'r', & io, & dir) != 0)
		return -1;

	ip = u.u_cdiri;
	oistat (ip, & stat);

	if (kucopy (& stat, stp, sizeof (stat)) != sizeof (stat))
		SET_U_ERROR (EFAULT, "286 stat ()");

	idetach(ip);
	return 0;
}

/*
 * Copy the appropriate information from the inode to the stat buffer.
 */
oistat(ip, sbp)
register INODE *ip;
register struct oldstat *sbp;
{
	sbp->st_dev = ip->i_dev;
	sbp->st_ino = ip->i_ino;
	sbp->st_mode = ip->i_mode;
	sbp->st_nlink = ip->i_nlink;
	sbp->st_uid = ip->i_uid;
	sbp->st_gid = ip->i_gid;
	sbp->st_rdev = NODEV;
	sbp->st_size = ip->i_size;
	sbp->st_atime = ip->i_atime;
	sbp->st_mtime = ip->i_mtime;
	sbp->st_ctime = ip->i_ctime;

	switch (ip->i_mode & IFMT) {
	case IFBLK:
	case IFCHR:
		sbp->st_rdev = ip->i_a.i_rdev;
		sbp->st_size = 0;
		break;

	case IFPIPE:
		sbp->st_size = ip->i_pnc;
		break;
	}
}

/*
 * Return date and time.
 */

oftime(tbp)
struct timeb *tbp;
{
	struct timeb timeb;

	timeb.time = timer.t_time;
	/* This should be a machine.h macro to avoid
	 * unnecessary long arithmetic and roundoff errors
	 */
	timeb.millitm = timer.t_tick*(1000/HZ);
	timeb.timezone = timer.t_zone;
	timeb.dstflag = timer.t_dstf;

	if (kucopy (& timeb, tbp, sizeof (timeb)) != sizeof (timeb))
		SET_U_ERROR (EFAULT, "286 ftime ()");
}


/*
 * Send a SIGALARM signal in `n' clock ticks.
 */

long
oalarm2(n)
long n;
{
	register PROC * pp = SELF;
	long s;
	extern sigalrm ();

	/*
	 * Calculate time left before current alarm timeout.
	 */
	s = 0;
	if (pp->p_alrmtim.t_last != NULL)
		s = pp->p_alrmtim.t_lbolt - lbolt;

	/*
	 * Cancel previous alarm [if any], start new alarm [if n != 0].
	 */

	timeout2 (& pp->p_alrmtim, (long) n, sigalrm, pp);

	/*
	 * Return time left before previous alarm timeout.
	 */
	return s;
}

/*
 * Return elapsed ticks since system startup.
 */

long
otick()
{
	return lbolt;
}

/*
 * Cause a signal routine to be executed.
 * Called from [coh/sig.c]
 */
oldsigstart (n, func, regsetp)
__sigfunc_t	func;
gregset_t     *	regsetp;
{
	int		i;
	struct {
		ushort_t	sf_signo;
		ushort_t	sf_prev_ip;
		ushort_t	sf_flags;
	} signal_frame;

	/*
	 *                 -1
	 * calculate cvtsig  [n]
	 *
 	 */

	signal_frame.sf_signo = n;
	for (i = 0 ; i < __ARRAY_LENGTH (cvtsig) ; i ++)
		if (cvtsig [i] == n) {
			signal_frame.sf_signo = i;
			break;
		}

	signal_frame.sf_prev_ip = regsetp->_i286._ip;
	signal_frame.sf_flags = regsetp->_i286._flags;

	/*
	 * Turn off single-stepping in signal handler.
	 */

	regsetp->_i286._flags &= ~ MFTTB;
	regsetp->_i286._ip = (ushort_t) func;
	regsetp->_i286._usp -= sizeof (signal_frame);

	i = kucopy (& signal_frame, regsetp->_i286._usp,
		    sizeof (signal_frame));
	ASSERT (i == sizeof (signal_frame));
}

/*
 * obrk()
 *
 * Argument is the new linear space value for the end of the PDATA segment.
 * As was done in COH286, arg of zero asks for the old upper limit.
 */
obrk (cp)
unsigned	cp;
{
	register int res;

	/*
	 * If cp nonzero
	 *	resize user data segment
	 * else
	 *	just give info - current brk address
	 */

	if (cp)
		res = ubrk (cp);
	else
		res = u.u_segl [SIPDATA].sr_base +
			SELF->p_segp [SIPDATA]->s_size;

	return res; 
}
@


2.3
log
@*** empty log message ***
@
text
@d16 1
a34 1
#include <sys/systab.h>
d39 3
d70 2
a72 2
static long ualarm2();
static long utick();
d78 1
d85 3
a87 3
	if ((fdp=fdget(ofd&~DUP2)) == NULL)
		return (-1);
	if ((ofd&DUP2) != 0) {
d89 2
a90 2
			u.u_error = EBADF;
			return (-1);
d92 1
a92 1
		ofd &= ~DUP2;
d94 1
a94 1
			return (nfd);
d98 1
a98 1
				return (-1);
d106 1
d108 2
a109 1
oldsys()
d111 2
a112 6
	register struct	systab	*stp;
	register int syscall, callnum, nargs;
	int	l;
	int	(*func)();
	int	swap, res;
	int	temp;
a113 7
	u.u_error = 0;
	syscall = getuwd(NBPS+u.u_regl[EIP]-sizeof(short));
	if (u.u_error || (syscall&0xFF) != 0xCD) 
		return SIGSYS;
	callnum = (syscall>>8) & 0x7F;
	/* Print out this 286 call number only if tracing is on.  */
	T_PIGGY(0x2, printf("[%d]", callnum););
d115 5
a119 8
	stp = &sysitab[callnum];
	if (callnum >= NMICALL)
		return SIGSYS;
	u.u_io.io_seg = IOUSR;
	if (envsave(&u.u_sigenv)) {
		u.u_error = EINTR;
		goto done;
	}
d121 1
a121 3
	func = stp->s_func;
	swap = 0;
	nargs = stp->s_nargs;
d123 4
a126 3
	for (l=0; l<nargs; l++)
		u.u_args[l] = (unsigned short)
			getuwd(u.u_regl[UESP]+(l+1)*sizeof(short));
a127 4
	switch (callnum) {
	case 7:
		nargs = 1;
		goto update;
d129 5
a133 3
	case 17:		/* brk(0)  was used in old Coherent */
		func = obrk;
		break;	
d135 5
a139 3
	case 18:		/* stat and fstat have 32 bit alignment now */
		func = ostat;
		break;
a140 3
	case 25:		/* ustime() 386 takes a value, not a ptr */
		u.u_args [0] = getuwd (u.u_args [0]);
		break;
d142 6
a147 3
	case 28:
		func = ofstat;
		break;
d149 6
a154 4
	case 35:		/* ftime system call has gone away */
		func = oftime;
		nargs = 1;
		goto update;
a155 4
	case 41:		/* kludge second argument for dup2() */
		nargs = 2;
		func = coh286dup;
		goto update;
d157 5
a161 3
	case 42:		/* pipe - store thru pointer */
		nargs = 1;
		goto update;
a162 4
	case 72:		/* ualarm2 and utick have disappeared */
		func = ualarm2;
		nargs = 1;
		goto update;
d164 9
a172 4
	case 73:
		func = utick;
		nargs = 1;
		goto update;
d174 2
a175 5
	case 62:	/* setpgrp */
		u.u_args[0] = 1;
		nargs = 1;
		func = upgrp;
		break;
a176 5
	case 63:	/* getpgrp */
		u.u_args[0] = 0;
		nargs = 1;
		func = upgrp;
		break;
d178 10
a187 5
	case 24:		/* getuid and geteuid are together now */
	case 57:
		swap = callnum==57;
		func = ugetuid;
		break;
d189 2
a190 5
	case 47:
	case 56:		/* getgid & getegid are together now */
		swap = callnum==56;
		func = ugetgid;
		break;
a191 5
	case 45:		/* unique is a sys-86 call now */
		func = usysi86;
		u.u_args[0] = SYI86UNEEK;
		nargs = 1;
		break;
d193 3
a195 4
	case 37:		/* kill - signal#'s have changed */
		u.u_args[0] = (signed short) u.u_args [0]; /* Sign extend pid. */
		u.u_args[1] = cvtsig [u.u_args [1]];
		break;
d197 9
a205 3
	case 48:		/* signal - signal#'s have changed */
		u.u_args[0] = cvtsig [u.u_args [0]];
		break;	
a206 4
	case 53:		/* ulock has moved */	
		func = ulock;
		nargs = 1;
		goto update;
d208 2
a209 4
	case 66:		/* fcntl has moved */	
		func = ufcntl;
		nargs = 3;
		goto update;
d211 9
a219 4
	case 11:		/* exec has only one entry point now */
		func = uexece;
		nargs = 3;
		goto update;
d221 2
a222 5
	case 19:		/* seek offset is 32 bits now ; shift */
		u.u_args[1] |= u.u_args[2]<<16;
		u.u_args[2] = (unsigned short)
			getuwd(u.u_regl[UESP]+4*sizeof(short));
		break;
d224 31
a254 5
	update:
		for (l=0; l<nargs; l++)
			u.u_args[l] = (unsigned short)
				getuwd(u.u_regl[UESP]+(l+1)*sizeof(short));
		break;
d257 6
d266 3
a268 4
	res = (*func)(u.u_args[0], u.u_args[1], u.u_args[2], u.u_args[3],
		u.u_args[4], u.u_args[5]);
	if (swap)
		res = u.u_rval2;
d270 1
a270 7
	switch (callnum) {
	case 7:			/* wait - must store u_rval2 thru pointer */
		if (u.u_args[0]) {
			putubd(u.u_args[0], u.u_rval2);
			putubd(u.u_args[0]+1, u.u_rval2>>8);
		}
		break;
d272 5
a276 3
	case 19:		/* lseek - upper 16 bits of result in dx */
		u.u_rval2 = res >> 16;
		break;
a277 15
	case 42:		/* pipe - store thru pointer */
		putubd(u.u_args[0],   res);
		putubd(u.u_args[0]+1, res>>8);
		putubd(u.u_args[0]+2, u.u_rval2);
		putubd(u.u_args[0]+3, u.u_rval2>>8);
		res = 0;
		break;

	default:
			/* msgsys, shmsys, and semsys are not emulated */
			/* poll is not emulated;NOTE:the code calls putuwd */
		;
	}
	u.u_regl[EAX] = res;
	u.u_regl[EDX] = u.u_rval2;
d280 2
a281 2
		u.u_regl[EAX] = u.u_regl[EDX] = -1;
		putubd(MUERR, u.u_error);
d288 1
d300 1
a300 1
	if ((fdp = fdget(fd)) == NULL)
d317 2
d320 1
a320 1
	if (ftoi(np, 'r') != 0)
d322 1
d324 5
a328 2
	oistat(ip, &stat);
	kucopy(&stat, stp, sizeof(stat));
d351 2
a352 1
	switch (ip->i_mode&IFMT) {
d358 1
d368 1
d381 3
a383 1
	kucopy(&timeb, tbp, sizeof(timeb));
d386 1
d390 1
d392 1
a392 1
ualarm2(n)
d397 1
a397 1
	extern sigalrm();
a408 1
	timeout2(&pp->p_alrmtim, (long) n, sigalrm, pp);
d410 2
d421 1
d423 1
a423 1
utick()
d425 1
a425 1
	return (lbolt);
d478 2
a479 2
obrk(cp)
long cp;
a482 2
	cp &= 0xffff;	/* Ward off sign extension problems with cp. */

d489 1
d491 1
a491 1
		res = ubrk(cp);
d493 2
a494 1
		res = u.u_segl[SIPDATA].sr_base + SELF->p_segp[SIPDATA]->s_size;
@


2.2
log
@From Nigel
@
text
@d1 2
a2 8
/* $Header: /y/i386/RCS/sys1632.c,v 1.16 93/04/14 10:29:37 root Exp $ */
/* (lgl-
 *	The information contained herein is a trade secret of Mark Williams
 *	Company, and  is confidential information.  It is provided  under a
 *	license agreement,  and may be  copied or disclosed  only under the
 *	terms of  that agreement.  Any  reproduction or disclosure  of this
 *	material without the express written authorization of Mark Williams
 *	Company or persuant to the license agreement is unlawful.
a3 9
 *	COHERENT Version 2.3.37
 *	Copyright (c) 1982, 1983, 1984.
 *	An unpublished work by Mark Williams Company, Chicago.
 *	All rights reserved.
 *
 *	Intel 386 port and extensions (16/32 bit compatibility)
 *	Copyright (c) Ciaran O'Donnell, Bievres (FRANCE), 1991
 -lgl)
 *
d12 2
d18 1
d36 1
a36 1
#include <sys/oldtimeb.h>
d53 1
a53 1
	SIGUSR2,
d141 1
d145 1
d149 1
d151 1
a151 1
		u.u_args[0] = getuwd(u.u_args[0]);
d153 1
d157 1
d162 1
d167 1
d171 1
d176 1
d181 1
d187 1
d193 1
d199 1
d205 1
d211 1
d213 2
a214 2
		u.u_args[0] = (signed short) u.u_args[0]; /* Sign extend pid. */
		u.u_args[1] = cvtsig[u.u_args[1]];
d216 1
d218 1
a218 1
		u.u_args[0] = cvtsig[u.u_args[0]];
d220 1
d225 1
d230 1
d235 1
d241 1
d264 1
d268 1
d276 1
d297 1
d305 2
a306 2
	if ((fdp=fdget(fd)) == NULL)
		return;
d308 3
a310 3
	oistat(ip, &stat);
	kucopy(&stat, stp, sizeof(stat));
	return (0);
d324 1
a324 1
		return;
d406 1
a406 1
	return(s);
d415 1
a415 1
	return(lbolt);
d426 1
a426 2
	int i;
	register int	usp;
a447 2
	kucopy (& signal_frame, usp - sizeof (signal_frame),
		sizeof (signal_frame));
d455 5
a459 1
	regsetp->_i286._sp -= sizeof (signal_frame);
@


2.1
log
@Last Pre-STREAMS kernel
@
text
@d1 1
d10 5
a17 4
 */

/*
 * i386/sys1632.c
a26 2
 * 
 * Revised: Fri Jun 11 06:36:06 1993 CDT
d28 4
d37 1
a37 1
#include <errno.h>
d48 1
a48 1
#include <sys/timeb.h>
d56 1
a56 1
char cvtsig[] = 
a65 1
	-1
a77 1
int	fddup();
d83 31
d171 1
a171 1
		func = fddup;
d409 3
a411 1
oldsigstart(n, f)
d413 1
a413 1
	int i, n1;		
d415 5
a420 2
	usp = u.u_regl[UESP];

a425 15
	n1 = n; 
	for (i=0; cvtsig[i]>=0; i++)
		if (cvtsig[i]==n)
			n1 = i;
			
	putuwd(usp-3*sizeof(short), n1);
	putuwd(usp-2*sizeof(short), u.u_regl[EIP]);
	putubd(usp-2, u.u_regl[EFL]);
	putubd(usp-1, u.u_regl[EFL]>>8);
	u.u_regl[EFL] &= ~MFTTB;
	u.u_regl[EIP] = f;
	u.u_regl[UESP] -= 3*sizeof(short);
	if (n != SIGTRAP)
		u.u_sfunc[n-1] = SIG_DFL;
}
d427 6
a432 9
/*
 * Duplicate a file descriptor number.  This has the same calling
 * sequence as the dup2 system call and even uses the silly DUP2 bit.
 */
fddup(ofd, nfd)
register unsigned ofd;
register unsigned nfd;
{
	register FD *fdp;
d434 12
a445 27
	if ((fdp=fdget(ofd&~DUP2)) == NULL)
		return (-1);
	if ((ofd&DUP2) != 0) {
		if (nfd >= NOFILE) {
			u.u_error = EBADF;
			return (-1);
		}
		ofd &= ~DUP2;
		if (ofd == nfd)
			return (nfd);
		if (u.u_filep[nfd] != NULL) {
			fdclose(nfd);
			if (u.u_error)
				return (-1);
		}
	} else {
		for (nfd=0; nfd<NOFILE; nfd++)
			if (u.u_filep[nfd] == NULL)
				break;
		if (nfd == NOFILE) {
			u.u_error = EMFILE;
			return (-1);
		}
	}
	u.u_filep[nfd] = fdp;
	fdp->f_refc++;
	return (nfd);
@
