head     1.11;
branch   ;
access   ;
symbols  ;
locks    bin:1.11; strict;
comment  @ * @;


1.11
date     93.03.11.08.52.19;  author bin;  state Exp;
branches ;
next     1.10;

1.10
date     93.03.02.08.16.25;  author bin;  state Exp;
branches ;
next     1.9;

1.9
date     92.12.18.14.31.19;  author bin;  state Exp;
branches ;
next     1.8;

1.8
date     92.12.01.01.47.43;  author bin;  state Exp;
branches ;
next     1.7;

1.7
date     92.11.13.11.03.25;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     92.09.29.09.40.36;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     92.09.09.08.39.04;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.08.28.08.56.28;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.08.20.12.57.08;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.08.04.12.33.53;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.17.15.19.39;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.11
log
@hal: kernel 74 update
@
text
@/* $Header: /src386/kernel/coh.386/RCS/null.c,v 1.10 93/03/02 08:16:25 bin Exp Locker: bin $ */
/* (lgl-
 *	The information contained herein is a trade secret of Mark Williams
 *	Company, and  is confidential information.  It is provided  under a
 *	license agreement,  and may be  copied or disclosed  only under the
 *	terms of  that agreement.  Any  reproduction or disclosure  of this
 *	material without the express written authorization of Mark Williams
 *	Company or persuant to the license agreement is unlawful.
 *
 *	COHERENT Version 2.3.37
 *	Copyright (c) 1982, 1983, 1984.
 *	An unpublished work by Mark Williams Company, Chicago.
 *	All rights reserved.
 -lgl) */
/*
 * Null and memory driver.
 *  Minor device 0 is /dev/null
 *  Minor device 1 is /dev/mem, physical memory
 *  Minor device 2 is /dev/kmem, kernel data
 *  Minor device 3 is /dev/cmos
 *  Minor device 4 is /dev/boot_gift
 *  Minor device 5 is /dev/clock
 *  Minor device 6 is /dev/ps
 *  Minor device 7 is /dev/kmemhi, virtual memory 0x8000_0000-0xFFFF_FFFF
 *
 * $Log:	null.c,v $
 * Revision 1.10  93/03/02  08:16:25  bin
 * kernel 73 update
 * 
 * Revision 1.6  92/11/09  17:10:54  root
 * Just before adding vio segs.
 * 
 * Revision 1.2  92/01/06  11:59:49  hal
 * Compile with cc.mwc.
 * 
 * Revision 1.1	88/03/24  16:14:04	src
 * Initial revision
 * 
 */

/*
 * The symbol "DANGEROUS" should be undefined for a production system.
 */
#ifdef TRACER
#define NULL_IOCTL	/* Allow ioctl()s for /dev/kmem.  */
#define DANGEROUS	/* Allow dangerous ioctl()s for /dev/null.  */
#endif

#include <sys/coherent.h>
#include <sys/con.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/typed.h>
#include <sys/inode.h>
#include <sys/seg.h>
#include <sys/coh_ps.h>
#ifdef NULL_IOCTL
#include <sys/null.h>
#endif /* NULL_IOCTL */

/* These are minor numbers.  */
#define DEV_NULL	0	/* /dev/null	*/
#define DEV_MEM		1	/* /dev/mem	*/
#define DEV_KMEM	2	/* /dev/kmem	*/
#define DEV_CMOS	3	/* /dev/cmos	*/
#define DEV_BOOTGIFT	4	/* /dev/bootgift  */
#define DEV_CLOCK	5	/* /dev/clock  */
#define DEV_PS		6	/* /dev/ps  */
#define DEV_KMEMHI	7	/* /dev/kmemhi  */

#define KMEMHI_BASE	0x80000000
#define PXCOPY_LIM	4096

/*
 * CMOS devices are limited by an 8 bit address.
 */
#define MAX_CMOS	255
#define CMOS_LEN	256

/*
 * The first 14 bytes of the CMOS are the clock.
 */
#define MAX_CLOCK	13
#define CLOCK_LEN	14

/*
 * These are definitions for mucking with the CMOS clock.
 */
#define SRA	10	/* Status Register A */
#define SRB	11	/* Status Register B */
#define SRC	12	/* Status Register C */
#define SRD	13	/* Status Register D */

#define UIP	0x80	/* Update In Progress bit of SRA.	*/
#define NO_UPD	0x80	/* No Update bit of SRB.		*/

/*
 * Functions for configuration.
 */
void	nlopen();
void	nlclose();
void	nlread();
void	nlwrite();
int	nlioctl();
int	nulldev();
int	nonedev();

/*
 * Configuration table.
 */
CON nlcon ={
	DFCHR,				/* Flags */
	0,				/* Major index */
	nlopen,				/* Open */
	nlclose,			/* Close */
	nulldev,			/* Block */
	nlread,				/* Read */
	nlwrite,			/* Write */
#ifdef NULL_IOCTL
	nlioctl,			/* Ioctl */
#else /* NULL_IOCTL */
	nonedev,			/* Ioctl */
#endif /* NULL_IOCTL */
	nulldev,			/* Powerfail */
	nulldev,			/* Timeout */
	nulldev,			/* Load */
	nulldev				/* Unload */
};

int lock_clock();
void unlock_clock();

/*
 * Null/memory open routine.
 */
void
nlopen(dev, mode)
dev_t dev;
int mode;
{
	switch (minor(dev)) {
	case DEV_PS:
		/* /dev/ps is read only */
		if (IPR != (IPR & mode)) 
			SET_U_ERROR( EACCES, "/dev/ps is read only" );
		break;
	default:
		/*
		 * For minor devices on NULL there is
		 * usually no action for open().
		 */
		break;
	}
	return;
} /* nlopen() */

/*
 * Null/memory close routine.
 */
void
nlclose(dev, mode)
dev_t dev;
int mode;
{
	/*
	 * For minor devices on NULL there is
	 * Usually no action for close().
	 */
	return;
} /* nlclose() */

/*
 * Null/memory read routine.
 */
void
nlread(dev, iop)
dev_t dev;
register IO *iop;
{
	register unsigned 	bytesRead;
	register SEG		*sp;		/* u area segment */
	register PROC 		*pp1;		/* */
	char			psBuf[ARGSZ];	/* buffer for command line
						 * arguments for ps. */
	stMonitor		psData;		/* All process data for */
	UPROC	      		*uprc;		/* pointer to u area */
	int			ndpUseg;	/* System global address 
						 * of U segment */
	unsigned int 		seek;
	unsigned char 		read_cmos();
	extern typed_space 	boot_gift;

	switch (minor(dev)) {
	case DEV_NULL:
		/*
		 * Read nothing.
		 * Do NOT update iop->io_ioc.
		 * This way, caller knows 0 bytes were read.
		 */
		break;

	case DEV_MEM:
		while (iop->io_ioc) {
			int src = iop->io_seek;
			int dest = iop->io.pbase;
			int numBytes = PXCOPY_LIM;
			if (numBytes > iop->io_ioc)
				numBytes = iop->io_ioc;

			bytesRead = pxcopy(src, dest, numBytes, SEG_386_UD);
			src += bytesRead;
			dest += bytesRead;
			iop->io_ioc -= bytesRead;
			if (u.u_error == EFAULT) {
				u.u_error = 0;
				break;
			}
		}
		break;

	case DEV_KMEM:
		iowrite(iop, iop->io_seek, iop->io_ioc);
		if (u.u_error == EFAULT)
			u.u_error = 0;
		break;

	case DEV_CLOCK:
		/*
		 * Don't go past the end of the CLOCK.
		 */
		if (iop->io_seek >= CLOCK_LEN)
			break;

		/*
		 * Lock the clock before any reading.
		 */
		if (lock_clock() == 0) {
			SET_U_ERROR(EIO, "RT clock will not settle.");
			break;
		}

		/*
		 * Read the requested data out of the CMOS.
		 */
		for (seek = iop->io_seek; seek < CLOCK_LEN; seek++) {
			if(ioputc(read_cmos(seek), iop) == -1)
				break;
		}

		/*
		 * Now that we are done reading the CMOS, let
		 * the clock loose.
		 */
		unlock_clock();
		break;

	case DEV_CMOS:
		/*
		 * Don't go past the end of the CMOS.
		 */
		if (iop->io_seek >= CMOS_LEN)
			break;

		/*
		 * Read the requested data out of the CMOS.
		 */
		for (seek = iop->io_seek; seek < CMOS_LEN; seek++) {
			if(ioputc(read_cmos(seek), iop) == -1)
				break;
		}
		break;

	case DEV_BOOTGIFT:
		/*
		 * Reads all from the data structure boot_gift.
		 */
		if (iop->io_seek < BG_LEN) {
			bytesRead = iop->io_ioc;
			/*
			 * Copy no more than to the end of boot_gift.
			 */
			if (iop->io_seek + bytesRead > BG_LEN) {
				bytesRead = BG_LEN - (iop->io_seek);
			}

			iowrite(iop,
				(char *)(&boot_gift) + iop->io_seek,
				bytesRead);
		}
		break;

	case DEV_PS:
		/* Lock the process table. It allows to have an atomic ps. */
		lock(pnxgate);
		/* Main driver loop. Go through all processes. Fill struct PS
		 * and send put to user buffer.
		 */
		for (pp1 = &procq; (pp1=pp1->p_nforw) != &procq; ) {
			register int		i;	/* loop index */
			register unsigned	uLen, 	/* Process size */
						uLenR;	/* Real process size */
			int work;	/* virtual click number */

			/* Check if driver can send next proc data */ 
			if ( iop->io_ioc < sizeof(stMonitor)) 
				break;
				
			/* Calculate the size of process. */
			uLen = uLenR = 0;
			for (i = 0; i < NUSEG + 1; i++) {
				if ((sp=pp1->p_segp[i]) == NULL)
					continue;
				uLenR += sp->s_size;
				if (i == SIUSERP || i == SIAUXIL)
					continue;
				uLen += sp->s_size;
		
			} 

			/* Find u area for process pp1 */
			sp = pp1->p_segp[SIUSERP];
			ndpUseg = MAPIO(sp->s_vmem, U_OFFSET);
			work = workAlloc();
			ptable1_v[work] = 
				   sysmem.u.pbase[btocrd(ndpUseg)] | SEG_RW;
			mmuupd();
			uprc = (UPROC *) (ctob(work) + U_OFFSET);
			kkcopy(uprc->u_comm, psData.u_comm, ARGSZ);
			kkcopy(uprc->u_sleep, psData.u_sleep, U_SLEEP_LEN);
			workFree(work);

			/* fill up stMonitor */
			psData.p_pid = pp1->p_pid;
			psData.p_ppid = pp1->p_ppid;
			psData.p_uid = pp1->p_uid;
			psData.p_ruid = pp1->p_ruid;
			psData.p_rgid = pp1->p_rgid;
			psData.p_state = pp1->p_state;
			psData.p_flags = pp1->p_flags;
			psData.rrun = (char *) pp1 != pp1->p_event;
			psData.p_event = pp1->p_event;
			psData.p_ttdev = pp1->p_ttdev;
			psData.p_nice = pp1->p_nice;
			psData.size = (short) (uLen>>10);
			psData.rsize = (short) (uLenR>>10);
			psData.p_schedPri = pp1->p_schedPri;
			psData.p_utime = pp1->p_utime;
			psData.p_stime = pp1->p_stime;
			kkcopy(psBuf, psData.pr_argv, ARGSZ);
			/* send data to user */
			iowrite(iop, (char *) &psData, sizeof(stMonitor));
		}
		unlock(pnxgate);
		break;
	case DEV_KMEMHI:
		iowrite(iop, iop->io_seek - KMEMHI_BASE, iop->io_ioc);
		if (u.u_error == EFAULT)
			u.u_error = 0;
		break;
	default:
		SET_U_ERROR(ENXIO, "nlread(): illegal minor device for null");
	}
	return;
}

/*
 * Null/memory write routine.
 */
void
nlwrite(dev, iop)
dev_t dev;
register IO *iop;
{
	register unsigned bytesWrit;
	unsigned write_cmos();
	unsigned seek;
	int	ch;

	switch (minor(dev)) {
	case DEV_NULL:
		/*
		 * Tell caller all bytes were written.
		 */
		iop->io_ioc = 0;
		break;

	case DEV_MEM:
		while(iop->io_ioc) {
			int src = iop->io.pbase;
			int dest = iop->io_seek;
			int numBytes = PXCOPY_LIM;
			if (numBytes > iop->io_ioc)
				numBytes = iop->io_ioc;

			bytesWrit = xpcopy(src, dest, numBytes, SEG_386_UD);
			src += bytesWrit;
			dest += bytesWrit;
			iop->io_ioc -= bytesWrit;
			if (u.u_error == EFAULT) {
				u.u_error = 0;
				break;
			}
		}
		break;

	case DEV_KMEM:
		ioread(iop, iop->io_seek, iop->io_ioc);
		break;

	case DEV_CLOCK:
		/*
		 * Don't go past the end of the CLOCK.
		 */
		if (iop->io_seek >= CLOCK_LEN)
			break;

		/*
		 * Lock the clock before any writing.
		 */
		if (lock_clock() == 0) {
			SET_U_ERROR(EIO, "RT clock will not settle.");
			break;
		}

		/*
		 * Write the requested data into the CMOS.
		 */
		for (seek = iop->io_seek; seek < CLOCK_LEN; seek++) {
			if((ch = iogetc(iop)) == -1)
				break;
			write_cmos(seek, ch);
		}

		/*
		 * Now that we are done writing the CMOS, let
		 * the clock loose.
		 */
		unlock_clock();
		break;

	case DEV_CMOS:
		/*
		 * Don't go past the end of the CMOS.
		 */
		if (iop->io_seek >= CMOS_LEN)
			break;

		/*
		 * Write the requested data into the CMOS.
		 */
		for (seek = iop->io_seek; seek < CMOS_LEN; seek++) {
			if((ch = iogetc(iop)) == -1)
				break;
			write_cmos(seek, ch);
		}
		break;

	case DEV_BOOTGIFT:
		/*
		 * /dev/bootgift is not writable.
		 */
		break;

	case DEV_PS:
		/* We should not be able to open /dev/ps to write.
		 * Just paranoya.
		 */
		break;

	case DEV_KMEMHI:
		ioread(iop, iop->io_seek - KMEMHI_BASE, iop->io_ioc);
		break;

	default:
		SET_U_ERROR(ENXIO,
			     "nlwrite(): illegal minor device for null");
	}
	return;
}

#ifdef NULL_IOCTL /* Includes all of nlioctl().  */

/*
 * Do an ioctl call for /dev/null.
 */
int
nlioctl(dev, cmd, vec)
	dev_t dev;
	int cmd;
	char * vec;
{
	/* Only /dev/kmem has an ioctl.  */
	switch (minor(dev)) {
	case DEV_KMEM:
		switch (cmd) {
#ifdef DANGEROUS
		case NLCALL:	/* Call a function.  */
		return docall(vec);
#endif /* DANGEROUS */
		default:
			SET_U_ERROR(EINVAL,
				     "nioctl(): illegal command for kmem");
			return(-1);
		}
	default:
		SET_U_ERROR(EINVAL, "illegal minor device for null ioctl");
		return (-1);
	} /* switch on minor device */

} /* nlioctl() */

#endif /* NULL_IOCTL */

#ifdef DANGEROUS /* Includes all of docall().  */
/*
 * MASSIVE SECURITY HOLE!  This should NOT be included in a distribution
 * system.  Among other problems, it becomes possible to do "setuid(0)".
 *
 * Call a function with arguments.
 *
 * Takes an array of unsigned ints.  The first element is the length of
 * the whole array, the second element is a pointer to the function to
 * call, all other elements are arguments.  At most 5 arguments may be
 * passed.
 *
 * Returns the return value of the called fuction in uvec[0].
 */
int
docall(uvec)
	unsigned uvec[];
{
	int (* func)();
	unsigned kvec[7];
	int retval;

	printf("NLCALL security hole.\n");

	/* Fetch the first element of vec.  */
	ukcopy(uvec, kvec, sizeof(unsigned));

	if ((kvec[0] < 2) || (kvec[0] > 7)) {
		/* Invalid number of elements in uvec.  */
		SET_U_ERROR(EINVAL, "Invalid number of elements in uvec");
		return(-1);
	}
	
	/* Fetch the whole vector.  */
	ukcopy(uvec, kvec, kvec[0] * sizeof(unsigned));

	/* Extract the function.  */
	func = (int (*)()) kvec[1];

	/* Call the function with all arguments.  */
	retval = (*func)(kvec[2], kvec[3], kvec[4], kvec[5], kvec[6]);

	kucopy(&retval, uvec, sizeof(unsigned));

} /* docall() */

#endif /* DANGEROUS */

/*
 * int lock_clock() -- Stop the update cycle on the CMOS RT clock and
 * wait for it to settle.  Returns 0 if the clock would not settle
 * in time.
 */
int
lock_clock()
{
	register int i;

	/*
	 * Wait for the clock to settle.  If it does not settle in
	 * a reasonable amount of time, give up.
	 */
	i = 65536;	/* Loop for a longish time.  */
	while (--i > 0) {
		if (0 == (UIP & read_cmos(SRA))) {
			break;	/* Break if there is no update in progress.  */
		}
	}
	
	if (0 == i) {
		/* The clock would not settle.  */
		return 0;
	}

	/*
	 * There is a tiny race here--an interrupt could conceivably
	 * come here, thus allowing enough delay for another update to
	 * begin.  But if we take interrupts that take a full second
	 * to process, other things are going to break horribly.
	 */
	
	/*
	 * Lock out updates.
	 * We set the No Updates bit in Clock Status Register B.
	 */
	write_cmos(SRB, (NO_UPD | read_cmos(SRB)));

	return 1;
} /* lock_clock() */

/*
 * void unlock_clock() -- Restart the update cycle on the CMOS RT clock.
 */ 
void
unlock_clock()
{
	/*
	 * We clear the No Updates bit in Clock Status Register B.
	 */
	write_cmos(SRB, ((~ NO_UPD) & read_cmos(SRB)));
} /* unlock_clock() */
@


1.10
log
@kernel 73 update
@
text
@d1 1
a1 1
/* $Header: /y/coh.386/RCS/null.c,v 1.6 92/11/09 17:10:54 root Exp $ */
d27 3
a346 8
#if 0
			psData.p_schedPri = pp1->p_schedPri;

			psData.p_cval = pp1->p_cval;
			psData.p_sval = pp1->p_sval;
			psData.p_ival = pp1->p_ival;		
			psData.p_rval = pp1->p_rval;
#endif
@


1.9
log
@hal: kernel 71
@
text
@d318 1
a318 1
			sp = pp1->p_segp[0];
d326 1
a326 1
			kkcopy(uprc->u_sleep, psData.u_sleep, 10);
d343 4
d351 1
@


1.8
log
@hal: kernel 70: /dev/kmemhi, cannow read/write > 4096 bytes
@
text
@d299 1
d316 1
d320 2
a321 1
			ptable1_v[WORK0] = 
d324 5
a328 1
			uprc = (UPROC *) (ctob(WORK0) + U_OFFSET);
a348 2
			kkcopy(uprc->u_comm, psData.u_comm, ARGSZ);
			kkcopy(uprc->u_sleep, psData.u_sleep, 10);
@


1.7
log
@kernel 68: improved ps command, uses /dev/ps
@
text
@d24 1
d66 1
d68 3
d177 1
a177 1
	register unsigned 	bytes_read;
d200 16
a215 5
		bytes_read = pxcopy((long)iop->io_seek, iop->io.pbase,
		  iop->io_ioc, SEG_386_UD);
		iop->io_ioc -= bytes_read;
		if (u.u_error == EFAULT)
			u.u_error = 0;
d275 1
a275 1
			bytes_read = iop->io_ioc;
d279 2
a280 2
			if (iop->io_seek + bytes_read > BG_LEN) {
				bytes_read = BG_LEN - (iop->io_seek);
d285 1
a285 1
				bytes_read);
d350 5
d369 1
a369 1
	register unsigned n;
d383 16
a398 5
		n = xpcopy(iop->io.pbase, (long)iop->io_seek, iop->io_ioc,
			SEG_386_UD);
		iop->io_ioc -= n;
		if (u.u_error == EFAULT)
			u.u_error = 0;
d465 4
@


1.6
log
@hal: /dev/proc for leaner, meaner ps, courtesy of LaMonte

@
text
@d1 1
a1 1
/* $Header: /v4a/coh/RCS/null.c,v 1.2 92/01/06 11:59:49 hal Exp $ */
d23 1
a23 1
 *  Minor device 6 is /dev/proc
d26 3
d51 2
d64 1
a64 1
#define DEV_PROC	6	/* /dev/proc  */
d126 1
a126 1
 * These variables are used by /dev/proc.
a127 8
static	int proc_open_c = 0;	/* How many times is this device open?  */
static	int proc_valid = 0;	/* Do we have a valid snapshot?  */
static	PROC *proc_snapshot;	/* This is a snapshot of procq.  */
static	int proc_size;		/* How long is proc_snapshot (in bytes)?  */

/*
 * Null/memory open routine.
 */
a132 3
	register PROC *pp1;
	int count;		/* How many processes are there?  */

d134 4
a137 77
	case DEV_PROC:
		if ( IPR == (IPR & mode) ){
			T_PIGGY( 0x4000000, printf("proc open "); );
			/*
			 * Lock the process table.
			 * We lock the process table first to avoid a race
			 * condition.  We really only want to muck with the
			 * process table on the first open.
			 */
			lock(pnxgate);
	
			/*
			 * If this is the first open, take a snapshot.
			 */
			if ( 0 == proc_open_c ) {
				T_PIGGY( 0x4000000, printf("snapshot of "); );
				/*
				 * Find out how long the process table is.
				 */
				for (count = 0, pp1 = &procq;
				     (pp1=pp1->p_nforw) != &procq;
				     ++count) {
					/* Do nothing else.  */
				}

				T_PIGGY( 0x4000000,
					printf("%d entries of %d, ",
						count, sizeof(PROC));
				);

				/*
				 *	Allocate memory for a snapshot.
				 */
				proc_size = count * sizeof(PROC);
				T_PIGGY( 0x4000000,
					printf("allocating %d, ", proc_size);
				);
				if ( (proc_snapshot = kalloc(proc_size)) !=
					NULL) {
					/*
					 *	Take a snapshot.
					 */
					for ( count = 0, pp1 = &procq;
					      (pp1=pp1->p_nforw) != &procq;
					      ++count) {
						T_PIGGY( 0x4000000,
						    printf("&proc[%d]: %x, ",
						    	count,
							&proc_snapshot[count]);
						);
						kkcopy(pp1,
						       &proc_snapshot[count],
						       sizeof(PROC)
						);
					}
					proc_valid = 1;
				}
			} /* First open?  */
	
			/*
			 * Unlock the process table.
			 */
			unlock(pnxgate);
	
			/*
			 * If we have a valid snapshot, the open succeeded,
			 * so increment the count.  Otherwise, fail the open.
			 */
			if ( proc_valid ) {
				proc_open_c++;
			} else {
				SET_U_ERROR( ENOMEM,
					"Not enough memory for a snapshot");
			}
		} else {
			SET_U_ERROR( EACCES, "/dev/proc is read only" );
		}
d157 4
a160 41
	switch (minor(dev)) {
	case DEV_PROC:
		if (proc_open_c > 0) {
			T_PIGGY( 0x4000000, printf(" last proc close, "); );

			/*
			 * Lock the process table.
			 *
			 * We lock the process table first to avoid a race
			 * condition.  We don't muck with the process table
			 * at all, but on the last close we want to lock out
			 * opens on this device.
			 */
			lock(pnxgate);
			/*
			 * If this is the last close:
			 *	Free the snapshot of the process table.
			 */
			if ( 1 == proc_open_c ) {
				kfree( proc_snapshot );
				proc_valid = 0;
			}

			/*
			 * Unlock the process table.
			 */
			unlock(pnxgate);
	
			/*
			 * Record the close.
			 */
			proc_open_c--;
		}
		break;
	default:
		/*
		 * For minor devices on NULL there is
		 * Usually no action for close().
		 */
		break;
	}
a163 1

d172 12
a183 4
	register unsigned bytes_read;
	unsigned int seek;
	unsigned char read_cmos();
	extern typed_space boot_gift;
d273 5
a277 3
	case DEV_PROC:
		/*
		 * Reads are all from the data structure *proc_snapshot.
d279 4
a282 3
		T_PIGGY( 0x4000000,
			printf("reading %d proc bytes, ", iop->io_ioc);
		);
d284 47
a330 10
		if (iop->io_seek < proc_size) {
			bytes_read = iop->io_ioc;
			/* Copy no more than to the end of the snapshot.  */
			if (iop->io_seek + bytes_read > proc_size) {
				bytes_read = proc_size - (iop->io_seek);
			}

			iowrite(iop,
				(char *)(proc_snapshot) + iop->io_seek,
				bytes_read);
d332 1
d427 3
a429 3
	case DEV_PROC:
		/*
		 * /dev/proc is not writable.
a430 1
		T_PIGGY( 0x4000000, printf("/dev/proc is not writable.\n"); );
@


1.5
log
@hal update: kernel 62 (60 files)
@
text
@d23 1
d47 1
d59 1
d87 4
a90 2
int	nlread();
int	nlwrite();
d101 2
a102 2
	nulldev,			/* Open */
	nulldev,			/* Close */
d121 1
a121 4
 * do_locks controls locking of the CMOS clock.  If set (default)
 * then the clock will be locked for any single read.  If it is
 * not set, it is up to the user process to muck with the bits
 * to stabilize the clock.
d123 4
a126 1
static int do_locks = 1;
d129 153
d284 1
d296 5
a300 1
		/* leave iop->io_ioc unchanged - read nothing */
d364 3
d369 3
a371 1
			/* Copy no more than to the end of boot_gift.  */
d376 3
a378 1
			iowrite(iop, &boot_gift, bytes_read);
d382 20
d411 1
d423 3
d490 3
a492 1
		/* /dev/bootgift is not writable.  */
d495 7
@


1.4
log
@kernel 61 by hal
@
text
@@


1.3
log
@hal: set seek limit of 256 on /dev/cmos
@
text
@d137 1
a137 1
		iop->io_ioc = 0;
@


1.2
log
@changed for ker 59
@
text
@d22 1
d36 1
d39 1
d56 1
d59 23
d112 3
d116 8
d130 3
a132 2
	register unsigned n;
	unsigned char tmp, read_cmos();
d137 1
a137 1
		n = 0;
d141 5
a145 2
		n = pxcopy((long)iop->io_seek, iop->io.pbase, iop->io_ioc,
			SEG_386_UD);
d149 3
a151 1
		n = kucopy((vaddr_t)iop->io_seek, iop->io.vbase, iop->io_ioc);
d154 30
d185 11
a195 4
		for (n = iop->io_ioc; n > 0; --n) {
			tmp = read_cmos(iop->io_seek + n);
			if (0 == kucopy(&tmp, iop->io.vbase + n, sizeof(tmp))){
			/* Abort the loop if we run out of destination.  */
a196 1
			}
a197 1
		n = iop->io_ioc - n;
d202 1
a202 1
			n = iop->io_ioc;
d204 2
a205 2
			if (iop->io_seek + n > BG_LEN) {
				n = BG_LEN - (iop->io_seek);
d208 1
a208 3
			n = kucopy(&boot_gift, iop->io.vbase, n);
		} else {
			n = 0;
d213 1
a213 2
		u.u_error = ENXIO;
		return;
d215 1
a215 3
	iop->io_ioc -= n;
	if (u.u_error == EFAULT)
		u.u_error = 0;
d226 3
d232 1
a232 1
		n = iop->io_ioc;
d238 3
d244 1
a244 1
		n = ukcopy(iop->io.vbase, (vaddr_t)iop->io_seek, iop->io_ioc);
d247 31
d279 14
a292 1
		n = 0;	/* /dev/cmos is not writable.  */
d296 1
a296 1
		n = 0;	/* /dev/bootgift is not writable.  */
d300 2
a301 2
		u.u_error = ENXIO;
		return;
d303 1
a303 3
	iop->io_ioc -= n;
	if (u.u_error == EFAULT)
		u.u_error = 0;
d318 3
a320 6
	if (minor(dev) != DEV_KMEM) {
		u.u_error = EINVAL;
		return (-1);
	}

	switch (cmd) {
d322 1
a322 1
	case NLCALL:	/* Call a function.  */
d325 5
d331 4
a334 3
		u.u_error = EINVAL;
		return(-1);
	}
d368 1
a368 1
		u.u_error = EINVAL;
d386 54
@


1.1
log
@Initial revision
@
text
@@
