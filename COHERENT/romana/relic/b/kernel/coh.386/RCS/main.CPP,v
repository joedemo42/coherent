head     1.1;
branch   ;
access   ;
symbols  ;
locks    bin:1.1;
comment  @@;


1.1
date     93.04.16.06.48.56;  author bin;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Hal: kernel 76 update
@
text
@ 

 
 




 
 




 
typedef	unsigned int	aold_t;		 
typedef	unsigned int	bmap_t;		 
typedef	unsigned int	bold_t;		 
typedef	unsigned int	cmap_t;		 
typedef	unsigned int	cold_t;		 
typedef	unsigned int	dmap_t;		 
typedef	unsigned int	dold_t;		 

 
typedef	unsigned short	comp_t;		 
typedef	long		daddr_t;	 
typedef	unsigned short	dev_t;		 
typedef	long	 	fsize_t;	 
typedef	unsigned short	ino_t;		 
typedef	long	 	off_t;		 
typedef	long	 	paddr_t;	 
typedef	long	 	sig_t;		 
typedef	long	 	time_t;		 
typedef	unsigned int	vaddr_t;	 
typedef	char	 	GATE[2];	 

typedef	long		cseg_t;		 




 
 


 
 




 
 



 
 



 



 





extern	int	NBUF;			 
extern	int	NHASH;			 
extern	int	NINODE;			 
extern	int	NCLIST;			 
extern	int	ALLSIZE;		 
extern	int	ISTSIZE;		 































 







 






 







 





















 




















 





 


 





 








 
typedef union mreg_u {
	unsigned m_reg[1];
	unsigned m_int;
} MREG;

 
typedef struct mproto {
	unsigned mp_csl;
	unsigned mp_dsl;
	vaddr_t	mp_svb;
	vaddr_t	mp_svl;
} MPROTO;

 
typedef	struct menv_s {
	int	me_di;
	int	me_si;
	int	mc_bx;
	int	me_bp;
	int	me_sp;
	int	me_pc;
	int	me_fw;
}	MENV;

 
typedef	struct mcon_s {
	int	mc_di;
	int	mc_si;
	int	mc_bx;
	int	mc_bp;
	int	mc_sp;
	int	mc_pc;
	int	mc_fw;
}	MCON;

 
typedef int MGEN[1];

 









 





















 
struct l {
	int	l_lo;
	int	l_hi;
};






 
typedef struct tim {
	struct	 tim *t_next;		 
	struct   tim *t_last;		 
	long	 t_lbolt;		 
	int	 (*t_func)();		 
	char	 *t_farg;		 

} TIM;


 
extern	TIM *	timq[256];		 





 


 
 




 


 


 


 


 


 




 






 
 




 


 
 



 






struct dirent {
	long	d_ino;	 
	daddr_t	d_off;	 
	unsigned short	d_reclen;   
	char	d_name[1];
};




	 

typedef struct
	{
	int	dd_fd;			 
	int	dd_loc;			 
	int	dd_size;		 
	char	*dd_buf;		 
	}	DIR;			 

extern DIR		*opendir();
extern struct dirent	*readdir();
extern void		rewinddir();
extern int		closedir();
extern daddr_t		telldir();
extern void		seekdir();


struct direct {
	ino_t	 d_ino;			 
	char	 d_name[14];	 
};




 
 




 
 




 
typedef struct io {
	int	 io_seg;		 
	unsigned io_ioc;		 

	off_t	 io_seek;		 
	union {
		vaddr_t	vbase;		 
		paddr_t	pbase;		 
	} io;

	short	 io_flag;		 
} IO;

 




 




 
 




 
 



 


 

 
struct pollfd {
	int	fd;		 
	short	events;		 
	short	revents;	 
};

 







 
typedef
struct event {
	struct event *	e_pnext;	 
	struct event *	e_dnext;	 
	struct event *	e_dlast;	 
	struct proc  *	e_procp;	 
} event_t;



 
 



 




 
typedef struct proc {
	struct	 proc *p_lforw;		 
	struct	 proc *p_lback;		 
	struct	 proc *p_nforw;		 
	struct	 proc *p_nback;		 
	struct	 seg  *p_segp[4+1];	 
	unsigned p_pid;			 
	unsigned p_ppid;		 
	unsigned p_uid;			 
	unsigned p_ruid;		 
	unsigned p_rgid;		 
	unsigned p_state;		 
	unsigned p_flags;		 
	sig_t	 p_ssig;		 

	sig_t	 p_dfsig;		 
	sig_t	 p_hsig;		 
	sig_t	 p_dsig;		 

	sig_t	 p_isig;		 
	char	 *p_event;		 
	unsigned p_alarm;		 
	unsigned p_group;		 
	dev_t	 p_ttdev;		 
	unsigned p_nice;		 
	unsigned p_cval;		 
	unsigned p_sval;		 
	int	 p_ival;		 
	unsigned p_rval;		 
	unsigned p_lctim;		 
	long	 p_utime;		 
	long	 p_stime;		 
	long	 p_cutime;		 
	long	 p_cstime;		 
	int	 p_exit;		 
	event_t *p_polls;		 
	TIM	 p_polltim;		 
	TIM	 p_alrmtim;		 

	struct	 rlock	*p_prl;		 

} PROC;

 









 




 














 




 




 
typedef struct plink {
	struct	 proc *p_lforw;		 
	struct	 proc *p_lback;		 
} PLINK;







 
extern	int	idle();
extern	PROC	*process();
extern	int	wakeup();

 
extern	int	quantum;		 
extern	int	disflag;		 
extern	int	intflag;		 
extern	int	cpid;			 
extern	GATE	pnxgate;		 
extern	PROC	procq;			 
extern	PROC	*iprocp;		 
extern	PROC	*eprocp;		 
extern	PROC	*cprocp;		 
extern	PLINK	linkq[97];		 


extern	int	swmflag;		 


 





 

 




extern void	(*signal())();
extern void	(*sigset())();




























 




















 
 




struct _fpstackframe {
	long	signo;
	long	regs[18+1];
	struct _fpstate *fpsp;
	char	*wsp;
};

struct _fpreg {
	unsigned short significand[4];
	unsigned short exponent;
};

struct _fpstate {
	unsigned long	cw,
			sw,
			tag,
			ipoff,
			cssel,
			dataoff,
			datasel;
	struct _fpreg	_st[8];
	unsigned long	status;
};



 
typedef struct sr {
	int	 sr_flag;		 
	vaddr_t	 sr_base;		 

	off_t	 sr_size;		 

	struct	 seg *sr_segp;		 
} SR;

 




 



typedef struct uproc {

	 

	unsigned short u_version;	 

	char	 u_error;		 
	char	 u_flag;		 
	int	 u_uid;			 
	int	 u_gid;			 
	int	 u_ruid;		 
	int	 u_rgid;		 
	int	 u_euid;		 
	int	 u_egid;		 
	unsigned u_umask;		 
	struct	 inode *u_cdir;		 
	struct	 inode *u_rdir;		 
	struct	 fd *u_filep[60];	 
	struct	 sr u_segl[4];	 

	int	 (*u_sfunc[32])();	 


	 
	struct	 seg *u_sege[4];	 
	MPROTO	 u_sproto;		 
	MCON	 u_syscon;		 
	MENV	 u_sigenv;		 
	MGEN	 u_sysgen;		 

	int	 u_args[6];

	struct	 io u_io;		 

	 
	ino_t	 u_cdirn;		 
	struct	 inode *u_cdiri;	 
	struct	 inode *u_pdiri;	 
	struct	 direct u_direct;	 

	 
	char	 u_comm[10];	 

	char	 u_sleep[10];		 

	time_t	 u_btime;		 
	int	 u_memuse;		 
	long	 u_block;		 

	 
	vaddr_t  u_ppc;			 
	vaddr_t	 u_pbase;		 
	vaddr_t	 u_pbend;		 

	off_t	 u_pofft;		 
	off_t	 u_pscale;		 


	 
	int	u_argc;			 
	unsigned u_argp;		 
	int	u_signo;		 

	int	*u_regl;
	int	u_rval2;
	void	(*u_sigreturn)();
	struct _fpstate	u_ndpCon;	 
	int	u_ndpFlags;

} UPROC;





	 












































 













 




 



















 








SR	*loaded();
cseg_t	*c_begin();







typedef struct blocklist
{
	struct	blocklist	*back;
	struct	blocklist	*forw;
	int	kval;
	int	fill;			 
} BLOCKLIST;




typedef struct {
	union {
		BLOCKLIST *budtab;
		cseg_t	*pbase;
	} u;				 
	int	budfree[1 << (12-5)];	
	BLOCKLIST bfree[12];
	unsigned short	*tfree, *efree, *pfree;
		 
	unsigned short lo, hi;	 
	vaddr_t vaddre;		 
} SYSMEM;

extern SYSMEM	sysmem;
cseg_t	*c_alloc();
cseg_t	*c_extend();
BLOCKLIST	*arealloc();

 

 

 


 


typedef struct {
	int	pid;
	int	r[18+1];
	int	(*func)();
	int	a[5];
	int	res;
	int	err;
} EVENT;

extern	EVENT	evtab[32];
EVENT	*evtrap();





 
 




 
 





 

 


 
extern unsigned t_piggy;


 
extern unsigned t_hal;


 
extern unsigned t_vlad;


 
extern unsigned t_msgq;


 
extern unsigned t_errno;


 
extern unsigned t_con;













 




 
extern	char		*alloc();



 



 
typedef struct TIME {
	time_t	t_time;			 
	int	t_tick;			 
	int	t_zone;			 
	int	t_dstf;			 
} TIME;

 
extern	int	 debflag;		 
extern	int	 batflag;		 
extern	int	 outflag;		 
extern	int	 ttyflag;		 
extern	int	 mactype;		 
extern	unsigned utimer;		 
extern	long	 lbolt;			 
extern	TIM	stimer;			 
extern	unsigned msize;			 
extern	unsigned asize;			 
extern	TIME	 timer;			 
extern	char	 *icodep;		 
extern	int	 icodes;		 
extern	dev_t	 rootdev;		 
extern	dev_t	 swapdev;		 
extern	dev_t	 pipedev;		 
extern	paddr_t	 corebot;		 
extern	paddr_t	 coretop;	 	 
extern	paddr_t	 holebot;		 
extern	paddr_t	 holetop;		 
extern	daddr_t	 swapbot;		 
extern	daddr_t	 swaptop;		 
extern	paddr_t	 clistp;		 
extern	struct	 all *allkp;		 
extern	int	 NSLOT;			 
extern	int	 slotsz;		 
extern	int *	 slotp;			 
extern	int	 (*altclk)();		 
extern	UPROC	 u;			 



extern	unsigned total_mem;		 
extern	SR	blockp;			 
extern	SR	allocp;
extern	int	dev_loaded;
extern	int	DUMP_LIM;




 
 




 
















 
 
 
 
 
 


 



 
 
 
 

 

 






 

 
 








 









 









 

typedef	struct	fdisk_s {
	unsigned char	p_boot;		 
	unsigned char	p_bhd;		 
	unsigned char	p_bsec;		 
	unsigned char	p_bcyl;		 
	unsigned char	p_sys;		 
	unsigned char	p_ehd;		 
	unsigned char	p_esec;		 
	unsigned char	p_ecyl;		 
	unsigned long		p_base;		 
	unsigned long		p_size;		 
} FDISK_S;
 
typedef	struct	hdisk_s {
	unsigned char	hd_boot[446];		 

	struct fdisk_s	hd_partn[4];	 

	unsigned short	hd_sig;			 
} HDISK_S;






 

 
 








 
extern	int	idle();
extern	PROC	*process();
extern	int	wakeup();

 
extern	int	quantum;		 
extern	int	disflag;		 
extern	int	intflag;		 
extern	int	cpid;			 
extern	GATE	pnxgate;		 
extern	PROC	procq;			 
extern	PROC	*iprocp;		 
extern	PROC	*eprocp;		 
extern	PROC	*cprocp;		 
extern	PLINK	linkq[97];		 


extern	int	swmflag;		 


 





 

 
 




 
 




 
typedef struct seg {
	struct	 seg * s_forw;		 
	struct	 seg * s_back;		 
	struct	 inode * s_ip;		 
	short	 s_flags;		 
	short	 s_urefc;		 
	short	 s_lrefc;		 

	off_t	 s_size;		 
	cseg_t	 *s_vmem;		 

	daddr_t	 s_daddr;		 
} SEG;

 







 




 
extern	SEG	*iomapvp();		 
extern	SEG	*segdupl();		 
extern	SEG	*ssalloc();		 
extern	SEG	*salloc();		 
extern	SEG	*segsext();		 
extern	SEG	*segdupd();		 
extern	SEG	*sdalloc();		 
extern	SEG	*smalloc();		 
extern	SEG	*shalloc();		 
extern	SEG	*exaread();		 
extern	SEG	*exsread();		 
extern	SEG	*exstack();		 

 
extern	int	sexflag;		 
extern	GATE	seglink;		 
extern	SEG	segswap;		 
extern	SEG	segmq;			 
extern	SEG	segdq;			 
extern	SEG	segiom;			 





 
 




 
 




 
struct stat {
	dev_t	 st_dev;		 
	ino_t	 st_ino;		 
	unsigned short st_mode;		 
	short	 st_nlink;		 
	short	 st_uid;		 
	short	 st_gid;		 
	dev_t	 st_rdev;		 
	fsize_t	 st_size;		 
	time_t	 st_atime;		 
	time_t	 st_mtime;		 
	time_t	 st_ctime;		 
};

 















 


 






 
 




 


 

typedef signed char int8;

typedef unsigned char uint8;

typedef short int16;

typedef unsigned short uint16;

typedef long int32;

typedef unsigned long uint32;





 
typedef int16 space_type;		 

 
typedef struct typed_space_struct {
	int32	ts_size;
	space_type	ts_type;
	char	ts_data[0];	 
} typed_space;

 


 
	 

	 


 



 






 




 






 

 
typedef struct fifo {
	typed_space *f_space;	 
	typed_space *f_offset;	 
	int16	f_flags;	 
} FIFO;

 
typedef struct bios_disk {
	uint16 dp_drive;		 
	uint16 dp_cylinders;		 
	uint16 dp_heads;		 
	uint16 dp_sectors;		 
} BIOS_DISK;

 
typedef struct bios_rootdev {
	uint8 rd_partition;	 
} BIOS_ROOTDEV;

 

 
FIFO *fifo_open();		 
typed_space *fifo_read();	 
typed_space *fifo_write();	 
typed_space *fifo_write_untyped();   
int fifo_rewind();		 
int fifo_close();		 

 



 



 








 



 



 
int read_cmos();

static void atcount();
static void rpdev();

 
extern dev_t rootdev;
extern dev_t pipedev;
extern int ronflag;
extern int PHYS_MEM;

short n_atdr;
char version[] = "COHERENT";
char release[] = "4.0.1r67";
char copyright[] = "Copyright 1982,1992 Mark Williams Company\n";

unsigned long	_entry = 0;		 
unsigned long	__ = 0;			 

main()
{
	register SEG *sp;

	int speed1, speed2;
	char * ndpTypeName();


	chirp('a');


	wrNdpUser(0);
	wrNdpSaved(0);

	u.u_error = 0;
	bufinit();
	_chirp('0', 156);
	cltinit();
	_chirp('1', 156);
	pcsinit();
	_chirp('2', 156);
	seginit();
	_chirp('3', 156);
	atcount();
	_chirp('4', 156);
	rpdev();
	_chirp('5', 156);
	devinit();
	_chirp('6', 156);

	rlinit();
	 
	_chirp(' ', 156);
	chirp(' ');

	putchar_init();
	printf("*** COHERENT Version %s - 386 Mode.  %uKB free memory. ***\n",
		release, (((long)((sysmem.pfree - sysmem.tfree))) << 12)/1024);
	if ((int11() & 0x30) == 0x30)
		printf("Monochrome.  ");
	else
		printf("Color.  ");
	senseNdp();
	printf(ndpTypeName());


	printf( "%u buffers.  %u clists.\n", NBUF, NCLIST);
	printf( "%uKB kalloc pool.  %u KB phys pool.\n",
	  ALLSIZE/1024, PHYS_MEM/1024);
	printf(copyright);


	 
	do {
		speed1 = read_t0();
		speed2 = read_t0();
	} while (speed1 < speed2);

	{ if (t_piggy&0x400) { printf("CPU snail rating: %d\n", speed1 - speed2); } };


	if (_entry) {
		printf("Serial Number ");
		printf("%U\n", _entry);
	}

	 
	if (_entry != __)
panic("Verification error - call Mark Williams Company at +1-708-291-6700\n");

	 
	batflag = 1;

	iprocp = cprocp;
	chirp('b');
	if (pfork()) {
		chirp('i');
		idle();
	} else {
		fsminit();
		chirp('-');
		eprocp = cprocp;
		eveinit();
		chirp('=');
	}

	chirp('c');
}

 
static void atcount()
{
	int u;
	n_atdr = 0;

	 
	u = read_cmos(0x12);
	if (u & 0x00F0)
		n_atdr++;
	if (u & 0x000F)
		n_atdr++;
}

 
static void rpdev()
{
	FIFO *ffp;
	typed_space *tp;
	int found;
	extern typed_space boot_gift;
	unsigned root_ptn, root_drv, root_maj, root_min;

	if (rootdev == ((0<<8)|0)) {
		found = 0;
		if (((FIFO *) 0) != (ffp = fifo_open(&boot_gift, 0))) {

			for (; !found && ((typed_space *) 0) != (tp = fifo_read(ffp)); ) {
				BIOS_ROOTDEV *brp = (BIOS_ROOTDEV *)tp->ts_data;
				if (0x200+2 == tp->ts_type) {
					found = 1;
					root_ptn = brp->rd_partition;
				}
			}
			fifo_close(ffp);

		}
		if (found) {
			 
			root_drv = root_ptn/4;
			root_ptn %= 4;
			if (n_atdr > root_drv) {
				root_maj = 11;
				root_min = root_drv*4 + root_ptn;
			} else {  
				root_maj = 13;
				root_min = (root_drv-n_atdr)*16 + root_ptn;
			}
			rootdev = ((root_maj<<8)|root_min);
			printf("rootdev=(%d,%d)\n", root_maj, root_min);
		}
	}
	if (pipedev == ((0<<8)|0)) {
		if (ronflag)
			pipedev = ((8<<8)|0x83);
		else
			pipedev = rootdev;
		printf("pipedev=(%d,%d)\n", (pipedev>>8)&0xff, pipedev&0xff);
	}
}
@
