head     1.1;
branch   ;
access   ;
symbols  ;
locks    bin:1.1;
comment  @@;


1.1
date     93.04.16.06.49.34;  author bin;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Hal: kernel 76 update
@
text
@ 
 
 
 




 
 




 
typedef	unsigned int	aold_t;		 
typedef	unsigned int	bmap_t;		 
typedef	unsigned int	bold_t;		 
typedef	unsigned int	cmap_t;		 
typedef	unsigned int	cold_t;		 
typedef	unsigned int	dmap_t;		 
typedef	unsigned int	dold_t;		 

 
typedef	unsigned short	comp_t;		 
typedef	long		daddr_t;	 
typedef	unsigned short	dev_t;		 
typedef	long	 	fsize_t;	 
typedef	unsigned short	ino_t;		 
typedef	long	 	off_t;		 
typedef	long	 	paddr_t;	 
typedef	long	 	sig_t;		 
typedef	long	 	time_t;		 
typedef	unsigned int	vaddr_t;	 
typedef	char	 	GATE[2];	 

typedef	long		cseg_t;		 




 
 


 
 




 
 



 
 



 



 





extern	int	NBUF;			 
extern	int	NHASH;			 
extern	int	NINODE;			 
extern	int	NCLIST;			 
extern	int	ALLSIZE;		 
extern	int	ISTSIZE;		 































 







 






 







 





















 




















 





 


 





 








 
typedef union mreg_u {
	unsigned m_reg[1];
	unsigned m_int;
} MREG;

 
typedef struct mproto {
	unsigned mp_csl;
	unsigned mp_dsl;
	vaddr_t	mp_svb;
	vaddr_t	mp_svl;
} MPROTO;

 
typedef	struct menv_s {
	int	me_di;
	int	me_si;
	int	mc_bx;
	int	me_bp;
	int	me_sp;
	int	me_pc;
	int	me_fw;
}	MENV;

 
typedef	struct mcon_s {
	int	mc_di;
	int	mc_si;
	int	mc_bx;
	int	mc_bp;
	int	mc_sp;
	int	mc_pc;
	int	mc_fw;
}	MCON;

 
typedef int MGEN[1];

 









 





















 
struct l {
	int	l_lo;
	int	l_hi;
};






 
typedef struct tim {
	struct	 tim *t_next;		 
	struct   tim *t_last;		 
	long	 t_lbolt;		 
	int	 (*t_func)();		 
	char	 *t_farg;		 

} TIM;


 
extern	TIM *	timq[256];		 





 


 
 




 


 


 


 


 


 




 






 
 




 


 
 



 






struct dirent {
	long	d_ino;	 
	daddr_t	d_off;	 
	unsigned short	d_reclen;   
	char	d_name[1];
};




	 

typedef struct
	{
	int	dd_fd;			 
	int	dd_loc;			 
	int	dd_size;		 
	char	*dd_buf;		 
	}	DIR;			 

extern DIR		*opendir();
extern struct dirent	*readdir();
extern void		rewinddir();
extern int		closedir();
extern daddr_t		telldir();
extern void		seekdir();


struct direct {
	ino_t	 d_ino;			 
	char	 d_name[14];	 
};




 
 




 
 




 
typedef struct io {
	int	 io_seg;		 
	unsigned io_ioc;		 

	off_t	 io_seek;		 
	union {
		vaddr_t	vbase;		 
		paddr_t	pbase;		 
	} io;

	short	 io_flag;		 
} IO;

 




 




 
 




 
 



 


 

 
struct pollfd {
	int	fd;		 
	short	events;		 
	short	revents;	 
};

 







 
typedef
struct event {
	struct event *	e_pnext;	 
	struct event *	e_dnext;	 
	struct event *	e_dlast;	 
	struct proc  *	e_procp;	 
} event_t;



 
 



 




 
typedef struct proc {
	struct	 proc *p_lforw;		 
	struct	 proc *p_lback;		 
	struct	 proc *p_nforw;		 
	struct	 proc *p_nback;		 
	struct	 seg  *p_segp[4+1];	 
	unsigned p_pid;			 
	unsigned p_ppid;		 
	unsigned p_uid;			 
	unsigned p_ruid;		 
	unsigned p_rgid;		 
	unsigned p_state;		 
	unsigned p_flags;		 
	sig_t	 p_ssig;		 

	sig_t	 p_dfsig;		 
	sig_t	 p_hsig;		 
	sig_t	 p_dsig;		 

	sig_t	 p_isig;		 
	char	 *p_event;		 
	unsigned p_alarm;		 
	unsigned p_group;		 
	dev_t	 p_ttdev;		 
	unsigned p_nice;		 
	unsigned p_cval;		 
	unsigned p_sval;		 
	int	 p_ival;		 
	unsigned p_rval;		 
	unsigned p_lctim;		 
	long	 p_utime;		 
	long	 p_stime;		 
	long	 p_cutime;		 
	long	 p_cstime;		 
	int	 p_exit;		 
	event_t *p_polls;		 
	TIM	 p_polltim;		 
	TIM	 p_alrmtim;		 

	struct	 rlock	*p_prl;		 

} PROC;

 









 




 














 




 




 
typedef struct plink {
	struct	 proc *p_lforw;		 
	struct	 proc *p_lback;		 
} PLINK;







 
extern	int	idle();
extern	PROC	*process();
extern	int	wakeup();

 
extern	int	quantum;		 
extern	int	disflag;		 
extern	int	intflag;		 
extern	int	cpid;			 
extern	GATE	pnxgate;		 
extern	PROC	procq;			 
extern	PROC	*iprocp;		 
extern	PROC	*eprocp;		 
extern	PROC	*cprocp;		 
extern	PLINK	linkq[97];		 


extern	int	swmflag;		 


 





 

 




extern void	(*signal())();
extern void	(*sigset())();




























 




















 
 




struct _fpstackframe {
	long	signo;
	long	regs[18+1];
	struct _fpstate *fpsp;
	char	*wsp;
};

struct _fpreg {
	unsigned short significand[4];
	unsigned short exponent;
};

struct _fpstate {
	unsigned long	cw,
			sw,
			tag,
			ipoff,
			cssel,
			dataoff,
			datasel;
	struct _fpreg	_st[8];
	unsigned long	status;
};



 
typedef struct sr {
	int	 sr_flag;		 
	vaddr_t	 sr_base;		 

	off_t	 sr_size;		 

	struct	 seg *sr_segp;		 
} SR;

 




 



typedef struct uproc {

	 

	unsigned short u_version;	 

	char	 u_error;		 
	char	 u_flag;		 
	int	 u_uid;			 
	int	 u_gid;			 
	int	 u_ruid;		 
	int	 u_rgid;		 
	int	 u_euid;		 
	int	 u_egid;		 
	unsigned u_umask;		 
	struct	 inode *u_cdir;		 
	struct	 inode *u_rdir;		 
	struct	 fd *u_filep[60];	 
	struct	 sr u_segl[4];	 

	int	 (*u_sfunc[32])();	 


	 
	struct	 seg *u_sege[4];	 
	MPROTO	 u_sproto;		 
	MCON	 u_syscon;		 
	MENV	 u_sigenv;		 
	MGEN	 u_sysgen;		 

	int	 u_args[6];

	struct	 io u_io;		 

	 
	ino_t	 u_cdirn;		 
	struct	 inode *u_cdiri;	 
	struct	 inode *u_pdiri;	 
	struct	 direct u_direct;	 

	 
	char	 u_comm[10];	 

	char	 u_sleep[10];		 

	time_t	 u_btime;		 
	int	 u_memuse;		 
	long	 u_block;		 

	 
	vaddr_t  u_ppc;			 
	vaddr_t	 u_pbase;		 
	vaddr_t	 u_pbend;		 

	off_t	 u_pofft;		 
	off_t	 u_pscale;		 


	 
	int	u_argc;			 
	unsigned u_argp;		 
	int	u_signo;		 

	int	*u_regl;
	int	u_rval2;
	void	(*u_sigreturn)();
	struct _fpstate	u_ndpCon;	 
	int	u_ndpFlags;

} UPROC;





	 












































 













 




 



















 








SR	*loaded();
cseg_t	*c_begin();







typedef struct blocklist
{
	struct	blocklist	*back;
	struct	blocklist	*forw;
	int	kval;
	int	fill;			 
} BLOCKLIST;




typedef struct {
	union {
		BLOCKLIST *budtab;
		cseg_t	*pbase;
	} u;				 
	int	budfree[1 << (12-5)];	
	BLOCKLIST bfree[12];
	unsigned short	*tfree, *efree, *pfree;
		 
	unsigned short lo, hi;	 
	vaddr_t vaddre;		 
} SYSMEM;

extern SYSMEM	sysmem;
cseg_t	*c_alloc();
cseg_t	*c_extend();
BLOCKLIST	*arealloc();

 

 

 


 


typedef struct {
	int	pid;
	int	r[18+1];
	int	(*func)();
	int	a[5];
	int	res;
	int	err;
} EVENT;

extern	EVENT	evtab[32];
EVENT	*evtrap();





 
 




 
 





 

 


 
extern unsigned t_piggy;


 
extern unsigned t_hal;


 
extern unsigned t_vlad;


 
extern unsigned t_msgq;


 
extern unsigned t_errno;


 
extern unsigned t_con;













 




 
extern	char		*alloc();



 



 
typedef struct TIME {
	time_t	t_time;			 
	int	t_tick;			 
	int	t_zone;			 
	int	t_dstf;			 
} TIME;

 
extern	int	 debflag;		 
extern	int	 batflag;		 
extern	int	 outflag;		 
extern	int	 ttyflag;		 
extern	int	 mactype;		 
extern	unsigned utimer;		 
extern	long	 lbolt;			 
extern	TIM	stimer;			 
extern	unsigned msize;			 
extern	unsigned asize;			 
extern	TIME	 timer;			 
extern	char	 *icodep;		 
extern	int	 icodes;		 
extern	dev_t	 rootdev;		 
extern	dev_t	 swapdev;		 
extern	dev_t	 pipedev;		 
extern	paddr_t	 corebot;		 
extern	paddr_t	 coretop;	 	 
extern	paddr_t	 holebot;		 
extern	paddr_t	 holetop;		 
extern	daddr_t	 swapbot;		 
extern	daddr_t	 swaptop;		 
extern	paddr_t	 clistp;		 
extern	struct	 all *allkp;		 
extern	int	 NSLOT;			 
extern	int	 slotsz;		 
extern	int *	 slotp;			 
extern	int	 (*altclk)();		 
extern	UPROC	 u;			 



extern	unsigned total_mem;		 
extern	SR	blockp;			 
extern	SR	allocp;
extern	int	dev_loaded;
extern	int	DUMP_LIM;




 
 





















































 

 
 




 
 




 
struct dinode {
	unsigned short di_mode;		 
	short	 di_nlink;		 
	short	 di_uid;		 
	short	 di_gid;		 
	fsize_t	 di_size;		 

	union dia_u {
		 char	 di_addb[40];	 
		 dev_t	 di_rdev;	 

		 struct dip_s {		 
			 char	 dp_addp[30];
			 short	 dp_pnc;
			 short	 dp_prx;
			 short	 dp_pwx;
		} di_p;
	} di_a;

	time_t	 di_atime;		 
	time_t	 di_mtime;		 
	time_t	 di_ctime;		 
};

 






 






 














 
 




 
 




 


 
typedef struct inode {
	dev_t	i_dev;			 
	ino_t	i_ino;			 
	int	i_refc;			 
	unsigned i_lrt;			 
	GATE	i_gate;			 
	int	i_flag;			 
	int	i_mode;			 
	int	i_nlink;		 
	int	i_uid;			 
	int	i_gid;			 
	fsize_t	i_size;			 
	union ia_u {
		daddr_t	i_addr[13];	 
		dev_t	i_rdev;		 
		struct ip_s {		 
			daddr_t ip_pipe[10];
			int	ip_pnc;
			int	ip_prx;
			int	ip_pwx;
		}	i_p;
	}	i_a;			 
	time_t	i_atime;		 
	time_t	i_mtime;		 
	time_t	i_ctime;		 

	struct	rlock	*i_rl;		 

} INODE;

 





 











 




 








 



 




 








 
extern	INODE	*exlopen();		 
extern	INODE	*ftoim();		 
extern	INODE	*imake();		 
extern	INODE	*iattach();		 
extern	INODE	*ialloc();		 
extern	daddr_t	balloc();		 
extern	INODE	*pmake();		 

 
extern	int	ronflag;		 
extern	INODE	*inodep;		 
extern	INODE	*acctip;		 





 

 
 



 
 








 
extern	int	idle();
extern	PROC	*process();
extern	int	wakeup();

 
extern	int	quantum;		 
extern	int	disflag;		 
extern	int	intflag;		 
extern	int	cpid;			 
extern	GATE	pnxgate;		 
extern	PROC	procq;			 
extern	PROC	*iprocp;		 
extern	PROC	*eprocp;		 
extern	PROC	*cprocp;		 
extern	PLINK	linkq[97];		 


extern	int	swmflag;		 


 





 

 


 
 




 
struct ptrace {
	int	 pt_req;		 
	int	 pt_pid;		 
	vaddr_t	 pt_addr;		 
	int	 pt_data;		 
	int	 pt_errs;		 
	int	 pt_rval;		 
	int	 pt_busy;		 
	GATE	 pt_gate;		 
};


 











 
 





















 

















 












 
extern	struct	ptrace pts;			 





 
 



 




 




 





 




 




 




 




 




 




 




 




 




 




 






 
 




 
 




 
typedef struct seg {
	struct	 seg * s_forw;		 
	struct	 seg * s_back;		 
	struct	 inode * s_ip;		 
	short	 s_flags;		 
	short	 s_urefc;		 
	short	 s_lrefc;		 

	off_t	 s_size;		 
	cseg_t	 *s_vmem;		 

	daddr_t	 s_daddr;		 
} SEG;

 







 




 
extern	SEG	*iomapvp();		 
extern	SEG	*segdupl();		 
extern	SEG	*ssalloc();		 
extern	SEG	*salloc();		 
extern	SEG	*segsext();		 
extern	SEG	*segdupd();		 
extern	SEG	*sdalloc();		 
extern	SEG	*smalloc();		 
extern	SEG	*shalloc();		 
extern	SEG	*exaread();		 
extern	SEG	*exsread();		 
extern	SEG	*exstack();		 

 
extern	int	sexflag;		 
extern	GATE	seglink;		 
extern	SEG	segswap;		 
extern	SEG	segmq;			 
extern	SEG	segdq;			 
extern	SEG	segiom;			 





 



void sendsig();

 
usigsys(signal, func)
int	signal;
register void (*func)();
{
	register PROC *pp;
	register sig_t s;
	register int (*old_sig)();
	int	sigtype;

	sigtype = signal & ~0xFF;
	signal ^= sigtype;

	pp = cprocp;
	if (signal<=0 || signal>23 || signal==9) {
		u.u_error = 22;
		return;
	}

	 
	if (signal == 11 && func != (void(*)())0) {
		u.u_error = 22;
		return;
	}

	if (sigtype==0x100 || sigtype==0) {
		if (func==(void(*)())1)
			sigtype = 0x800;
		if (func==(void(*)())2)
			sigtype = 0x200;
	}

	s = (sig_t)1 << --signal;
	if (pp->p_isig&s)
		old_sig = (void(*)())1;
	else if (pp->p_hsig&s)
		old_sig = (void(*)())2;
	else
		old_sig = u.u_sfunc[signal];

	switch (sigtype) {
	case 0x200:
		pp->p_hsig |= s;
		break;
	case 0x400:
		pp->p_hsig &= ~s;
		if (nondsig()) {
			{ if (t_piggy&0x100) { printf("a(s)");; } };
			actvsig();
		}
	case 0x800:
		pp->p_dfsig &= ~s;	 
		pp->p_isig |= s;	 
		pp->p_ssig &= ~s;	 
		break;
	case 0:				 
	case 0x100:			 
		u.u_sigreturn = (void (*)())u.u_regl[9];
		u.u_sfunc[signal] = func;
		 
		if ((void(*)())0 == func) {
			pp->p_dfsig |= s;
		} else {
			pp->p_dfsig &= ~s;
		}
		 
		pp->p_isig &= ~s;
		pp->p_hsig &= ~s;
		pp->p_ssig &= ~s;
		if (sigtype==0x100)
			pp->p_dsig |= s;
		else
			pp->p_dsig &= ~s;
		break;
	 
	default:
		u.u_error = 12;
		break;
	}
	return old_sig;
}


 
void
sendsig(sig, pp)
register unsigned sig;
register PROC *pp;
{
	register sig_t f;
	register int s;

	{ if (t_piggy&0x40000000) { printf("<send sig: %d, id: %d, state: %x, flags: %x, event: %x>", sig, pp->p_pid, pp->p_state, pp->p_flags, pp->p_event);; } };  

	 
	f = ((sig_t)1) << (sig-1);

	 
	if (pp->p_isig&f) {
		goto sendSigDone;
	}

	 
	if ((pp->p_ssig & f) && (pp->p_hsig|pp->p_dsig) & f)
		goto sendSigDone;
	
	 
	pp->p_ssig |= f;

	 
	if (pp->p_state == 1) {
		s = sphi();
		pp->p_lback->p_lforw = pp->p_lforw;
		pp->p_lforw->p_lback = pp->p_lback;
		{ unsigned x; x = pp->p_cval + ((utimer-pp->p_lctim)*1); pp->p_cval = x>=pp->p_cval ? x : ((unsigned)0177777); };
		setrun(pp);
		spl(s);
	}
sendSigDone:
	return;
}

 
nondsig()
{
	register PROC *pp;
	register sig_t mask;
	register int signo;

	pp = cprocp;
	signo = 0;
	 
	pp->p_ssig &= ~pp->p_isig;
	 
	if (pp->p_ssig&~pp->p_hsig) {
		 
		mask = (sig_t) 1;
		signo += 1;
		while (((pp->p_ssig&~pp->p_hsig) & mask) == 0) {
			mask <<= 1;
			signo += 1;
		}
	}
	return (signo);
}

 
actvsig()
{
	register int n;
	register PROC *pp;
	register int (*func)();
	sig_t s;

	 
	if ((n = nondsig()) == 0)
		return;

	pp = cprocp;

	 
	--n;
	pp->p_ssig &= ~((sig_t)1<<n);

	 
	func = u.u_sfunc[n];

	 
	u.u_signo = ++n;

	 
	if (func != (void(*)())0) {
		if (((u.u_regl[3]&0xffff) == (0x30|0x03)))
			oldsigstart(n, func);
		else
			msigstart(n, func);
		return;
	}

	 

	 
	msysgen(u.u_sysgen);

	 
	if (pp->p_flags&0x0040) {
		pp->p_flags |= 0x0010;
		n = ptret();
		pp->p_flags &= ~(0x0010|0x0020);
		if (n == 0)
			return;
	}

	 
	switch(n) {
	case 3:
	case 4:
	case 5:
	case 6:
	case 8:
	case 11:
	case 12:
		if (sigdump())
			n |= 0200;
		break;
	}
	pexit(n);
}

 
sigdump()
{
	register INODE *ip;
	register SR *srp;
	register SEG * sp;
	register int n;
	register paddr_t ssize;
	extern	int	DUMP_LIM;

	if (cprocp->p_flags&0x0400)
		return (0);
	u.u_io.io_seg  = 0;
	u.u_io.io_flag = 0;
	 
	schizo();
	if (ftoi("core", 'c')) {
		schizo();
		return (0);
	}
	if ((ip=u.u_cdiri) == 0) {
		if ((ip=imake(0100000|0644, 0)) == 0) {
			schizo();
			return (0);
		}
	} else {
		if ((ip->i_mode&0170000)!=0100000
		 || iaccess(ip, 0x02)==0
		 || getment(ip->i_dev, 1)==0) {
			idetach(ip);
			schizo();
			return (0);
		}
		iclear(ip);
	}
	schizo();
	u.u_error = 0;
	u.u_io.io_seek = 0;
	for (srp=u.u_segl; u.u_error==0 && srp<&u.u_segl[4]; srp++) {
		if ((sp = srp->sr_segp)==0 || (srp->sr_flag&02)==0)
			continue;
		u.u_io.io_seg = 2;
		u.u_io.io.pbase = (((sp->s_vmem)+((int)(0)>>12) - sysmem.u.pbase) << 12 | ((0) & (0x001000-1)));
		u.u_io.io_flag = 0;
		ssize = sp->s_size;
		if (ssize > DUMP_LIM) {
			printf("seg %d truncated from %d to %d bytes\n",
			  srp-u.u_segl, ssize, DUMP_LIM);
			ssize = DUMP_LIM;
		}
		sp->s_lrefc++;
		while (u.u_error == 0 && ssize != 0) {
			n = ssize > 16384 ? 16384 : ssize;
			u.u_io.io_ioc = n;
			iwrite(ip, &u.u_io);
			u.u_io.io.pbase += n;
			ssize -= (paddr_t)n;
		}
		sp->s_lrefc--;
	}
	idetach(ip);
	return (u.u_error==0);
}

 
ptset(req, pid, addr, data)
unsigned req;
int *addr;
{
	register PROC *pp;

	lock(pnxgate);
	for (pp=procq.p_nforw; pp!=&procq; pp=pp->p_nforw)
		if (pp->p_pid == pid)
			break;
	unlock(pnxgate);
	if (pp==&procq || (pp->p_flags&0x0020)==0 || pp->p_ppid!=cprocp->p_pid){
		u.u_error = 3;
		return;
	}
	lock(pts.pt_gate);
	pts.pt_req = req;
	pts.pt_pid = pid;
	pts.pt_addr = addr;
	pts.pt_data = data;
	pts.pt_errs = 0;
	pts.pt_rval = 0;
	pts.pt_busy = 1;
	wakeup((char *)&pts.pt_req);
	while (pts.pt_busy) {
		v_sleep((char *)&pts.pt_busy, 256, 0, 0, "ptrace");
		 
	}
	u.u_error = pts.pt_errs;
	unlock(pts.pt_gate);
	return (pts.pt_rval);
}

 
ptret()
{
	register PROC *pp;
	register PROC *pp1;
	register int sign;
	unsigned off;

	pp = cprocp;
next:
	u.u_error = 0;
	if (pp->p_ppid == 1)
		return (9);
	sign = -1;
	lock(pnxgate);
	pp1 = &procq;
	for (;;) {
		if ((pp1=pp1->p_nforw) == &procq) {
			sign = 9;
			break;
		}
		if (pp1->p_pid != pp->p_ppid)
			continue;
		if (pp1->p_state == 1)
			wakeup((char *)pp1);
		break;
	}
	unlock(pnxgate);
	while (sign < 0) {
		if (pts.pt_busy==0 || pp->p_pid!=pts.pt_pid) {
			v_sleep((char *)&pts.pt_req, 256, 0, 0, "ptret");
			 
			goto next;
		}
		switch (pts.pt_req) {
		case 1:
			if (((u.u_regl[3]&0xffff) == (0x30|0x03))) {
				pts.pt_rval = getuwd(0x400000+pts.pt_addr);
				break;
			}
			 
		case 2:
			pts.pt_rval = getuwd(pts.pt_addr);
			break;
		case 3:
			 
			off = (unsigned)pts.pt_addr;
			if (off < 224 && (off & 3) == 0) {
				if (off == 76)
					pts.pt_rval = u.u_signo;
				else
					pts.pt_rval = u.u_regl[off>>2];
			} else
				u.u_error = 22;
			break;
		case 4:
			if (((u.u_regl[3]&0xffff) == (0x30|0x03))) {
				putuwd(0x400000+pts.pt_addr, pts.pt_data);
				break;
			}
			 
		case 5:
			putuwd(pts.pt_addr, pts.pt_data);
			break;
		case 6:
			 
			off = (unsigned)pts.pt_addr;
			if (off < 224 && (off & 3) == 0) {
				if (off == 76)
					u.u_error = 22;
				else
					u.u_regl[off>>2] = pts.pt_data;
			} else
				u.u_error = 22;
			break;
		case 7:
			u.u_regl[16] &= ~0x0100;
			goto sig;
		case 8:
			sign = 9;
			break;
		case 9:
			u.u_regl[16] |= 0x0100;
		sig:
			if (pts.pt_data<0 || pts.pt_data>23) {
				u.u_error = 22;
				break;
			}
			sign = pts.pt_data;
			if (pts.pt_addr != (void(*)())1) {
printf("sig new eip:%x<=%x  ", u.u_regl + 14, pts.pt_addr);
				u.u_regl[14] = pts.pt_addr;
			}
			break;
		default:
			u.u_error = 22;
		}
		if ((pts.pt_errs=u.u_error) == 14)
			pts.pt_errs = 22;
		pts.pt_busy = 0;
		wakeup((char *)&pts.pt_busy);
	}
	return (sign);
}
@
