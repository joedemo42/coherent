head     1.8;
branch   ;
access   ;
symbols  ;
locks    bin:1.8; strict;
comment  @ * @;


1.8
date     93.06.14.13.42.39;  author bin;  state Exp;
branches ;
next     1.7;

1.7
date     93.01.18.16.24.40;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     92.09.29.09.51.57;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     92.09.09.08.43.46;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.08.28.08.59.02;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.08.20.12.55.08;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.08.04.12.41.54;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.17.15.22.27;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.8
log
@Hal: kernel 78 update
@
text
@/* (lgl-
 *	The information contained herein is a trade secret of Mark Williams
 *	Company, and  is confidential information.  It is provided  under a
 *	license agreement,  and may be  copied or disclosed  only under the
 *	terms of  that agreement.  Any  reproduction or disclosure  of this
 *	material without the express written authorization of Mark Williams
 *	Company or persuant to the license agreement is unlawful.
 *
 *	COHERENT Version 2.3.37
 *	Copyright (c) 1982, 1983, 1984.
 *	An unpublished work by Mark Williams Company, Chicago.
 *	All rights reserved.
 -lgl) */
/*
 * Program the 8237 DMA controller on the system board.
 */
#include	<sys/coherent.h>
#include	<sys/types.h>
#include	<sys/dmac.h>

/*
 * This table maps channel
 * numbers into DMA page address
 * register ports. The wiring of the
 * RA lines on the 74LS670 is a bit
 * strange.
 */
static	int	dmaport[8] = {
	DMAPAGE+7,			/* 0 (Free) */
	DMAPAGE+3,			/* 1 (Free) */
	DMAPAGE+1,			/* 2 (Floppy) */
	DMAPAGE+2,			/* 3 (Free) */
	DMAPAGE+15,			/* 4 (Cascade) */
	DMAPAGE+11,			/* 5 */
	DMAPAGE+9,			/* 6 */
	DMAPAGE+10			/* 7 */
};

/*
 * Program the channel of the
 * 8237 DMA controller specified by
 * "chan". The "paddr" is a 20 bit
 * physical address. The "count" is
 * the byte count. The "wflag" is
 * true if this is a write, from the
 * point of view of the device.
 * True return if the mapping can be
 * set up, given the 64K limits.
 * The "count" is predecremented, so
 * that backplane "+T/C" is issued at
 * the expected point in time.
 */
int
dmaon(chan, paddr, count, wflag)
register int	chan;
paddr_t		paddr;
unsigned	count;
{
	register int	port;
	register int	s;

	/*
	 * Change from 0 based transfer count to -1 based.
	 */
	count--;

	/*
	 * Select byte/word transfer.
	 * Channels 0-4 use byte transfer.
	 * Channels 5-7 use word transfers, with low 17 addr bits right shifted.
	 */
	if (chan >= 5) {
		count >>= 1;
		paddr >>= 1;
		paddr  += (paddr & 0xFF0000L);
	}

	/*
	 * Check for DMA straddle.
	 */
	if (dmaseg(paddr) != dmaseg(paddr+count))
		return 0;

	s = sphi();

	/*
	 * Select DMA controller.
	 */
	if (chan < 4) {
		port = DMA;

		/*
		 * Program for dma read/write operation.
		 */
		if (wflag != 0)
			outb(port + (SETMODE * 1), (chan & 3) | RDMEM);
		else
			outb(port + (SETMODE * 1), (chan & 3) | WRMEM);
		outb(port + (CLEARFL * 1), 0);
	}
	else {
		port = SDMA;

		/*
		 * Program for dma read/write operation.
		 */
		if (wflag != 0)
			outb(SDMA + (SETMODE * 2), (chan & 3) | RDMEM);
		else
			outb(SDMA + (SETMODE * 2), (chan & 3) | WRMEM);
		outb(SDMA + (CLEARFL * 2), 0);
	}

	/*
	 * Select memory bank.
	 */
	outb(dmaport[chan], (int)(paddr >> 16));

	if (chan < 4)
		port += ((chan & 3) << 1);
	else
		port += ((chan & 3) << 2);

	/*
	 * Program memory offset in bank.
	 */
	outb(port, ((int) paddr) >> 0);
	outb(port, ((int) paddr) >> 8);

	port++;
	if (chan >= 4)
		port++;

	/*
	 * Program transfer count.
	 */
	outb(port, count >> 0);
	outb(port, count >> 8);

	spl(s);
	return 1;
}

/*
 * dmago(chan) - initiate dma transfer
 */
void
dmago(chan)
register int chan;
{
	/*
	 * Enable dma transfers.
	 */
	if (chan < 4)
		outb(DMA  + (SETMASK * 1), (chan & 3) | MASKOFF);
	else
		outb(SDMA + (SETMASK * 2), (chan & 3) | MASKOFF);
}

/*
 * dmaoff(chan) - turn dma channel off, return residual count
 */
int
dmaoff(chan)
register int chan;
{
	register int port;
	register int count;
	int s;

	/*
	 * Disable DMA transfers.
	 * Obtain the -1 based residual count.
	 */
	s = sphi();
	if (chan < 4) {
		outb( DMA + (SETMASK * 1), (chan & 3) | MASKON);
		port = DMA + ((chan & 3) << 1) + 1;
	}
	else {
		outb( SDMA + (SETMASK * 2), (chan & 3) | MASKON);
		port = SDMA + ((chan & 3) << 2) + 2;
	}
	count  = inb(port);
	count += inb(port) << 8;
	spl(s);

	/*
	 * Convert residual from -1 based to 0 based.
	 */
	count++;

	/*
	 * Convert residual from word based to byte based.
	 */
	if (chan >= 5)
		count <<= 1;

	/*
	 * Return residual count in bytes.
	 */
	return count;
}
@


1.7
log
@hal: kernel 72
@
text
@a0 1
/* $Header: /v4a/i386/RCS/dmac.c,v 1.1 92/01/06 10:43:02 hal Exp $ */
d15 1
a15 13
 * The routines in this file
 * deal with the 8237 programmable
 * DMA controller on the system board.
 *
 * $Log:	dmac.c,v $
 * Revision 1.1  92/01/06  10:43:02  hal
 * Mods for compilation with cc.mwc
 * 
 * Revision 1.1	88/03/24  09:33:31 	src
 * Initial revision
 * 
 * 86/12/18	Allan Cornish		/usr/src/sys/i8086/ibm_at/dmac.c
 * Full support for DMA channels 5..7 added.
d53 1
d72 1
a72 1
	if ( chan >= 5 ) {
d81 2
a82 2
	if ( dmaseg(paddr) != dmaseg(paddr+count) )
		return (0);
d89 1
a89 1
	if ( chan < 4 ) {
d95 2
a96 2
		if ( wflag != 0 )
			outb( port + (SETMODE * 1), (chan & 3) | RDMEM );
d98 2
a99 2
			outb( port + (SETMODE * 1), (chan & 3) | WRMEM );
		outb( port + (CLEARFL * 1), 0 );
d107 2
a108 2
		if ( wflag != 0 )
			outb( SDMA + (SETMODE * 2), (chan & 3) | RDMEM );
d110 2
a111 2
			outb( SDMA + (SETMODE * 2), (chan & 3) | WRMEM );
		outb( SDMA + (CLEARFL * 2), 0 );
d117 1
a117 1
	outb( dmaport[chan], (int)(paddr >> 16) );
d119 1
a119 1
	if ( chan < 4 )
d127 2
a128 2
	outb( port, ((int) paddr) >> 0 );
	outb( port, ((int) paddr) >> 8 );
d131 1
a131 1
	if ( chan >= 4 )
d137 2
a138 2
	outb( port, count >> 0 );
	outb( port, count >> 8 );
d141 1
a141 1
	return (1);
d145 1
a145 1
 * dmago( chan ) - initiate dma transfer
d147 2
a148 1
dmago( chan )
d154 2
a155 2
	if ( chan < 4 )
		outb( DMA  + (SETMASK * 1), (chan & 3) | MASKOFF );
d157 1
a157 1
		outb( SDMA + (SETMASK * 2), (chan & 3) | MASKOFF );
d161 1
a161 1
 * dmaoff( chan ) - turn dma channel off, return residual count
d163 2
a164 1
dmaoff( chan )
d176 2
a177 2
	if ( chan < 4 ) {
		outb(  DMA + (SETMASK * 1), (chan & 3) | MASKON );
d181 1
a181 1
		outb(  SDMA + (SETMASK * 2), (chan & 3) | MASKON );
d186 1
a186 1
	spl( s );
d196 1
a196 1
	if ( chan >= 5 )
@


1.6
log
@*** empty log message ***
@
text
@@


1.5
log
@update by hal for kernel 62 (60 files)
@
text
@@


1.4
log
@update by hal for kernel 61
@
text
@@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@kernel 59: hex output
@
text
@d30 1
@


1.1
log
@Initial revision
@
text
@@
