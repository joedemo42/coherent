head     1.5;
branch   ;
access   ;
symbols  ;
locks    bin:1.5; strict;
comment  @ * @;


1.5
date     93.04.16.06.45.39;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     93.03.02.08.29.28;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.12.18.14.19.26;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.08.20.12.55.22;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.17.15.22.28;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@kernel 76: hal: dmaout() sometimes wrote garbage over the start of a click.
@
text
@/*
 * these routines are written in C until the 386 compiler/assembler
 * are available
 *
 * Copyright (c) Ciaran O'Donnell, Bievres (FRANCE), 1991
 */

#include <sys/coherent.h>
#include <sys/reg.h>
#include <sys/clist.h>
#include <errno.h>
#include <sys/inode.h>
#include <sys/proc.h>
#include <sys/seg.h>
#include <signal.h>
#include <sys/uproc.h>
#include <sys/buf.h>

#define	min(a, b)	((a) < (b) ? (a) : (b))

/*
 * dmacopy()
 *
 * Copy "npage" 4 kbyte pages from phys addr "from" to phys addr "to".
 */
dmacopy(npage, from, to) 
long	npage;
cseg_t	*from, *to;
{
	int save = setspace(SEG_386_KD);

	while (npage--) {
		int work = workAlloc();	/* Get a virtual click pair. */
		ptable1_v[work] = *from++ | SEG_SRW;
		ptable1_v[work + 1] = *to++ | SEG_SRW;
		mmuupd();
		copyseg_d(NBPC, ctob(work), ctob(work + 1));
		workFree(work);
	}
	setspace(save);
}

/*
 * dmaclear()
 *
 * Given a byte count, a system global address, and a fill value,
 * write the fill value through the given range of memory.
 */
dmaclear(nbytes, to, fill)
long	nbytes, fill;
paddr_t	to;
{
	unsigned off;
	int	n;
	cseg_t *base;
	int save = setspace(SEG_386_KD);
	int work = workAlloc();	/* Get a virtual click pair. */

	off = to & (NBPC-1);
	base = &sysmem.u.pbase[btocrd(to)];
	n = min(nbytes, NBPC-off);
	ptable1_v[work] = *base++ | SEG_SRW;
	mmuupd();
	
	clearseg_d(n, ctob(work)+off, fill);
	nbytes -= n;

	while (nbytes >= NBPC) {
		ptable1_v[work] = *base++ | SEG_SRW;
		mmuupd();
		clearseg_d(NBPC, ctob(work), fill);
		nbytes -= NBPC;
	}

	if (nbytes) {
		ptable1_v[work] = *base++ | SEG_SRW;
		mmuupd();
		clearseg_d(nbytes, ctob(work), fill);
	}
	setspace(save);
	workFree(work);
}

/*
 * dmain()
 * 
 * Copy in "nbytes" from system global address "to" to kernel address
 * "vaddr".
 */
dmain(nbytes, to, vaddr)
long	nbytes;
paddr_t	to;
caddr_t	vaddr;
{
	unsigned off;
	unsigned	n, n1;
	cseg_t* base;
	int work = workAlloc();	/* Get a virtual click pair. */
	int save = setspace(SEG_386_KD);

	off = to & (NBPC-1);
	base = &sysmem.u.pbase[btocrd(to)];

	n = min(nbytes, NBPC-off);
	ptable1_v[work] = *base++ | SEG_SRW;
	mmuupd();

	if (nbytes==n) {
		/*
		 * only one page
		 * n = min(n & (sizeof(long)-1), n)
		 * copy n bytes; nbytes -= n;
		 * copy (nbytes >> 2) long words; nbytes &= sizeof(long)-1
		 * copy nbytes bytes
		 */
		if (n >= sizeof(long))
			n &= sizeof(long)-1;
		if (n)
			copyseg_b(n, ctob(work)+off, vaddr);
		off += n;
		vaddr += n;
		nbytes -= n;
		if (n = nbytes & ~(sizeof(long)-1)) {
			copyseg_d(n, ctob(work)+off, vaddr);
			off += n;
			vaddr += n;
			nbytes -= n;
		}
	} else {
		/*
		 * more than one page
		 * copy n&3 bytes
		 * copy n >> 2 long words
		 * in the first page
		 */			
		if (n1 = n & 3)
			copyseg_b(n1, ctob(work)+off, vaddr);
		off += n1;
		vaddr += n1;
		nbytes -= n1;
		if (n = n & ~(sizeof(long)-1)) {
			copyseg_d(n, ctob(work)+off, vaddr);
			off += n;
			vaddr += n;
			nbytes -= n;
		}

		/*
		 * copy nbytes>>BPCSHIFT full pages
		 */
		while (nbytes >= NBPC) {
			ptable1_v[work] = *base++ | SEG_SRW;
			mmuupd();
	
			copyseg_d(NBPC, ctob(work), vaddr);
			vaddr += NBPC;
			nbytes -= NBPC;
		}
		/*
		 * page n-1 (last one)
		 *
		 * copy nbytes>>2 long words
		 * copy nbytes & 3 bytes
		 */
		ptable1_v[work] = *base++ | SEG_SRW;
		mmuupd();
	
		if (n = nbytes & ~(sizeof(long)-1)) {
			copyseg_d(n, ctob(work), vaddr);
			vaddr += n;
			nbytes -= n;
		}
		if (nbytes)
			copyseg_b(nbytes, ctob(work)+n, vaddr);
	}

	setspace(save);
	workFree(work);
}

/*
 * dmaout()
 * 
 * Copy out "nbytes" from kernel address "vaddr" to system global address
 * "to".
 */
dmaout(nbytes, to, vaddr)
long	nbytes;
paddr_t	to;
caddr_t	vaddr;
{
	unsigned off;
	unsigned	n, n1;
	cseg_t *base;
	int work = workAlloc();	/* Get a virtual click pair. */
	int save = setspace(SEG_386_KD);

	off = to & (NBPC-1);
	base = &sysmem.u.pbase[btocrd(to)];

	n = min(nbytes, NBPC-off);
	ptable1_v[work] = *base++ | SEG_SRW;
	mmuupd();

	if (nbytes==n) {
		/*
		 * only one page
		 * n = min(n & (sizeof(long)-1), n)
		 * copy n bytes; nbytes -= n;
		 * copy (nbytes >> 2) long words; nbytes &= sizeof(long)-1
		 * copy nbytes bytes
		 */
		if (n1 = n & (sizeof(long)-1))
			copyseg_b(n1, vaddr, ctob(work)+off);
		off += n1;
		vaddr += n1;
		nbytes -= n1;
		if (n = nbytes & ~(sizeof(long)-1)) {
			copyseg_d(n, vaddr, ctob(work)+off);
			off += n;
			vaddr += n;
			nbytes -= n;
		}
	} else {
		/*
		 * more than one page
		 * copy n&3 bytes
		 * copy n >> 2 long words
		 * in the first page
		 */			
		if (n1 = n & (sizeof(long)-1))
			copyseg_b(n1, vaddr, ctob(work)+off);
		off += n1;
		vaddr += n1;
		nbytes -= n1;
		if (n = n & ~(sizeof(long)-1)) {
			copyseg_d(n, vaddr, ctob(work)+off);
			off += n;
			vaddr += n;
			nbytes -= n;
		}

		/*
		 * copy nbytes>>BPCSHIFT full pages
		 */
		while (nbytes >= NBPC) {
			ptable1_v[work] = *base++ | SEG_SRW;
			mmuupd();
			copyseg_d(NBPC, vaddr, ctob(work));
			vaddr += NBPC;
			nbytes -= NBPC;
		}

		/* now the transfer to memory is click-aligned */
		off = 0;

		/*
		 * page n-1 (last one)
		 *
		 * copy nbytes>>2 long words
		 * copy nbytes & 3 bytes
		 */
		ptable1_v[work] = *base++ | SEG_SRW;
		mmuupd();
	
		if (n = nbytes & ~(sizeof(long)-1)) {
			copyseg_d(n, vaddr, ctob(work));
			vaddr += n;
			off += n;
			nbytes -= n;
		}
		if (nbytes)
			copyseg_b(nbytes, vaddr, ctob(work)+off);
	}

	setspace(save);
	workFree(work);
}

/*
 * dmaio2()
 * 
 * Copy in "nbytes" from an I/O port "port" to the system global address
 * "to".
 */
dmaio2(nbytes, to, port)
long	nbytes, port;
paddr_t	to;
{
	unsigned off;
	int	n;
	cseg_t *base;
	int save = setspace(SEG_386_KD);
	int work = workAlloc();	/* Get a virtual click pair. */

	off = to & (NBPC-1);
	base = &sysmem.u.pbase[btocrd(to)];

	n = min(nbytes, NBPC-off);
	ptable1_v[work] = *base++ | SEG_SRW;
	mmuupd();
	
	io2seg(n, ctob(work)+off, port);
	nbytes -= n;

	while (nbytes >= NBPC) {
		ptable1_v[work] = *base++ | SEG_SRW;
		mmuupd();
		io2seg(NBPC, ctob(work), port);
		nbytes -= NBPC;
	}

	if (nbytes) {
		ptable1_v[work] = *base++ | SEG_SRW;
		mmuupd();
		io2seg(nbytes, ctob(work), port);
	}
	setspace(save);
	workFree(work);
}

/*
 * dma2io()
 * 
 * Copy out "nbytes" from the system global address "from" to an I/O port
 * "port".
 */
dma2io(nbytes, to, port)
long	nbytes, port;
paddr_t	to;
{
	unsigned off;
	int	n;
	cseg_t *base;
	int save = setspace(SEG_386_KD);
	int work = workAlloc();	/* Get a virtual click pair. */

	off = to & (NBPC-1);
	base = &sysmem.u.pbase[btocrd(to)];

	n = min(nbytes, NBPC-off);
	ptable1_v[work] = *base++ | SEG_SRW;
	mmuupd();
	
	seg2io(n, ctob(work)+off, port);
	nbytes -= n;

	while (nbytes >= NBPC) {
		ptable1_v[work] = *base++ | SEG_SRW;
		mmuupd();
		seg2io(NBPC, ctob(work), port);
		nbytes -= NBPC;
	}

	if (nbytes) {
		ptable1_v[work] = *base++ | SEG_SRW;
		mmuupd();
		seg2io(nbytes, ctob(work), port);
	}
	setspace(save);
	workFree(work);
}

/*
 * pxcopy()
 *
 * copy "n" bytes of data at kernel address "v" from address "uo" in:
 * 	system global address space		(space&SEG_VIRT)
 * 	physical memory				!(space&SEG_VIRT)
 * Rights are determined by (space&~SEG_VIRT):
 * 	"v" can be anywhere in kernel address space	SEG_386_KD
 * 	"v" must be an address accessible to the user	SEG_386_UD
 * Up to one click of data can be copied. No alignment restrictions
 * on "uo" apply.
 */
pxcopy(uo, v, n, space)
unsigned	uo;
char	*v;
register int n;
{
	cseg_t *base;
	register	int save, err;
	int work;

	if (n > NBPC)
		return 0;

	work = workAlloc();
	if (space & SEG_VIRT) {
		space &= ~SEG_VIRT;
		base = &sysmem.u.pbase[btocrd(uo)];
		ptable1_v[work] = *base++ | SEG_SRW;
		ptable1_v[work + 1] = *base++ | SEG_SRW;
	} else {
		ptable1_v[work] = (uo&~(NBPC-1)) + SEG_SRW;
		ptable1_v[work + 1] = (uo&~(NBPC-1)) + NBPC + SEG_SRW;
	}
	mmuupd();
	save = setspace(space);

	err = ukcopy(ctob(work) + (uo&(NBPC-1)), v, n);
	setspace(save);
	workFree(work);
	return err;
}

/*
 * xpcopy()
 * 
 * copy "n" bytes of data from kernel address "v" to address "uo" in:
 *      system global address space                      (space&SEG_VIRT)
 *      physical memory                                 !(space&SEG_VIRT)
 * Rights are determined by (space&~SEG_VIRT):
 *      "v" can be anywhere in kernel address space      SEG_386_KD
 *      "v" must be an address accessible to the user    SEG_386_UD
 * Up to one click of data can be copied. No alignment restrictions on "uo"
 * apply.
 */
xpcopy(v, uo, n, space)
char	*v;
unsigned uo;
register int n;
{
	register cseg_t *base;
	register	int save, err;
	int work;

	if (n > NBPC)
		return 0;

	work = workAlloc();
	if (space & SEG_VIRT) {
		space &= ~SEG_VIRT;
		base = &sysmem.u.pbase[btocrd(uo)];
		ptable1_v[work] = *base++ | SEG_SRW;
		ptable1_v[work + 1] = *base++ | SEG_SRW;
	} else {
		ptable1_v[work] = (uo&~(NBPC-1)) + SEG_SRW;
		ptable1_v[work + 1] = (uo&~(NBPC-1)) + NBPC + SEG_SRW;
	}
	mmuupd();
	save = setspace(space);

	err = kucopy(v, ctob(work) + (uo&(NBPC-1)), n);
	setspace(save);
	workFree(work);
	return err;
}
@


1.4
log
@kernel 73 update
@
text
@d98 1
a99 1
	int work = workAlloc();	/* Get a virtual click pair. */
d195 1
a196 1
	int work = workAlloc();	/* Get a virtual click pair. */
d253 4
d269 1
@


1.3
log
@hal: kernel 71: replace use of WORK[01] with calls to workalloc and workfree
@
text
@d93 1
a93 1
vaddr_t	vaddr;
d190 1
a190 1
vaddr_t	vaddr;
@


1.2
log
@*** empty log message ***
@
text
@d33 3
a35 2
		ptable1_v[WORK0] = *from++ | SEG_SRW;
		ptable1_v[WORK1] = *to++ | SEG_SRW;
d37 2
a38 1
		copyseg_d(NBPC, ctob(WORK0), ctob(WORK1));
d57 1
d62 1
a62 1
	ptable1_v[WORK0] = *base++ | SEG_SRW;
d65 1
a65 1
	clearseg_d(n, ctob(WORK0)+off, fill);
d69 1
a69 1
		ptable1_v[WORK0] = *base++ | SEG_SRW;
d71 1
a71 1
		clearseg_d(NBPC, ctob(WORK0), fill);
d76 1
a76 1
		ptable1_v[WORK0] = *base++ | SEG_SRW;
d78 1
a78 1
		clearseg_d(nbytes, ctob(WORK0), fill);
d81 1
d99 1
d105 1
a105 1
	ptable1_v[WORK0] = *base++ | SEG_SRW;
d119 1
a119 1
			copyseg_b(n, ctob(WORK0)+off, vaddr);
d124 1
a124 1
			copyseg_d(n, ctob(WORK0)+off, vaddr);
d137 1
a137 1
			copyseg_b(n1, ctob(WORK0)+off, vaddr);
d142 1
a142 1
			copyseg_d(n, ctob(WORK0)+off, vaddr);
d152 1
a152 1
			ptable1_v[WORK0] = *base++ | SEG_SRW;
d155 1
a155 1
			copyseg_d(NBPC, ctob(WORK0), vaddr);
d165 1
a165 1
		ptable1_v[WORK0] = *base++ | SEG_SRW;
d169 1
a169 1
			copyseg_d(n, ctob(WORK0), vaddr);
d174 1
a174 1
			copyseg_b(nbytes, ctob(WORK0)+n, vaddr);
d178 1
d196 1
d202 1
a202 1
	ptable1_v[WORK0] = *base++ | SEG_SRW;
d214 1
a214 1
			copyseg_b(n1, vaddr, ctob(WORK0)+off);
d219 1
a219 1
			copyseg_d(n, vaddr, ctob(WORK0)+off);
d232 1
a232 1
			copyseg_b(n1, vaddr, ctob(WORK0)+off);
d237 1
a237 1
			copyseg_d(n, vaddr, ctob(WORK0)+off);
d247 1
a247 1
			ptable1_v[WORK0] = *base++ | SEG_SRW;
d249 1
a249 1
			copyseg_d(NBPC, vaddr, ctob(WORK0));
d259 1
a259 1
		ptable1_v[WORK0] = *base++ | SEG_SRW;
d263 1
a263 1
			copyseg_d(n, vaddr, ctob(WORK0));
d268 1
a268 1
			copyseg_b(nbytes, vaddr, ctob(WORK0)+off);
d272 1
d289 1
d295 1
a295 1
	ptable1_v[WORK0] = *base++ | SEG_SRW;
d298 1
a298 1
	io2seg(n, ctob(WORK0)+off, port);
d302 1
a302 1
		ptable1_v[WORK0] = *base++ | SEG_SRW;
d304 1
a304 1
		io2seg(NBPC, ctob(WORK0), port);
d309 1
a309 1
		ptable1_v[WORK0] = *base++ | SEG_SRW;
d311 1
a311 1
		io2seg(nbytes, ctob(WORK0), port);
d314 1
d331 1
d337 1
a337 1
	ptable1_v[WORK0] = *base++ | SEG_SRW;
d340 1
a340 1
	seg2io(n, ctob(WORK0)+off, port);
d344 1
a344 1
		ptable1_v[WORK0] = *base++ | SEG_SRW;
d346 1
a346 1
		seg2io(NBPC, ctob(WORK0), port);
d351 1
a351 1
		ptable1_v[WORK0] = *base++ | SEG_SRW;
d353 1
a353 1
		seg2io(nbytes, ctob(WORK0), port);
d356 1
d378 1
d383 1
d387 2
a388 2
		ptable1_v[WORK0] = *base++ | SEG_SRW;
		ptable1_v[WORK1] = *base++ | SEG_SRW;
d390 2
a391 2
		ptable1_v[WORK0] = (uo&~(NBPC-1)) + SEG_SRW;
		ptable1_v[WORK1] = (uo&~(NBPC-1)) + NBPC + SEG_SRW;
d396 1
a396 1
	err = ukcopy(ctob(WORK0) + (uo&(NBPC-1)), v, n);
d398 1
d421 1
d426 1
d430 2
a431 2
		ptable1_v[WORK0] = *base++ | SEG_SRW;
		ptable1_v[WORK1] = *base++ | SEG_SRW;
d433 2
a434 2
		ptable1_v[WORK0] = (uo&~(NBPC-1)) + SEG_SRW;
		ptable1_v[WORK1] = (uo&~(NBPC-1)) + NBPC + SEG_SRW;
d439 1
a439 1
	err = kucopy(v, ctob(WORK0) + (uo&(NBPC-1)), n);
d441 1
@


1.1
log
@Initial revision
@
text
@d21 5
a25 1

d36 1
a36 1
		copyseg_d(ctob(1), ctob(WORK0), ctob(WORK1));
a40 1

d44 1
a44 1
 * Given a byte count, a system absolute address, and a fill value,
d65 1
a65 1
	while (nbytes >= ctob(1)) {
d68 2
a69 2
		clearseg_d(ctob(1), ctob(WORK0), fill);
		nbytes -= ctob(1);
d80 6
d146 1
a146 1
		while (nbytes >= ctob(1)) {
d150 3
a152 3
			copyseg_d(ctob(1), ctob(WORK0), vaddr);
			vaddr += ctob(1);
			nbytes -= ctob(1);
d175 6
d239 1
a239 1
		while (nbytes >= ctob(1)) {
d242 3
a244 3
			copyseg_d(ctob(1), vaddr, ctob(WORK0));
			vaddr += ctob(1);
			nbytes -= ctob(1);
d267 6
d292 1
a292 1
	while (nbytes >= ctob(1)) {
d295 2
a296 2
		io2seg(ctob(1), ctob(WORK0), port);
		nbytes -= ctob(1);
d307 6
d332 1
a332 1
	while (nbytes >= ctob(1)) {
d335 2
a336 2
		seg2io(ctob(1), ctob(WORK0), port);
		nbytes -= ctob(1);
d347 12
d387 12
@
