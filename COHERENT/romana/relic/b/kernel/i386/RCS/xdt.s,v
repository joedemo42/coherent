head     1.8;
branch   ;
access   ;
symbols  ;
locks    bin:1.8; strict;
comment  @/@;


1.8
date     93.06.14.13.43.24;  author bin;  state Exp;
branches ;
next     1.7;

1.7
date     93.03.02.08.29.58;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     92.11.13.11.10.16;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     92.10.22.14.18.51;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.10.12.10.02.22;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.09.29.09.51.21;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.08.20.12.51.39;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.17.15.22.53;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.8
log
@Hal: kernel 78 update
@
text
@	.unixorder
	.llen	132
	.include	as.inc
	.text
	.alignoff
	.align	4

/	the init gdt is in the text segment since the data segment
/	is relocated after we switch into 386 mode (when a
/	valid gdt is required)

gdtinit:				/ used before turning on paging
	.value	gdtend-gdt-1		/ limit of gdt
					/ gdt physical addr is 0x0040_2000+gdt
	.long	[[[-SBASE]+PBASE]<<BPCSHIFT]+gdt
	.value	0
gdtmap:					/ used after paging is enabled
	.value	gdtend-gdt-1		/ limit of gdt
	.long	gdt
	.value	0

idtmap:					/ used after paging is enabled
	.value	2047
	.long	idt
	.value	0

////
/
/ Macro MEM_SEG specifies a memory segment descriptor.
/ base is 32 bits
/ limit is 20 bits
/ type is 4 bits
/ dpl is 2 bits
/ flags is the 4 high bits of byte at descriptor + 6
/   8's bit of flags is limit granularity (0:byte 1:click)
/   4's bit of flags is default op size (0:16 bit 1:32 bit)
/
////

MEM_SEG	.macro	base,limit,type,dpl,flags
	.value	limit
	.value	base
	.byte	[base] >> 16
	.byte	0x90 | [[[dpl] & 3] << 5] | [[type] & 0xF]
	.byte	[[[flags] << 4] & 0xF0] | [[[limit] >> 16] & 0xF]
	.byte	[base] >> 24
	.endm

////
/
/ Macro TSS_SEG specifies a tss segment descriptor.
/ base is 32 bits
/ limit is 20 bits
/ [type is 0x9]
/ [dpl is 0]
/ gran is limit granularity (0:byte 1:click)
/
////

TSS_SEG	.macro	base,limit,gran
	.value	limit
	.value	base
	.byte	[base] >> 16
	.byte	0x89
	.byte	[[[gran] << 7] & 0x80] | [[[limit] >> 16] & 0xF]
	.byte	[base] >> 24
	.endm

////
/
/ Macro LDT_SEG specifies a tss segment descriptor.
/ base is 32 bits
/ limit is 20 bits
/ [type is 0x2]
/ [dpl is 0]
/ gran is limit granularity (0:byte 1:click)
/
////

LDT_SEG	.macro	base,limit,gran
	.value	limit
	.value	base
	.byte	[base] >> 16
	.byte	0x82
	.byte	[[[gran] << 7] & 0x80] | [[[limit] >> 16] & 0xF]
	.byte	[base] >> 24
	.endm

////
/
/ Macro CALL_GATE specifies a call gate descriptor.
/ selector is 16 bits
/ offset is 32 bits
/ dwdcount is 5 bits
/ dpl is 2 bits
/
/ Would like the following, but can't shift offset since it's a symbol.
/	.value	offset
/	.value	selector
/	.value	0x8C00 | [[dwdcount] & 0x1F] | [[[dpl] & 3] << 13]
/	.value	[offset] >> 16
/
/ IMPORTANT!!!
/ This macro does not create a proper call gate.  
/ Count on idtinit() to swap 16-bit words at macro+2, macro+6.
/
////

CALL_GATE	.macro	selector,offset,dwdcount,dpl

	.long	offset
	.value	0x8C00 | [[dwdcount] & 0x1F] | [[[dpl] & 3] << 13]
	.value	selector
	.endm

////
/
/ "segment xxxx" below gives the value in a segment register corresponding
/ to the given descriptor.  The low 3 bits in a segment register are not
/ used in indexing into the descriptor table.
/
////

	.set	DPL_0,0
	.set	DPL_1,1
	.set	DPL_2,2
	.set	DPL_3,3

gdt:
	/ segment 0000
	.long	0,0			/ null entry

	/ segment 0008 - SEG_386_UI
	MEM_SEG	0,0xFFFFF,0xB,DPL_3,0xC

	/ segment 0010 - SEG_386_UD
	MEM_SEG	0,0xFFFFF,0x3,DPL_3,0xC

	/ segment 0018 - SEG_RNG0_TXT/SEG_386_KI
	MEM_SEG	0,0xFFFFF,0xB,DPL_0,0xC

	/ segment 0020 - SEG_386_KD
	MEM_SEG	0,0xFFFFF,0x3,DPL_1,0xC

	/ segment 0028 - SEG_286_UI
	MEM_SEG	0,0xF,0xB,DPL_3,0x8

	/ segment 0030 - SEG_286_UD
	MEM_SEG	0,0xF,0x3,DPL_3,0x8

	/ segment 0038 - SEG_TSS
	/ limit is 0x68 + (number of bytes in iomap)
	/ This allows the required filler byte beyond desired addressing.
	TSS_SEG	0xFFC00000,TSS_IOMAP_OFF+[TSS_IOMAP_LEN .div 8]+3,0

	/ segment 0040 - SEG_ROM
	MEM_SEG	0xFFFC0000,0xF,0x3,DPL_0,0x8

	/ segment 0048 - SEG_VIDEOa
	MEM_SEG	0xFFFB0000,0xF,0x3,DPL_1,0x8

	/ segment 0050 - SEG_VIDEOb
	MEM_SEG	0xFFFA0000,0xF,0x3,DPL_1,0x8

	/ segment 0058 - SEG_386_II	/ init code (text)
	MEM_SEG	0x400000+[PBASE<<BPCSHIFT],0xFFFFF,0xB,DPL_0,0xC

	/ segment 0060 - SEG_386_ID	/ init code (data)
	MEM_SEG	0x400000+[PBASE<<BPCSHIFT],0xFFFFF,0x3,DPL_0,0xC

	/ segment 0068 - SEG_286_UII
	MEM_SEG	0x400000,0xF,0xB,DPL_3,0x8

	/ segment 0070 - SEG_LDT
	LDT_SEG	0xFFC00000,0xF,0

	/ segment 0078 - SEG_RNG0_STK
	MEM_SEG	0,0xFFBFF,0x7,DPL_0,0xC

	/ segment 0080 - SEG_RNG1_TXT
	MEM_SEG	0,0xFFFFF,0xB,DPL_1,0xC

	/ segment 0088 - SEG_RNG1_STK
	MEM_SEG	0,0xFFFFE,0x7,DPL_1,0xC

	/ Call gates need idtinit() to fix them before they can be used.
	.globl	gdtFixBegin
	.globl	gdtFixEnd
gdtFixBegin:
	/ segment 0090 - SEG_MMUUPD - Call gate for mmu update
	CALL_GATE	SEG_RNG0_TXT,mmuupdfR0,0,DPL_1

	/ segment 0098 - SEG_SET_EM - Call gate for writing CR0 EM bit
	CALL_GATE	SEG_RNG0_TXT,setEmfR0,1,DPL_1
gdtFixEnd:
gdtend:

/	The two entries in the ldt are call gates whose format is somewhat
/	different from the other segment descriptors
/
/	BCS compatibility requires an LDT

ldt:
	/ ldt + 0000
	CALL_GATE	SEG_RNG1_TXT,syc32,1,DPL_3
/	.long	syc32				/ call gate for system call
/	.long	0xFFC0EC01

	/ ldt + 0008
/	.long	sig32				/ call gate for signal return
/	.long	0xFFC0EC01
	CALL_GATE	SEG_RNG1_TXT,sig32,1,DPL_3
ldtend:

////
/
/ Macro IRPT_GATE specifies a call gate descriptor.
/ selector is 16 bits
/ offset is 32 bits
/ dwdcount is 5 bits
/ dpl is 2 bits
/
/ Would like the following, but can't shift offset since it's a symbol.
/	.value	offset
/	.value	selector
/	.value	0x8E00 | [[dwdcount] & 0x1F] | [[[dpl] & 3] << 13]
/	.value	[offset] >> 16
/
/ IMPORTANT!!!
/ This macro does not create a proper interrupt gate.  
/ Count on idtinit() to swap 16-bit words at macro+2, macro+6.
/
////

IRPT_GATE	.macro	selector,offset,dwdcount,dpl

	.long	offset
	.value	0x8E00 | [[dwdcount] & 0x1F] | [[[dpl] & 3] << 13]
	.value	selector
	.endm

idt:
	IRPT_GATE	SEG_RNG1_TXT,trap0,0,DPL_3
/	IRPT_GATE	SEG_RNG0_TXT,trap1_ker,0,DPL_3	/ Ring 0
	IRPT_GATE	SEG_RNG1_TXT,trap1_usr,0,DPL_3	/ Ring 1
	IRPT_GATE	SEG_RNG1_TXT,trap2,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap3,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap4,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap5,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap6,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap7,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap8,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap9,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap10,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap11,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,trap12,0,DPL_3
	IRPT_GATE	SEG_RNG0_TXT,trap13,0,DPL_3	/ Ring 0!
	IRPT_GATE	SEG_RNG1_TXT,trap14,0,DPL_3
	.long	0,0
	IRPT_GATE	SEG_RNG1_TXT,trap16,0,DPL_3
	.org	.+0x78
	IRPT_GATE	SEG_RNG1_TXT,clk,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev1,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev9,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev3,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev4,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev5,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev6,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev7,0,DPL_3
	.org	.+0x240
	IRPT_GATE	SEG_RNG1_TXT,dev8,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev9,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev10,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev11,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev12,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev13,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev14,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,dev15,0,DPL_3
	.org	.+0x40
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	IRPT_GATE	SEG_RNG1_TXT,syc,0,DPL_3
	.long	0
idtend:
	.align	4
	.long	0,0,0,0
@


1.7
log
@kernel 73 update
@
text
@d152 3
a154 2
	/ limit is 0x68 + (number of bytes in iomap) -1
	TSS_SEG	0xFFC00000,0x16B,0
@


1.6
log
@hal: kernel 68: added window support, untested 287 support
@
text
@d1 1
@


1.5
log
@kernel 66: floating point context switching, exceptions and signal handlers.
@
text
@d28 8
a35 2
/ Macro SEGMENT specifies a segment descriptor.
/ base is 32 bits;  limit and attr are 16 bits.
d39 8
a46 1
// Fix this!  High bits of limit are in attr!
d48 12
a59 1
SEGMENT	.macro	base,limit,attr
d63 2
a64 1
	.value	attr
d70 1
a70 1
/ Macro MEM_SEG specifies a memory segment descriptor.
d73 3
a75 3
/ type is 4 bits
/ dpl is 2 bits
/ flags is the 4 high bits of byte at descriptor + 6
d79 1
a79 1
MEM_SEG	.macro	base,limit,type,dpl,flags
d83 2
a84 2
	.byte	0x90 | [[[dpl] & 3] << 5] | [[type] & 0xF]
	.byte	[[[flags] << 4] & 0xF0] | [[[limit] >> 16] & 0xF]
d151 2
a152 1
	SEGMENT	0xFFC00000,0xEB,0x0089
d173 1
a173 1
	SEGMENT	0xFFC00000,0xF,0x0082	/ ldt segment (2 descriptors)
a175 1
	/ sloppy limit check on ring 0 stack
d408 2
@


1.4
log
@hal: kernel 64: mmu update call to speed interrupt response
@
text
@d165 3
@


1.3
log
@fixes for db support
@
text
@d65 27
d158 8
a167 27
////
/
/ Macro CALL_GATE specifies a call gate descriptor.
/ selector is 16 bits
/ offset is 32 bits
/ dwdcount is 5 bits
/ dpl is 2 bits
/
/ Would like the following, but can't shift offset since it's a symbol.
/	.value	offset
/	.value	selector
/	.value	0x8C00 | [[dwdcount] & 0x1F] | [[[dpl] & 3] << 13]
/	.value	[offset] >> 16
/
/ IMPORTANT!!!
/ This macro does not create a proper call gate.  
/ Count on idtinit() to swap 16-bit words at macro+2, macro+6.
/
////

CALL_GATE	.macro	selector,offset,dwdcount,dpl

	.long	offset
	.value	0x8C00 | [[dwdcount] & 0x1F] | [[[dpl] & 3] << 13]
	.value	selector
	.endm

@


1.2
log
@hal: source cleanup
@
text
@d206 2
a207 1
	IRPT_GATE	SEG_RNG0_TXT,trap1,0,DPL_3	/ Ring 0!
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
	.value	119			/ 120 bytes => 15 entries in gdt
d17 1
a17 1
	.value	119
a24 4
bdtmap:					/ used after paging is enabled
	.value	2047				/ 1023
	.long	bdt
	.value	0
d32 3
d45 20
d71 5
d78 1
a78 1
	SEGMENT	0,0,0			/ null entry
d81 1
a81 1
	SEGMENT	0,0xFFFF,0xCFFB		/ user code (386 mode)
d84 1
a84 1
	SEGMENT	0,0xFFFF,0xCFF3		/ user data (386 mode)
d86 2
a87 2
	/ segment 0018 - SEG_386_KI
	SEGMENT	0,0xFFFF,0xCF9B		/ kernel code
d90 1
a90 1
	SEGMENT	0,0xFFFF,0xCF93		/ kernel data
d93 1
a93 1
	SEGMENT	0,0xF,0x80FB		/ user code (286 common I/D spaces)
d96 1
a96 1
	SEGMENT	0,0xF,0x80F3		/ user data (286 mode) 
d102 1
a102 1
	SEGMENT	0xFFFC0000,0xF,0x8093
d105 1
a105 1
	SEGMENT	0xFFFB0000,0xF,0x8093	/ 000B0000 -> FFFB0000 (video A)
d108 1
a108 1
	SEGMENT	0xFFFA0000,0xF,0x8093	/ 000B8000 -> FFFA0000 (video B)
d111 1
a111 1
	SEGMENT	0x400000+[PBASE<<BPCSHIFT],0xFFFF,0xCF9B
d114 1
a114 1
	SEGMENT	0x400000+[PBASE<<BPCSHIFT],0xFFFF,0xCF93
d117 1
a117 1
	SEGMENT	0x400000,0xF,0x80FB	/ user code (286 separate I/D spaces)
d122 38
d166 4
a169 3
	/ segment 0000
	.long	syc32				/ call gate for system call
	.long	0xFFC0EC01
d171 5
a175 3
	/ segment 0008
	.long	sig32				/ call gate for signal return
	.long	0xFFC0EC01
d177 27
a203 2
ldtend:

d205 15
a219 30
	.long	trap0
	.value	0xEE00,0xFFC0
	.long	trap1
	.value	0xEE00,0xFFC0
	.long	trap2
	.value	0xEE00,0xFFC0
	.long	trap3
	.value	0xEE00,0xFFC0
	.long	trap4
	.value	0xEE00,0xFFC0
	.long	trap5
	.value	0xEE00,0xFFC0
	.long	trap6
	.value	0xEE00,0xFFC0
	.long	trap7
	.value	0xEE00,0xFFC0
	.long	trap8
	.value	0xEE00,0xFFC0
	.long	trap9
	.value	0xEE00,0xFFC0
	.long	trap10
	.value	0xEE00,0xFFC0
	.long	trap11
	.value	0xEE00,0xFFC0
	.long	trap12
	.value	0xEE00,0xFFC0
	.long	trap13				/trap13
	.value	0xEE00,0xFFC0
	.long	trap14				/trap14
	.value	0xEE00,0xFFC0
d221 1
a221 2
	.long	trap16
	.value	0xEE00,0xFFC0
d223 8
a230 16
	.long	clk
	.value	0xEE00,0xFFC0
	.long	dev1
	.value	0xEE00,0xFFC0
	.long	dev9
	.value	0xEE00,0xFFC0
	.long	dev3
	.value	0xEE00,0xFFC0
	.long	dev4
	.value	0xEE00,0xFFC0
	.long	dev5
	.value	0xEE00,0xFFC0
	.long	dev6
	.value	0xEE00,0xFFC0
	.long	dev7
	.value	0xEE00,0xFFC0
d232 8
a239 16
	.long	dev8
	.value	0xEE00,0xFFC0
	.long	dev9
	.value	0xEE00,0xFFC0
	.long	dev10
	.value	0xEE00,0xFFC0
	.long	dev11
	.value	0xEE00,0xFFC0
	.long	dev12
	.value	0xEE00,0xFFC0
	.long	dev13
	.value	0xEE00,0xFFC0
	.long	dev14
	.value	0xEE00,0xFFC0
	.long	dev15
	.value	0xEE00,0xFFC0
d241 128
a368 256
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
	.long	syc
	.value	0xEE00,0xFFC0
a370 71

bdt:
	.long	trap0
	.value	0xEE00,0xFFC0
	.long	trap1
	.value	0xEE00,0xFFC0
	.long	trap2
	.value	0xEE00,0xFFC0
	.long	trap3
	.value	0xEE00,0xFFC0
	.long	trap4
	.value	0xEE00,0xFFC0
	.long	trap5
	.value	0xEE00,0xFFC0
	.long	trap6
	.value	0xEE00,0xFFC0
	.long	trap7
	.value	0xEE00,0xFFC0
	.long	trap8
	.value	0xEE00,0xFFC0
	.long	trap9
	.value	0xEE00,0xFFC0
	.long	trap10
	.value	0xEE00,0xFFC0
	.long	trap11
	.value	0xEE00,0xFFC0
	.long	trap12
	.value	0xEE00,0xFFC0
	.long	loc10
	.value	0xEE00,0xFFC0
	.long	loc10
	.value	0xEE00,0xFFC0
	.long	0,0
	.long	trap16
	.value	0xEE00,0xFFC0
	.org	.+0x78 
	.long	clk
	.value	0xEE00,0xFFC0
	.long	dev1
	.value	0xEE00,0xFFC0
	.long	dev9
	.value	0xEE00,0xFFC0
	.long	dev3
	.value	0xEE00,0xFFC0
	.long	dev4
	.value	0xEE00,0xFFC0
	.long	dev5
	.value	0xEE00,0xFFC0
	.long	dev6
	.value	0xEE00,0xFFC0
	.long	dev7
	.value	0xEE00,0xFFC0
	.org	.+0x240
	.long	dev8
	.value	0xEE00,0xFFC0
	.long	dev9
	.value	0xEE00,0xFFC0
	.long	dev10
	.value	0xEE00,0xFFC0
	.long	dev11
	.value	0xEE00,0xFFC0
	.long	dev12
	.value	0xEE00,0xFFC0
	.long	dev13
	.value	0xEE00,0xFFC0
	.long	dev14
	.value	0xEE00,0xFFC0
	.long	dev15
	.value	0xEE00,0xFFC0
	.org	.+0x40
bdtend:
@
