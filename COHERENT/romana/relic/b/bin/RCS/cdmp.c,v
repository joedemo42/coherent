head     1.8;
branch   ;
access   ;
symbols  ;
locks    bin:1.8;
comment  @ * @;


1.8
date     93.03.25.12.23.14;  author bin;  state Exp;
branches ;
next     1.7;

1.7
date     93.03.22.10.10.11;  author bin;  state Exp;
branches ;
next     1.6;

1.6
date     93.03.19.08.20.48;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     93.03.17.07.52.30;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.08.14.12.05.45;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.08.11.12.43.19;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.06.15.11.43.33;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.21.09.33.58;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.8
log
@steve: changes for new coff.h and optional headers with extra tail bytes.
@
text
@/*
 * cdmp.c
 * 3/24/93
 * Requires libmisc functions: cc cdmp.c -lmisc
 * Read and print COFF files.
 * Usage: cdmp [ -adlrsx ] filename ...
 * Options:
 * 	-a	supress symbol aux entries
 * 	-d	supress data dumps
 * 	-l	supress line numbers
 * 	-r	supress relocation entries
 * 	-s	supress symbol entries
 *	-V	print version number
 *	-x	dump aux entries in hex
 *	-?	print usage info and exit
 * Does not know all there is to know about aux entry structure yet.
 */

#include <misc.h>		/* misc useful stuff */
#include <coff.h>
#include <errno.h>

#define	VERSION	"V2.2"
#define VHSZ	48		/* line size in vertical hex dump */
typedef	char	SECNAME[9];	/* NUL-terminated 8 character section name */

/* Some shortcut display stuff. */
#define showFlag(flag, msg) if (fh.f_flags & flag) printf("\t" msg "\n");
#define showCase(x)	showDesc(x, #x)
#define	showDesc(x, d)	case x: printf(d); break;
#define showVal(x)	case x: printf(#x "\tvalue=%ld ", se->n_value); break;
#define showHexVal(x)	case x: printf(#x "\tvalue=0x%lX ", se->n_value); break;

/* Externals. */
extern	long	ftell();
extern	char	*optarg;

/* Forward. */
void	fatal();
char	*checkStr();
void	optHeader();
void	readHeaders();
void	shrLib();
void	readSection();
void	readStrings();
void	readSymbols();
void	print_aux();
void	print_sym();
void	dump();
int	clean();
void	outc();
int	hex();

/* Globals. */
char	aswitch;		/* Suppress aux entry dumps		*/
char	buf[VHSZ];		/* Buffer for hex dump			*/
char	dswitch;		/* Suppress data dumps			*/
FILE	*fp;			/* COFF file pointer			*/
char	lswitch;		/* Suppress line number dumps		*/
long	num_sections;		/* Number of sections			*/
long	num_symbols;		/* Number of symbols			*/
char	rswitch;		/* Suppress reloc dumps			*/
SECNAME	*sec_name;		/* Section names			*/
long	section_seek;		/* Seek to seek start of section	*/
char	sswitch;		/* Suppress symbol dumps		*/
char	*str_tab;		/* String char array			*/
long	symptr;			/* File pointer to symbol table entries	*/
char	xswitch;		/* Dump aux entries in hex		*/

/*
 * Print fatal error message and die.
 */
/* VARARGS */
void
fatal(s) char *s;
{
	register int save;

	save = errno;
	fprintf(stderr, "cdmp: %r\n", &s);
	if (0 != (errno = save))
		perror("errno reports");
	exit(1);
}

/*
 * Return a printable version of string s,
 * massaging nonprintable characters if necessary.
 */
char *
checkStr(s) unsigned char *s;
{
	register unsigned char *p, c;
	register int ct, badct;
	static char *work = NULL;

	for (badct = 0, ct = 1, p = s; c = *p++; ct++)
		if ((c <= ' ') || (c > '~'))
			badct += 2;	/* not printable as is */

	if (!badct)
		return s;		/* ok as is */

	if (NULL != work)
		free(work);		/* free previous */

	work = alloc(badct + ct);
	for (p = work; c = *s++;) {
		if (c > '~') {
			*p++ = '~';
			c &= 0x7f;
		}
		if (c <= ' ') {
			*p++ = '^';
			c |= '@@';
		}
		*p++ = c;
	}
	return work;
}

/*
 * Process optional file header.
 */
void
optHeader(size) unsigned int size;
{
	register AOUTHDR *ohp;
	register unsigned int tail;

	if ((tail = size - sizeof(*ohp)) < 0)
		fatal("optional header too small -- %d bytes", size);
	ohp = alloc(size);

	if (1 != fread(ohp, size, 1, fp))
		fatal("error reading optional header");

	printf("\nOPTIONAL HEADER VALUES\n");
	printf("magic            = 0x%X\n",	ohp->magic);
	printf("version stamp    = %d\n",	ohp->vstamp);
	printf("text size        = 0x%lX\n",	ohp->tsize);
	printf("init data size   = 0x%lX\n",	ohp->dsize);
	printf("uninit data size = 0x%lX\n",	ohp->bsize);
	printf("entry point      = 0x%lX\n",	ohp->entry);
	printf("text start       = 0x%lX\n",	ohp->text_start);
	printf("data start       = 0x%lX\n",	ohp->data_start);

	/* Print extra info, if any. */
	if (tail) {
		printf("\n EXTRA OPTIONAL HEADER INFO\n");
		dump(ohp + 1, tail);
	}
	free(ohp);
}

/*
 * Process file header.
 */
void
readHeaders(fn) char *fn;
{
	FILEHDR	fh;

	fp = xopen(fn, "rb");

	if (1 != fread(&fh, sizeof(fh), 1, fp))
		fatal("error reading COFF header");

	printf("FILE %s HEADER VALUES\n",	fn);
	printf("magic number   = 0x%X\n",	fh.f_magic);
	printf("sections       = %ld\n",	num_sections = fh.f_nscns);
	printf("file date      = %s",		ctime(&fh.f_timdat));
	printf("symbol ptr     = 0x%lX\n",	symptr = fh.f_symptr);
	printf("symbols        = %ld\n",	num_symbols = fh.f_nsyms);
	printf("sizeof(opthdr) = %d\n",		fh.f_opthdr);
	printf("flags          = 0x%X\n",	fh.f_flags);

	showFlag(F_RELFLG,	"Relocation info stripped from file");
	showFlag(F_EXEC,	"File is executable");
	showFlag(F_LNNO,	"Line numbers stripped from file");
	showFlag(F_LSYMS,	"Local symbols stripped from file");
	showFlag(F_MINMAL,	"Minimal object file");

	/*
	 * Allocate section name array.
	 */
	if (num_sections != 0)
		sec_name = (SECNAME *)alloc(((int)num_sections) * (sizeof(SECNAME)));

	if (fh.f_opthdr)
		optHeader(fh.f_opthdr);		/* optional header */
	section_seek = sizeof(FILEHDR) + fh.f_opthdr;
}

/*
 * Process shared library.
 */
void
shrLib()
{
	SHRLIB shr;
	register long i;
	register char *pathn;

	if (1 != fread(&shr, sizeof(shr), 1, fp))
		fatal("error reading library section");

	if (shr.pathndx -= 2) {
		long j;
		printf("\nExtra Library info:\n");

		for (j = shr.pathndx * 4;
		     j && (i = fread(buf, 1, ((j > VHSZ) ? VHSZ : (int)j), fp));
		     j -= i) {
			if (!i)
				fatal("unexpected EOF in .lib data");
			dump(buf, (int)i);
		}
	}

	pathn = alloc(i = (shr.entsz - 2) * 4);
	if (1 != fread(pathn, i, 1, fp))
		fatal("error reading library name");
	printf("\nReferences %s\n", pathn);
	free(pathn);
}

/*
 * Process sections.
 */
void
readSection(n) register int n;
{
	SCNHDR	sh;
	register long i;

	fseek(fp, section_seek, 0);
	if (1 != fread(&sh, sizeof(SCNHDR), 1, fp))
		fatal("error reading section header");

	section_seek += sizeof(SCNHDR);
	fseek(fp, sh.s_scnptr, 0);

	strncpy(sec_name[n], checkStr(sh.s_name), sizeof(SECNAME) - 1);
	printf("\n%s - SECTION HEADER -\n",	sec_name[n]);
	printf("physical address    = 0x%lX\n", sh.s_paddr);
	printf("virtual address     = 0x%lX\n", sh.s_vaddr);
	printf("section size        = 0x%lX\n", sh.s_size);
	printf("file ptr to data    = 0x%lX\n", sh.s_scnptr);
	printf("file ptr to relocs  = 0x%lX\n", sh.s_relptr);
	printf("file ptr to lines   = 0x%lX\n", sh.s_lnnoptr);
	printf("relocation entries  = %u\n",	sh.s_nreloc);
	printf("line number entries = %u\n",	sh.s_nlnno);
	printf("flags               = 0x%lX\t", sh.s_flags);
	switch((int)sh.s_flags) {

	showDesc(STYP_GROUP,	"grouped section")
	showDesc(STYP_PAD,	"padding section")
	showDesc(STYP_COPY,	"copy section")
	showDesc(STYP_INFO,	"comment section")
	showDesc(STYP_OVER,	"overlay section")
	showDesc(STYP_TEXT,	"text only")
	showDesc(STYP_DATA,	"data only")
	showDesc(STYP_BSS,	"bss only")

	case STYP_LIB:
		printf(".lib section\n");
		shrLib();
		return;

	default:
		printf("unrecognized section");
		break;
	}
	putchar('\n');

	/* Print raw data. */
	if (!dswitch && strcmp(sh.s_name, ".bss")) { /* don't output bss */
		register long j;

		fseek(fp, sh.s_scnptr, 0);
		printf("\nRAW DATA\n");

		for (j = sh.s_size;
		     j && (i = fread(buf, 1, ((j > VHSZ) ? VHSZ : (int)j), fp));
		     j -= i) {
			if (!i)
				fatal("unexpected EOF in %.8s data",
				      checkStr(sh.s_name));
			dump(buf, (int)i);
		}
	}

	/* Print relocs. */
	if (!rswitch && sh.s_nreloc) {
		fseek(fp, sh.s_relptr, 0);
		printf("\nRELOCATION ENTRIES\n");
		for (i = 0; i < sh.s_nreloc; i++) {
			RELOC	re;	/* Relocation entry structure */

			if (1 != fread(&re, RELSZ, 1, fp))
				fatal("error reading relocation entry");

			printf("address=0x%lX\tindex=%ld \ttype=",
				re.r_vaddr, re.r_symndx);
			switch(re.r_type) {
			showCase(R_DIR8)
			showCase(R_DIR16)
			showCase(R_DIR32)
			showCase(R_RELBYTE)
			showCase(R_RELWORD)
			showCase(R_RELLONG)
			showCase(R_PCRBYTE)
			showCase(R_PCRWORD)
			showCase(R_PCRLONG)
			showCase(R_NONREL)
			default:
				fatal("unexpected relocation type 0x%X",
					re.r_type);
				break;
			}
			putchar('\n');
		}
	}

	/* Print line numbers. */
	if (!lswitch && sh.s_nlnno) {
		fseek(fp, sh.s_lnnoptr, 0);
		printf("\nLINE NUMBER ENTRIES\n");

		for (i = 0; i < sh.s_nlnno; i++) {
			LINENO	le;	/* Line number entry structure */

			if (1 != fread(&le, LINESZ, 1, fp))
				fatal("error reading line number entry");

			if (le.l_lnno)
				printf("address=0x%lX\tline=%d\n",
					le.l_addr.l_paddr, le.l_lnno);
			else
				printf("function=%d\n", le.l_addr.l_symndx);
		}
	}
}

/*
 * Read the string table into memory.
 * This allows readSymbols() to work.
 */
void
readStrings()
{
	register unsigned char *str_ptr, c;
	long str_seek;
	unsigned long str_length;
	unsigned len;

	str_seek = symptr + (SYMESZ * num_symbols);
	fseek(fp, str_seek, 0);

	if (1 != fread(&str_length, sizeof(str_length), 1, fp))
		str_length = 0;

	if (str_length == 0) {
		printf("\nNO STRING TABLE\n");
		return;
	}
	printf("\nSTRING TABLE DUMP\n");
	len = str_length -= 4;
	if (len != str_length)
		fatal("bad string table length %ld", str_length);
	str_tab = alloc(len);
	if (1 != fread(str_tab, len, 1, fp))
		fatal("error reading string table %lX %d", ftell(fp), len);

	for (str_ptr = str_tab; str_ptr < str_tab + str_length; ) {
		putchar('\t');
		while (c = *str_ptr++) {
			if (c > '~') {
				c &= 0x7f;
				putchar('~');
			}
			if (c < ' ') {
				c |= '@@';
				putchar('^');
			}
			putchar(c);
		}
		putchar('\n');
	}
}

/*
 * Process symbol table.
 */
void
readSymbols()
{
	SYMENT se;
	register long i, j, naux;

	if (sswitch)
		return;
	fseek(fp, symptr, 0);
	printf("\nSYMBOL TABLE ENTRIES\n");
	for (i = 0; i < num_symbols; i++) {
		if (1 != fread(&se, SYMESZ, 1, fp))
			fatal("error reading symbol entry");
		print_sym(&se, i);
		naux = se.n_numaux;
		for (j = 0; j < naux; j++)
			print_aux(i+j+1, &se);
		i += naux;
		if (i >= num_symbols)
			fatal("inconsistant sym table");
	}
}

#define showNe(x, d) if(l = ae.x) printf("\t" d "=%ld", l)
/*
 * Process a symbol aux entry.
 * This is still pretty ad hoc, it may not do all entries correctly yet.
 * Does not print 0-valued fields.
 */
void
print_aux(n, sep) int n; register SYMENT *sep;
{
	AUXENT ae;
	register int type, class;
	register long l;
	int has_fsize, has_fcn;
	unsigned short *sp;
	char fname[FILNMLEN + 1];

	if (1 != fread(&ae, AUXESZ, 1, fp))
		fatal("error reading symbol aux entry");
	if (aswitch)
		return;					/* suppressed */
	printf("%4ld\t", n);				/* symbol number */
	if (xswitch) {					/* dump in hex */
		printf("\tAUX ENTRY DUMP\n");
		dump(&ae, sizeof(ae));
		return;
	}

	class = sep->n_sclass;
	type = sep->n_type;

	if (class == C_FILE) {				/* .file */
		strncpy(fname, ae.ae_fname, FILNMLEN);
		fname[FILNMLEN] = '\0';
		printf("\tfilename=%s\n", checkStr(fname));
		return;
	} else if (class == C_STAT && type == T_NULL) {	/* section name */
		printf("\tlength=%lX\trelocs=%d\tlinenos=%d\n",
			ae.ae_scnlen,
			ae.ae_nreloc,
			ae.ae_nlinno);
		return;
	}

	/*
	 * In cases not handled above,
	 * the AUXENT is an x_sym which must be decyphered.
	 * Flags tell which members of unions to dump.
	 * The flag setting might not be quite right yet.
	 */
	has_fsize = has_fcn = 0;
	if (class == C_STRTAG || class == C_UNTAG || class == C_ENTAG
	 || class == C_BLOCK)		/* tag definitions or .bb or .eb */
		++has_fcn;
	if (ISFCN(type)) {
		++has_fsize;
		++has_fcn;
	}

	/* Print tag index. */
	showNe(ae_tagndx, "tag");

	/* Print fsize or lnsz info. */
	if (has_fsize) {
		showNe(ae_fsize, "fsize");
	} else {
		showNe(ae_lnno, "lnno");
		showNe(ae_size, "size");
	}

	/* Print fcn or ary info. */
	if (has_fcn) {
		if (l = ae.ae_lnnoptr)
			printf("\tlnnoptr=0x%lX", l);
		showNe(ae_endndx, "end");
	} else {
		sp = ae.ae_dimen;
		if (*sp != 0) {
			printf("\tdims=< ");
			while (sp < &ae.ae_dimen[DIMNUM] && *sp)
				printf("%d ", *sp++);
			putchar('>');
		}
	}

	/* Print tv index. */
	showNe(ae_tvndx, "tv");
	putchar('\n');
}
#undef showNe

/*
 * Process symbol table entry.
 */
void
print_sym(se, n) register SYMENT *se; register long n;
{
	register int i, c, flag, derived;
	
	if (se->n_sclass == C_FILE && n > 0)
		putchar('\n');			/* for readability */
	printf("%4ld\t", n);			/* index number */
	if (se->n_zeroes != 0) {		/* name in place */
		for (flag = i = 0; i < SYMNMLEN; i++) {
			if (flag)
				;
			else if ((' ' < (c = se->n_name[i])) && ('~' >= c))
				putchar(c);
			else
				flag = c ? 1 : -1;
		}
		putchar('\t');
	} else					/* name in string table */
		printf("%s ", checkStr(str_tab + se->n_offset - 4));

	/* Print section. */
	i = se->n_scnum;
	printf("section=");
	if (i >= 1 && i <= num_sections)
		printf("%s", sec_name[i-1]);
	else
		switch(i) {
		showCase(N_UNDEF)
		showCase(N_ABS)
		showCase(N_DEBUG)
		default:
			printf("%d?", i);
			break;
		}

	/* Print the type. */
	printf("\ttype=");

	/* Print derived types. */
	derived = 0;
	for (i = se->n_type; i & N_TMASK; i >>= N_TSHIFT) {
		if (derived++ == 0)
			putchar('<');
		switch((i & N_TMASK) >> N_BTSHFT) {
		showCase(DT_PTR)
		showCase(DT_FCN)
		showCase(DT_ARY)
		case DT_NON:
		default:
			fatal("unexpected derived type 0x%X", i & N_TMASK);
		}
		putchar(' ');
	}

	switch (c = (se->n_type & N_BTMASK)) {	/* base type */
	showDesc(T_NULL, "none")
	showCase(T_CHAR)
	showCase(T_SHORT)
	showCase(T_INT)
	showCase(T_LONG)
	showCase(T_FLOAT)
	showCase(T_DOUBLE)
	showCase(T_STRUCT)
	showCase(T_UNION)
	showCase(T_ENUM)
	showCase(T_MOE)
	showCase(T_UCHAR)
	showCase(T_USHORT)
	showCase(T_UINT)
	showCase(T_ULONG)

	case T_ARG:		/* What has base type (not storage class) ARG? */
	default:
		fatal("unexpected base type 0x%X", c);

	}
	if (derived)
		putchar('>');

	/* Print the storage class. */
	printf("\tclass=");
	switch (i = se->n_sclass) {

	showVal(C_EFCN)
	showVal(C_NULL)
	showVal(C_AUTO)
	showHexVal(C_STAT)
	showVal(C_REG)
	showVal(C_EXTDEF)
	showVal(C_LABEL)
	showVal(C_ULABEL)
	showVal(C_MOS)
	showVal(C_ARG)
	showVal(C_STRTAG)
	showVal(C_MOU)
	showVal(C_UNTAG)
	showVal(C_TPDEF)
	showVal(C_ENTAG)
	showVal(C_MOE)
	showVal(C_REGPARM)
	showVal(C_FIELD)
	showVal(C_BLOCK)
	showVal(C_FCN)
	showVal(C_EOS)
	showVal(C_FILE)

	case C_EXT:
		if (se->n_scnum != N_UNDEF)
			printf("C_EXT\tvalue=0x%lX", se->n_value);
		else if (se->n_value != 0)
			printf("Common\tlength=%ld", se->n_value);
		else
			printf("External");
		break;

	case C_USTATIC:			/* What is an undefined static? */
		fatal("unexpected storage class 0x%X", i);

	default:
		printf("0x%X", i);

	}

#if	0
	if (se->n_numaux)
		printf("\tnaux=%d", se->n_numaux);
#endif
	putchar('\n');

	if (1 == flag) {
		printf("*** Bad data in name **\n");
		dump(se, SYMESZ);
	}
}

/*
 * Vertical hex dump of p bytes from buffer buf.
 */
void
dump(buf, p) register char *buf; register int p;
{
	register int i;

	/* Offset. */
	printf ("\n%6lX\t", ftell(fp) - p);

	/* Printable version of character. */
	for (i = 0; i < p; i++ )
		outc(clean(buf[i]), i, ' ');
	printf("\n\t");

	/* High hex digit. */
	for (i = 0; i < p; i++)
		outc(hex((buf[i] >> 4) & 0x0f), i, '.');
	printf("\n\t");

	/* Low hex digit. */
	for (i = 0; i < p; i++)
		outc(hex(buf[i]& 0x0f), i, '.');
	putchar('\n');
}

/*
 * Return c if printable, '.' if not.
 */
int
clean(c) register int c;
{
	return (c >= ' ' && c <= '~' ) ? c : '.';
}

/*
 * Print c, preceded by s every 4 times.
 */
void
outc(c, i, s) register int i, c, s;
{
	if ((i&3) == 0 && i != 0 )
		putchar(s);
	putchar(c);
}

/*
 * Convert hex digit c to corresponding ASCII character.
 */
int
hex(c) register int c;
{
	return ( c <= 9 ) ? c + '0' : c + 'A' - 10;
}

/*
 * Mainline.
 */
main(argc, argv) int argc; char *argv[];
{
	register int i, c;

	while (EOF != (c = getargs(argc, argv, "adlrsxV?"))) {
		switch (c) {

		case 0:
			/* Process a COFF file. */
			readHeaders(optarg);
			for (i = 0; i < num_sections; i++)
				readSection(i);
			if (num_symbols) {
				readStrings();
				readSymbols();
			}
			/* Cleanup. */
			if (sec_name != NULL) {
				free(sec_name);
				sec_name = NULL;
			}
			if (str_tab != NULL) {
				free(str_tab);
				str_tab = NULL;
			}
			fclose(fp);
			break;

		case 'a':	aswitch++;	break;
		case 'd':	dswitch++;	break;
		case 'l':	lswitch++;	break;
		case 'r':	rswitch++;	break;
		case 's':	sswitch++;	break;
		case 'x':	xswitch++;	break;

		case 'V':
			fprintf(stderr, "cdmp: %s\n", VERSION);
			break;

		case '?':
		default:
			fprintf(stderr,
				"Usage: cdmp [ -adlrsx ] filename ...\n"
				"Options:\n"
				"\t-a\tsupress symbol aux entries\n"
				"\t-d\tsupress data dumps\n"
				"\t-l\tsupress line numbers\n"
				"\t-r\tsupress relocation entries\n"
				"\t-s\tsupress symbol entries\n"
				"\t-x\tdump aux entries in hex\n");
			exit(1);
			break;
		}
	}
	exit(0);
}

/* end of cdmp.c */
@


1.7
log
@cef: files with headers longer than minimal length not printing all header info.
@
text
@d3 1
a3 1
 * 8/13/92
d13 1
d15 1
d23 1
a23 1
#define	VERSION	"V2.1"
d29 4
a32 4
#define showCase(x) showDesc(x, #x)
#define showDesc(x, d) case x: printf(d); break;
#define showValue(x) case x: printf(#x "\tvalue=%ld ", se->n_value); break;
#define showHexVal(x) case x: printf(#x "\tvalue=0x%lx ", se->n_value); break;
d39 1
d74 1
d126 1
a126 2
optHeader(size)
int size;
d128 2
a129 2
	register AOUTHDR *oh;
	int tail;
d131 1
a131 1
	if (0 > (tail = size - sizeof(*oh)))
d133 1
d135 2
a136 1
	oh = alloc(size);
a137 3
	if (1 != fread(oh, size, 1, fp))
		fatal("error reading optional header");

d139 8
a146 8
	printf("magic            = 0x%x\n",	oh->magic);
	printf("version stamp    = %d\n",	oh->vstamp);
	printf("text size        = 0x%lx\n",	oh->tsize);
	printf("init data size   = 0x%lx\n",	oh->dsize);
	printf("uninit data size = 0x%lx\n",	oh->bsize);
	printf("entry point      = 0x%lx\n",	oh->entry);
	printf("text start       = 0x%lx\n",	oh->text_start);
	printf("data start       = 0x%lx\n",	oh->data_start);
d148 1
d151 1
a151 1
		dump(oh + 1, tail);
d153 1
a153 1
	free(oh);
d170 1
a170 1
	printf("magic number   = 0x%x\n",	fh.f_magic);
d173 1
a173 1
	printf("symbol ptr     = 0x%lx\n",	symptr = fh.f_symptr);
d176 1
a176 1
	printf("flags          = 0x%x\n",	fh.f_flags);
d191 1
a191 1
		optHeader(fh.f_opthdr);			/* optional header */
d246 6
a251 6
	printf("physical address    = 0x%lx\n", sh.s_paddr);
	printf("virtual address     = 0x%lx\n", sh.s_vaddr);
	printf("section size        = 0x%lx\n", sh.s_size);
	printf("file ptr to data    = 0x%lx\n", sh.s_scnptr);
	printf("file ptr to relocs  = 0x%lx\n", sh.s_relptr);
	printf("file ptr to lines   = 0x%lx\n", sh.s_lnnoptr);
d254 1
a254 1
	printf("flags               = 0x%lx\t", sh.s_flags);
d304 1
a304 1
			printf("address=0x%lx\tindex=%ld \ttype=",
d318 1
a318 1
				fatal("unexpected relocation type 0x%x",
d338 1
a338 1
				printf("address=0x%lx\tline=%d\n",
d374 1
a374 1
		fatal("error reading string table %lx %d", ftell(fp), len);
d419 1
d429 1
a429 1
	register int type, class, i;
d455 1
a455 1
		printf("\tlength=%lx\trelocs=%d\tlinenos=%d\n",
d477 2
a478 1
#define showNe(x, d) if(l = ae.x) printf("\t" d "=%ld", l);
a479 3
	/* Print tag index. */
	showNe(ae_tagndx, "tag")

d482 1
a482 1
		showNe(ae_fsize, "size")
d484 2
a485 2
		showNe(ae_lnno, "lnno")
		showNe(ae_size, "size")
d491 2
a492 2
			printf("\tlnnoptr=0x%lx", l);
		showNe(ae_endndx, "end")
d504 1
a504 2
	showNe(ae_tvndx, "ttv")
#undef showNe
d507 1
d550 2
a551 2
	
	/* print derived types */
d554 1
a554 2
		if (derived == 0) {
			derived = 1;
a555 1
		}
d560 3
d584 1
a584 1
	case T_ARG:	/* What has base type (not storage class) ARG? */
d586 1
a586 1
		fatal("unexpected base type 0x%x", c);
d596 3
a598 3
	showValue(C_EFCN)
	showValue(C_NULL)
	showValue(C_AUTO)
d600 18
a617 18
	showValue(C_REG)
	showValue(C_EXTDEF)
	showValue(C_LABEL)
	showValue(C_ULABEL)
	showValue(C_MOS)
	showValue(C_ARG)
	showValue(C_STRTAG)
	showValue(C_MOU)
	showValue(C_UNTAG)
	showValue(C_TPDEF)
	showValue(C_ENTAG)
	showValue(C_MOE)
	showValue(C_REGPARM)
	showValue(C_FIELD)
	showValue(C_BLOCK)
	showValue(C_FCN)
	showValue(C_EOS)
	showValue(C_FILE)
d621 1
a621 1
			printf("C_EXT\tvalue=0x%lx", se->n_value);
d629 1
a629 1
		fatal("unexpected storage class 0x%x", i);
d632 1
a632 1
		printf("0x%x", i);
d636 4
d657 1
a657 1
	printf ("\n%6lx\t", ftell(fp) - p);
@


1.6
log
@cef: cosmetic changes
@
text
@d27 1
a27 1
#define showCase(x) case x: printf(#x); break;
d122 2
a123 1
optHeader()
d125 2
a126 1
	AOUTHDR	oh;
d128 6
a133 1
	if (1 != fread(&oh, sizeof(oh), 1, fp))
d137 14
a150 8
	printf("magic            = 0x%x\n",	oh.magic);
	printf("version stamp    = %d\n",	oh.vstamp);
	printf("text size        = 0x%lx\n",	oh.tsize);
	printf("init data size   = 0x%lx\n",	oh.dsize);
	printf("uninit data size = 0x%lx\n",	oh.bsize);
	printf("entry point      = 0x%lx\n",	oh.entry);
	printf("text start       = 0x%lx\n",	oh.text_start);
	printf("data start       = 0x%lx\n",	oh.data_start);
d188 1
a188 1
		optHeader();			/* optional header */
d473 2
d476 1
a476 2
	if (l = ae.ae_tagndx)
		printf("\ttag=%ld", l);
d480 1
a480 2
		if (l = ae.ae_fsize)
			printf("\tfsize=%ld", l);
d482 2
a483 4
		if (i = ae.ae_lnno)
			printf("\tlnno=%d", i);
		if (i = ae.ae_size)
			printf("\tsize=%d", i);
d490 1
a490 2
		if (l = ae.ae_endndx)
			printf("\tend=%ld", l);
d502 2
a503 3
	if (l = ae.ae_tvndx)
		printf("\ttv=%ld", l);

@


1.5
log
@cef: changes due to coff.h fix for DT_PTR
@
text
@d26 5
a30 4
#define show(flag, msg) if (fh.f_flags & flag) printf("\t" msg "\n");
#define cs(x) case x: printf(#x); break;
#define cd(x) case x: printf(#x "\tvalue=%ld ", se->n_value); break;
#define cx(x) case x: printf(#x "\tvalue=0x%lx ", se->n_value); break;
d130 8
a137 8
	printf("magic            = 0x%x\n", oh.magic);
	printf("version stamp    = %d\n", oh.vstamp);
	printf("text size        = 0x%lx\n", oh.tsize);
	printf("init data size   = 0x%lx\n", oh.dsize);
	printf("uninit data size = 0x%lx\n", oh.bsize);
	printf("entry point      = 0x%lx\n", oh.entry);
	printf("text start       = 0x%lx\n", oh.text_start);
	printf("data start       = 0x%lx\n", oh.data_start);
d153 8
a160 13
	printf("FILE %s HEADER VALUES\n", fn);
	printf("magic number   = 0x%x\n", fh.f_magic);
	printf("sections       = %ld\n", num_sections = fh.f_nscns);
	printf("file date      = %s", ctime(&fh.f_timdat));
	printf("symbol ptr     = 0x%lx\n", symptr = fh.f_symptr);
	printf("symbols        = %ld\n", num_symbols = fh.f_nsyms);
	printf("sizeof(opthdr) = %d\n", fh.f_opthdr);
	printf("flags          = 0x%x\n", fh.f_flags);
	show(F_RELFLG, "Relocation info stripped from file");
	show(F_EXEC, "File is executable");
	show(F_LNNO, "Line numbers stripped from file");
	show(F_LSYMS, "Local symbols stripped from file");
	show(F_MINMAL, "Minimal object file");
d162 6
d229 1
a229 1
	printf("\n%s - SECTION HEADER -\n", sec_name[n]);
d236 2
a237 2
	printf("relocation entries  = %u\n", sh.s_nreloc);
	printf("line number entries = %u\n", sh.s_nlnno);
d241 8
a248 2
	case STYP_GROUP:
		printf("grouped section");	break;
a249 12
	case STYP_PAD:
		printf("padding section");	break;

	case STYP_COPY:
		printf("copy section");		break;

	case STYP_INFO:
		printf("comment section");	break;

	case STYP_OVER:
		printf("overlay section");	break;

a254 9
	case STYP_TEXT:
		printf("text only");		break;

	case STYP_DATA:
		printf("data only");		break;

	case STYP_BSS:
		printf("bss only");		break;

d291 10
a300 10
			cs(R_DIR8)
			cs(R_DIR16)
			cs(R_DIR32)
			cs(R_RELBYTE)
			cs(R_RELWORD)
			cs(R_RELLONG)
			cs(R_PCRBYTE)
			cs(R_PCRWORD)
			cs(R_PCRLONG)
			cs(R_NONREL)
d529 3
a531 3
		cs(N_UNDEF)
		cs(N_ABS)
		cs(N_DEBUG)
d539 2
a540 1
	i = se->n_type;
d542 1
a542 1
	while (i & N_TMASK) {			/* derived type */
d548 3
a550 6
		cs(DT_PTR)
		cs(DT_FCN)
		cs(DT_ARY)
		case DT_NON:
		default:
			fatal("unexpected derived type 0x%x", i & N_TMASK);
a552 1
		i >>= N_TSHIFT;
d554 1
d556 15
d572 1
a572 20
	case T_NULL:
		printf("none");
		break;

	cs(T_CHAR)
	cs(T_SHORT)
	cs(T_INT)
	cs(T_LONG)
	cs(T_FLOAT)
	cs(T_DOUBLE)
	cs(T_STRUCT)
	cs(T_UNION)
	cs(T_ENUM)
	cs(T_MOE)
	cs(T_UCHAR)
	cs(T_USHORT)
	cs(T_UINT)
	cs(T_ULONG)

	case T_ARG:		/* What has base type (not storage class) ARG? */
d584 3
a586 2
	cd(C_EFCN)
	cd(C_NULL)
d587 1
a587 1
	cd(C_AUTO)
d588 18
a605 19
	cx(C_STAT)
	cd(C_REG)
	cd(C_EXTDEF)
	cd(C_LABEL)
	cd(C_ULABEL)
	cd(C_MOS)
	cd(C_ARG)
	cd(C_STRTAG)
	cd(C_MOU)
	cd(C_UNTAG)
	cd(C_TPDEF)
	cd(C_ENTAG)
	cd(C_MOE)
	cd(C_REGPARM)
	cd(C_FIELD)
	cd(C_BLOCK)
	cd(C_FCN)
	cd(C_EOS)
	cd(C_FILE)
a623 4
#if	0
	if (se->n_numaux)
		printf("\tnaux=%d", se->n_numaux);
#endif
@


1.4
log
@cef: added more output
@
text
@d3 1
a3 1
 * 8/12/92
d21 1
a21 1
#define	VERSION	"V2.0"
a35 1
void	fatal();
a69 1
void
d517 1
a517 1
	register int i, c, eflag, derived;
a521 2

	eflag = 0;				/* no errors */
d523 4
a526 2
		for (i = 0; i < SYMNMLEN; i++) {
			if ((' ' < (c = se->n_name[i])) && ('~' >= c))
d528 2
a529 4
			else {
				eflag = c ? 1 : -1;
				break;
			}
d559 1
a559 1
		switch(i & N_TMASK) {
d649 1
a649 1
	if (1 == eflag) {
@


1.3
log
@update by cef for 4.1 (mods for future debugger)
@
text
@d3 1
a3 1
 * 8/4/92
d21 1
a21 1
#define	VERSION	"V1.6"
d28 2
a29 2
#define cx(x) case x: printf(#x "\tvalue=%ld ", se->n_value); break;
#define cX(x) case x: printf(#x "\tvalue=0x%lx ", se->n_value); break;
d431 1
d448 3
a450 1
		printf("\tfilename=%.8s\n", checkStr(ae.ae_fname));
d493 1
a493 1
			printf("\tlnnoptr=%ld", l);
d519 1
a519 1
	register int i, c, flag, derived;
d524 2
d527 2
a528 4
		for (flag = i = 0; i < SYMNMLEN; i++) {
			if (flag)
				putchar(' ');
			else if ((' ' < (c = se->n_name[i])) && ('~' >= c))
d530 4
a533 2
			else
				flag = c ? 1 : -1;
d535 1
d537 1
a537 1
		printf("%s", checkStr(str_tab + se->n_offset - 4));
d541 1
a541 1
	printf(" section=");
d607 22
a628 22
	cx(C_EFCN)
	cx(C_NULL)
	cx(C_AUTO)
	cX(C_STAT)
	cx(C_REG)
	cx(C_EXTDEF)
	cx(C_LABEL)
	cx(C_ULABEL)
	cx(C_MOS)
	cx(C_ARG)
	cx(C_STRTAG)
	cx(C_MOU)
	cx(C_UNTAG)
	cx(C_TPDEF)
	cx(C_ENTAG)
	cx(C_MOE)
	cx(C_REGPARM)
	cx(C_FIELD)
	cx(C_BLOCK)
	cx(C_FCN)
	cx(C_EOS)
	cx(C_FILE)
d647 4
d653 1
a653 1
	if (1 == flag) {
@


1.2
log
@update by cef
@
text
@d2 13
a14 1
 * Reads and list COFF files.
d16 2
a17 1
#include <misc.h>	/* misc usefull stuff */
d21 3
a23 1
#define VHSZ 48	/* line size in vertical hex dump */
d25 1
a25 1
/* some shortcut display stuff */
d28 2
a29 1
#define cx(x) case x: printf(#x " = 0x%lx ", se->n_value); break;
d31 3
a33 10
long	num_sections;		/* number of section */
long	section_seek;		/* used to seek first section */
long	symptr;			/* File pointer to symbol table entrys */
long	num_symbols;		/* Number of symbols */
char	*str_tab;		/* String char array */
unsigned long str_length;	/* length in bytes of string array. */
FILE *fd;			/* COFF file descriptor */
static char dswitch, rswitch, lswitch, sswitch, aswitch, uswitch;
extern char *optarg;
extern int optind;
d35 32
d68 1
a68 1
 * Print message to stderr and stdout and die.
d70 3
a72 2
fatal(s)
char *s;
d74 1
a74 1
	int save = errno;
d76 2
a77 1
	fprintf(stderr, "fatal: %r\n", &s);
d84 2
a85 1
 * Check String Data.
d88 1
a88 2
checkStr(s)
unsigned char *s;
a89 1
	static *work = NULL;
d91 2
a92 1
	int badct = 0, ct = 1;
d94 1
a94 1
	for (p = s; c = *p++; ct++)
d96 1
a96 1
			badct += 2;
d99 1
a99 1
		return(s);
d102 1
a102 1
		free(work);
d116 1
a116 1
	return (work);
d120 1
a120 1
 * Read and print optional file header.
d122 1
d127 2
a128 2
	if (1 != fread(&oh, sizeof(oh), 1, fd))
		fatal("Error reading optional header");
d142 1
a142 1
 * Read and print file header.
d144 2
a145 2
readHeaders(fn)
char *fn;
d149 1
a149 1
	fd = xopen(fn, "rb");
d151 2
a152 2
	if (1 != fread(&fh, sizeof(fh), 1, fd))
		fatal("Error reading coff header");
d155 1
a155 1
	printf("magic no       = 0x%x\n", fh.f_magic);
d158 1
a158 1
	printf("sym ptr        = 0x%lx\n", symptr = fh.f_symptr);
d161 1
a161 1
	printf("FLAGS          = 0x%x\n", fh.f_flags);
d166 1
a166 1
	show(F_MINMAL, "Minamal object file");
d168 6
d175 1
a175 1
		optHeader();
d180 1
a180 1
 * Process Shared library.
d182 1
a184 2
	long i;
	char *pathn;
d186 2
d189 2
a190 2
	if (1 != fread(&shr, sizeof(shr), 1, fd))
		fatal("Error reading Library Section");
d194 1
a194 2
		char	buf[VHSZ];	/* buffer for hex dump */
		printf("\nExtra Library info");
d197 1
a197 1
		     j && (i = fread(buf, 1, ((j > VHSZ) ? VHSZ : (int)j), fd));
d200 1
a200 1
				fatal("Unexpected EOF in .lib data");
a202 1
		putchar('\n');
d206 2
a207 2
	if (1 != fread(pathn, i, 1, fd))
		fatal("Error reading Library name");
d209 1
d215 2
a216 1
readSections()
d218 2
a219 2
	SCNHDR	sh;	/* Section header structure */
	long i;
d221 3
a223 3
	fseek(fd, section_seek, 0);
	if (1 != fread(&sh, sizeof(SCNHDR), 1, fd))
		fatal("Error reading section header");
d226 1
a226 1
	fseek(fd, sh.s_scnptr, 0);
d228 11
a238 11
	printf("\n %.8s - SECTION HEADER -\n", checkStr(sh.s_name));
	printf("physical address   = 0x%lx\n", sh.s_paddr);
	printf("virtual address    = 0x%lx\n", sh.s_vaddr);
	printf("section size       = 0x%lx\n", sh.s_size);
	printf("file ptr to data   = 0x%lx\n", sh.s_scnptr);
	printf("file ptr to reloc  = 0x%lx\n", sh.s_relptr);
	printf("file ptr to lines  = 0x%lx\n", sh.s_lnnoptr);
	printf("relocation entrys  = %u\n", sh.s_nreloc);
	printf("line entrys        = %u\n", sh.s_nlnno);
	printf("flags              = 0x%lx\n", sh.s_flags);
	printf("\t");
d240 1
a240 1
#if 0
d242 2
a243 1
		printf("grouped section"); break;
d245 2
a246 1
		printf("padding section"); break;
d248 2
a249 1
		printf("copy section"); break;
d251 2
a252 1
		printf("comment section"); break;
d254 2
a255 2
		printf("overlay section"); break;
#endif
d262 1
a262 1
		printf("text only"); break;
d265 1
a265 1
		printf("data only"); break;
d268 1
a268 1
		printf("bss only"); break;
d272 1
a272 2
		if (uswitch)
			dswitch = 0;
d276 1
d278 1
a278 2
		long j;
		char	buf[VHSZ];	/* buffer for hex dump */
d280 2
a281 2
		fseek(fd, sh.s_scnptr, 0);
		printf("\nRAW DATA");
d284 1
a284 1
		     j && (i = fread(buf, 1, ((j > VHSZ) ? VHSZ : (int)j), fd));
d287 1
a287 1
				fatal("Unexpected EOF in %.8s data",
a290 1
		putchar('\n');
d293 1
d295 2
a296 2
		fseek(fd, sh.s_relptr, 0);
		printf("\nRELOCATION ENTRYS\n");
d300 2
a301 2
			if (1 != fread(&re, RELSZ, 1, fd))
				fatal("Error reading relocation entry");
d303 19
a321 2
			printf("address 0x%lx\tindex %ld \ttype 0x%x\n",
				re.r_vaddr, re.r_symndx, re.r_type);
d325 1
d327 2
a328 2
		fseek(fd, sh.s_lnnoptr, 0);
		printf("\n LINE NUMBER ENTRIES\n");
d333 2
a334 2
			if (1 != fread(&le, LINESZ, 1, fd))
				fatal("Error reading line number entry");
d337 2
a338 2
				printf("line %d at 0x%lx\n",
					le.l_lnno, le.l_addr.l_paddr);
d340 1
a340 2
				printf("function address 0x%lx\n",
					le.l_addr.l_symndx);
d347 1
a347 1
 * This allows the read_symbols function to work.
d349 1
d353 2
a354 1
	long	strings;
d357 2
a358 2
	strings = symptr + (SYMESZ * num_symbols);
	fseek(fd, strings, 0);
d360 1
a360 1
	if (1 != fread(&str_length, sizeof(str_length), 1, fd))
d363 2
a364 2
	if (!str_length) {
		printf("\n NO STRING TABLE\n");
d367 1
a367 1
	printf("\n STRING TABLE DUMP\n");
d370 4
a373 1
		fatal("File is corrupt");
d375 1
a375 6
	str_tab = alloc(len);

	if (1 != fread(str_tab, len, 1, fd))
		fatal("Error reading string table %lx %d", ftell(fd), len);

	for (str_ptr = str_tab; str_ptr < (str_tab + str_length);) {
d393 1
a393 1
 * Read symbol table.
d395 1
d399 1
a399 2
	AUXENT ae;
	long	i, j;
d403 2
a404 2
	fseek(fd, symptr, 0);
	printf("\n SYMBOL TABLE ENTRIES\n");
d406 11
a416 2
		if (1 != fread(&se, SYMESZ, 1, fd))
			fatal("Error reading symbol entry");
d418 13
a430 3
		if (!lswitch)
			printf("%4ld\t", i);
		print_se(&se);
d432 10
a441 3
		for (j = 0; j < se.n_numaux; j++) {
			if (i >= num_symbols)
				fatal("Inconsistant sym table");
d443 2
a444 2
			if (1 != fread(&ae, AUXESZ, 1, fd))
				fatal("Error reading aux symbol entry");
d446 54
a499 33
			if (aswitch)
				continue;
			if (!lswitch)
				printf("\n%4ld\t", ++i);
			switch (se.n_sclass) {
			case C_EXT:
				if (ISFCN(se.n_type)) {
					printf("function size 0x%lx\n",
						ae.x_sym.x_misc.x_fsize);
					continue;
				}
				break;
			case C_FCN:	/* .bf or .ef */
				printf("line %d\n",
					ae.x_sym.x_misc.x_lnsz.x_lnno);
				continue;
			case C_FILE:
				printf("file name %.8s\n",
					checkStr(ae.x_file.x_fname));
				continue;
			case C_STAT:
				if (!se.n_type) {
					printf(
		"section length %lx  reloc entrys %d  line numbers %d\n",
						ae.x_scn.x_scnlen,
						ae.x_scn.x_nreloc,
						ae.x_scn.x_nlinno);
					continue;
				}
			}
			printf("AUX ENTRY DUMP");
			dump(&ae, sizeof(ae));
			putchar('\n');
a500 1
		putchar('\n');
d502 6
d511 1
a511 1
 * Print symbol table entry
d513 2
a514 2
print_se(se)
SYMENT *se;
d516 10
a525 8
	register i, c;
	char flag = 0;

	if (se->n_zeroes) { /* name in place */
		for (i = 0; i < SYMNMLEN; i++) {
			if ((flag != -1) && 
			   (' ' < (c = se->n_name[i])) &&
			   ('~' >= c))
d527 2
a528 7
			else {
				putchar(' ');
				if (!c)
					flag = -1;
				else if (!flag)
					flag = 1;
			}
d530 1
a530 2
	}
	else
d533 41
a573 2
	printf(" section %d ", se->n_scnum);
	switch (c = (i = se->n_type) & 15) {
d588 2
d591 2
a592 1
		printf("type = %d ", c);
d594 2
d597 3
a599 6
	if (ISFCN(i))
		printf(", function ");
	if (ISPTR(i))
		printf(", pointer ");
	if (ISARY(i))
		printf(", array ");
d601 1
a601 1
	switch (i = se->n_sclass) {
d603 3
a605 1
	cx(C_STAT)
d607 4
a610 12
	case C_EXT:
		if (se->n_scnum)
			printf("C_EXT value 0x%lx ", se->n_value);
		else {
			if (se->n_value)
				printf("Common length %ld ", se->n_value);
			else
				printf("External reference ");
		}
		break;
	cx(C_AUTO)
	cs(C_FILE)
d612 9
d622 1
a622 5
	cx(C_FCN)
	cx(C_EFCN)
	default:
		printf(" class = 0x%x ", i);
	}
d624 7
a630 4
	switch (se->n_numaux) {
	case 1:
		printf(" 1 aux entry");
	case 0:
d632 4
d637 2
a638 1
		printf(" %d aux entries", se->n_numaux);
d649 5
a653 3
dump(buf, p)
char *buf;
int p; /* p is the number of bytes to dump */
d657 2
a658 1
	printf ("\n\n%6x ", ftell(fd) - p);
d660 1
d663 1
d665 1
a665 1
	printf("\n       ");
d668 1
d670 1
a670 1
	printf("\n       ");
d673 2
d676 5
a680 4
}

clean(c)
char c;
d682 1
a682 4
	if (c >= ' ' && c <= '~' )
		return c;
	else
		return '.';
d685 5
a689 3
outc( c, i, s)
int i;
char c, s;
d696 5
a700 2
hex(c)
char c;
d702 1
a702 4
	if ( c <= 9 )
		return c + '0';
	else
		return c + 'A' - 10;
d708 1
a708 2
main(argc, argv)
char *argv[];
d710 1
a710 1
	int i, c;
d712 1
a712 1
	while (EOF != (c = getargs(argc, argv, "drlsau?"))) {
d714 1
d716 1
a717 1

d719 1
a719 1
				readSections();
d724 11
d736 9
a744 1
			fclose(fd);
a746 18
		case 'u':
			uswitch++; break;

		case 'd':
			dswitch++; break;

		case 'r':
			rswitch++; break;

		case 'l':
			lswitch++; break;

		case 's':
			sswitch++; break;

		case 'a':
			aswitch++; break;

d749 9
a757 6
			fprintf(stderr, "usage: cdump -drlsa filename ...\n");
			fprintf(stderr, "-d supress data dumps\n");
			fprintf(stderr, "-r supress relocation entries\n");
			fprintf(stderr, "-l supress line numbers\n");
			fprintf(stderr, "-s supress symbol entries\n");
			fprintf(stderr, "-a supress aux symbol entries\n");
d759 1
d762 2
d765 1
a765 2
	return (0);
}
@


1.1
log
@Initial revision
@
text
@a4 1
#include <time.h>
a20 1
long	tot;			/* position in data */
d22 1
a22 1
static char dswitch, rswitch, lswitch, sswitch, aswitch, errflg;
d130 33
d175 1
d177 1
a177 1
	printf("\n %s - SECTION HEADER -\n", checkStr(sh.s_name));
a197 2
	case STYP_LIB:
		printf("for .lib section"); break;
d201 5
d208 1
d211 1
d214 1
d217 2
d229 1
a229 1
		for (tot = 0, j = sh.s_size;
d231 1
a231 1
		     tot += i, j -= i) {
d233 1
a233 1
				fatal("Unexpected EOF in %s data",
d338 2
a339 1
		printf("%ld\t", i);
d351 2
a352 1
			printf("\n%ld\t", ++i);
d366 1
a366 1
				printf("file name %s\n",
a378 1
			tot = -1;
a477 1
		tot = 0;
d488 1
a488 4
	if (-1 == tot)
		printf("\n\n     ");
	else
		printf ("\n\n%4x ", tot);
d493 1
a493 1
	printf("\n     ");
d497 1
a497 1
	printf("\n     ");
d538 1
a538 1
	while (EOF != (c = getopt(argc, argv, "drlsa?"))) {
d540 16
d558 1
d561 1
d564 1
d567 1
d570 1
d573 7
a579 1
			errflg++;
d583 1
a583 24
	if (errflg) {
		fprintf(stderr, "usage: cdump -drlsa filename ...\n");
		fprintf(stderr, "-d supress data dumps\n");
		fprintf(stderr, "-r supress relocation entries\n");
		fprintf(stderr, "-l supress line numbers\n");
		fprintf(stderr, "-s supress symbol entries\n");
		fprintf(stderr, "-a supress aux symbol entries\n");
		exit(1);
	}

	for (; optind < argc; optind++) {
		readHeaders(argv[optind]);

		for (i = 0; i < num_sections; i++)
			readSections();
		if (num_symbols) {
			readStrings();
			readSymbols();
		}

		fclose(fd);
	}

	exit(0);
@
