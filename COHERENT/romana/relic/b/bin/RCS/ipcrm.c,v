head     1.2;
branch   ;
access   ;
symbols  ;
locks    bin:1.2; strict;
comment  @ * @;


1.2
date     93.04.05.12.33.07;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     93.02.24.08.27.38;  author bin;  state Exp;
branches ;
next     ;


desc
@removes allocated shared memory segments, msg queues or semaphores.
@


1.2
log
@vlad: various declaration fixes, some structural changes.
@
text
@/* 
 * ipcrm: remove message queue, shared memory segment or semaphore set
 * 	  given an identifier or key used to create the queue, segment
 *	  or set.
 */
#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/ipc.h>

/* 
 * Functions 
 */
void 	rmid();			/* given ipc resource identifier, remove it */
void	rmkey();		/* given ipc resource key, remove it */
void 	usage();		/* usage message */

/* 
 * Globals 
 */
int	errorCount = 0;

/*
 * Program will go though all arguments and perform the job.
 * ipcrm will print message on error and continue process argument list,
 * so, if one or a few of options are not correct and a few are correct
 * it tries to properly process all correct options and give error messages
 * about all uncorrect.
 */
main(argc, argv)
int argc;
char **argv;
{
	extern char	*optarg;
	extern int	optind;
	int		flag;
	int		identifier;	/* ipc resource identifier */
	key_t		key;		/* ipc resource key */

	while ((flag = getopt(argc, argv, "m:M:s:S:q:Q:")) != EOF) {
		switch (flag) {
		case 'm':	/* shmid */
			identifier = atoi(optarg);
			rmid('m', identifier);
			break;
		case 'M':	/* shmkey */
			key = atoi(optarg);
			rmkey('M', key);
			break;
		case 'q':	/* msgqid */
			identifier = atoi(optarg);
			rmid('q', identifier);
			break;
		case 'Q':	/* msgqkey */
			key = atoi(optarg);
			rmkey('Q', key);
			break;
		case 's':	/* semid */
			identifier = atoi(optarg);
			rmid('s', identifier);
			break;
		case 'S':	/* semkey */
			key = atoi(optarg);
			rmkey('S', key);
			break;
		default:
			errorCount++;
			break;
		}
	}
	/* Print usage message on any error(s) but only once. */
	if (errorCount)
		usage();
	exit(errorCount);
}

/* rmid(): take a flag which tells us to remove a message queue, shared memory
 *	   segment or semaphore set and an identifier and perform the proper
 *	   command (msgctl, shmctl or semctl) with IPC_RMID to destroy the
 *	   allocated queue, segment or set.
 *         Print error message and increment error count on error.
 */
void rmid(flag,identifier)
char flag;
int identifier;
{
	switch (flag) {
	case 'm':
		if (shmctl(identifier, IPC_RMID, 0) < 0) {
			printf("ipcrm: shmid(%d): %s\n", identifier, 
							sys_errlist[errno]);
			errorCount++;
		}
		break;
	case 'q':
		if (msgctl(identifier, IPC_RMID, 0)) {
			printf("ipcrm: msgid(%d): %s\n", identifier, 
							sys_errlist[errno]);
			errorCount++;
		}
		break;
	case 's':
		if (semctl(identifier, IPC_RMID, 0, 0)) {
			printf("ipcrm: semid(%d): %s\n", identifier, 
							sys_errlist[errno]);
			errorCount++;
		}
		break;
	}
}

/* 
 * rmkey():	Remove ipc resource by gevien key.
 *		In case of error print error message and increment
 *		errorCount.
 */
void rmkey(flag, key)
char	flag;
key_t 	key;
{
	int	id;	/* ipc id */
	
	switch (flag) {
	case 'M':
		if ((id = shmget(key, 1, 0)) < 0 ) {
			printf("ipcrm: shmkey(%d): %s\n", key, 
							sys_errlist[errno]);
			errorCount++;
			return;
		}
		if (shmctl(id, IPC_RMID, 0) < 0) {
			printf("ipcrm: shmkey(%d): %s\n", key, 
							sys_errlist[errno]);
			errorCount++;
			return;
		}
		return;
	case 'Q':
		if ((id = msgget(key, 0)) < 0 ) {
			printf("ipcrm: msgkey(%d): %s\n", key, 
							sys_errlist[errno]);
			errorCount++;
			return;
		}
		if (msgctl(id, IPC_RMID, 0) < 0) {
			printf("ipcrm: msgkey(%d): %s\n", key, 
							sys_errlist[errno]);
			errorCount++;
			return;
		}
		return;
	case 'S':
		if ((id = semget(key, 0, 0)) < 0 ) {
			printf("ipcrm: semkey(%d): %s\n", key, 
							sys_errlist[errno]);
			errorCount++;
			return;
		}
		if (semctl(id, IPC_RMID, 0, 0) < 0) {
			printf("ipcrm: semkey(%d): %s\n", key, 
							sys_errlist[errno]);
			errorCount++;
			return;
		}
		return;
	}
}

/* usage message */
void usage()
{
	errorCount++;
	puts("usage: ipcrm [ [-m shmId] [-q msgqId] [-s semId]");
	puts("               [-M shmKey] [-Q msgqKey] [-S semKey] ... ]");
}
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
/* ipcrm: remove message queue, shared memory segment or semaphore set
 * 	  given a queue identifier or key used to create the queue, segment
a5 1

d8 1
d11 6
a16 2
#define FALSE 0
#define TRUE 1
d18 4
a21 2
/* flags */
short m,s,q,M,S,Q;
d23 7
a29 10
#define FALSE 0
#define TRUE 1
#define SIZE 9

/* functions */
int getid();		/* given a key, returns queue id */
int rmid();		/* given queue identifier, remove it */
int usage();		/* usage message */


d32 1
a32 1
char *argv;
d34 5
a38 9
	extern char *optarg;
	extern int optind;
	char flag;
	int midentifier;
	int sidentifier;
	int qidentifier;
	int Midentifier;
	int Sidentifier;
	int Qidentifier;
d40 29
a68 53
	while( (flag = getopt(argc, argv, "m:M:s:S:q:Q:")) != EOF){
		switch(flag){
				case 'm':
					m = TRUE;
					if((optarg == NULL) || (optarg == EOF)){
						printf("ipcs: missing identifier or key\n");
						exit(1);
					}
					midentifier = atoi(optarg);
					break;
				case 'M':
					M = TRUE;
					if((optarg == NULL) || (optarg == EOF)){
						printf("ipcs: missing identifier or key\n");
						exit(1);
					}
					Midentifier = atoi(optarg);
					break;
				case 'q':
					q = TRUE;
					if((optarg == NULL) || (optarg == EOF)){
						printf("ipcs: missing identifier or key\n");
						exit(1);
					}
					qidentifier = atoi(optarg);
					break;
				case 'Q':
					Q = TRUE;
					if((optarg == NULL) || (optarg == EOF)){
						printf("ipcs: missing identifier or key\n");
						exit(1);
					}
					Qidentifier = atoi(optarg);
					break;
				case 's':
					s = TRUE;
					if((optarg == NULL) || (optarg == EOF)){
						printf("ipcs: missing identifier or key\n");
						exit(1);
					}
					sidentifier = atoi(optarg);
					break;
				case 'S':
					S = TRUE;
					if((optarg == NULL) || (optarg == EOF)){
						printf("ipcs: missing identifier or key\n");
						exit(1);
					}
					Sidentifier = atoi(optarg);
					break;
				default:
					usage();
					exit(1);
d71 5
a76 41
	/* did the user specify an option at all? */
	if( (m+M+q+Q+s+S) == 0 ){
		usage();
		exit(1);
	}

	/* walk through our identifier flags and delete a shared mem segment, 
	 * message queue or semaphore set if the flag is set. 
	 */

	if(m)
		rmid('m', midentifier);
	if(q)
		rmid('q', qidentifier);
	if(s)
		rmid('s', sidentifier);


	/* walk through our KEY flags and get the identifier associated
	 * with the key. Then call rmid() to rid ourselves of the message
	 * queue, shared mem seg or semaphore set. Getid will return an integer,
	 * so we don't need to convert the identifier as we do above.
	 */

	if(M){
		midentifier = getid('m', Midentifier);
		rmid('m', midentifier);
	}

	if(Q){
		qidentifier = getid('q', Qidentifier);
		rmid('q',qidentifier);
	}

	if(S){
		sidentifier = getid('s', Sidentifier);
		rmid('s',sidentifier);
	}
}


d81 1
d83 1
a83 2

rmid(flag,identifier)
d87 22
a108 23
	errno = 0;
	switch(flag){
		case 'm':
			shmctl(identifier, IPC_RMID, 0);			
			if(errno){
				printf("ipcrm (shared memory) error: %s\n",sys_errlist[errno]);
				exit(1);
			}
			break;
		case 'q':
			msgctl(identifier, IPC_RMID, 0);
			if(errno){
				printf("ipcrm (message queue) error: %s\n",sys_errlist[errno]);
				exit(1);
			}
			break;
		case 's':
			semctl(identifier, IPC_RMID, 0);
			if(errno){
				printf("ipcrm (semaphore set) error: %s\n",sys_errlist[errno]);
				exit(1);
			}
			break;
d112 4
a115 5

/* getid():	Given a flag indicating that we are working on a shared memory
 *		segment, message queue or semaphore set and a key which 
 *		presumeably created it, get the id and return it to the
 *		calling function.
d117 3
a119 4

getid(flag, key)
char flag;
int key;
d121 45
a165 27
	int ret;	/* queue identifier returned by msgget, semget, shmget */
	errno = 0;
	switch(flag){
		case 'm':
			ret = shmget(key,0000);
			if(errno){
				printf("ipcrm (shared memory) error: %s\n",sys_errlist[errno]);
				exit(1);
			}
			return(ret);
			break;
		case 'q':
			ret = msgget(key,0000);
			if(errno){
				printf("ipcrm (message queue) error: %s\n",sys_errlist[errno]);
				exit(1);
			}
			return(ret);
			break;
		case 's':
			ret = semget(key,0000);
			if(errno){
				printf("ipcrm (semaphore) error: %s\n",sys_errlist[errno]);
				exit(1);
			}
			return(ret);
			break;
a168 1

d170 1
a170 1
usage()
d172 3
a174 7
	printf("Usage: ipcs [option] [identifier or key]\n");
	printf("options:  m  Remove shared mem. segment with following queue id\n");
	printf("          M  Remove shared mem. segment created with following key\n");
	printf("          q  Remove message queue with following queue id.\n");
	printf("          Q  Remove message queue created with following key.\n");
	printf("          s  Remove semaphore set with following id.\n");
	printf("          S  Remove semaphore set created with following key.\n");
@
