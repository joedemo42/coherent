head     1.6;
branch   ;
access   ;
symbols  ;
locks    bin:1.6;
comment  @ * @;


1.6
date     93.02.24.08.59.00;  author bin;  state Exp;
branches ;
next     1.5;

1.5
date     92.10.12.12.04.34;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.05.26.10.40.08;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.05.14.13.55.59;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.28.11.08.06;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.21.09.31.10;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@cef: errors now written to stderr
@
text
@/*
 * ld/message.c
 * Print messages of various origins.
 * And misc functions.
 */

#include "ld.h"
#include <errno.h>

extern char *memset();

/*
 * Fatal error; print message and exit
 */
void
fatal(args)
char *args;
{
	if (!Qflag)
		fprintf(stderr, "%s: %r\n", argv0, &args);
	exit(1);
}

void
message(args)
char * args;
{
	errCount++;
	if (Qflag)
		return;
	fprintf(stderr, "%s: %r\n", argv0, &args);
}

void
watch_message(args)
char * args;
{
	fprintf(stderr, "%s: %r\n", argv0, &args);
}

/*
 * message plus command prototype
 */
void
help()
{
	static char document[] =
		"Usage ld\n"
		"\t-d\t\tDefine commons even if undefined symbols\n"
		"\t-e entry\tSet entry point\n"
		"\t-K\t\tCompile kernel\n"
		"\t-l lib\t\tUse library\n"
		"\t-o outfile\tSet output filename default is a.out\n"
		"\t-r\t\tRetain relocation information\n"
		"\t-s\t\tStrip symbol table\n"
		"\t-u sym\t\tUndefine sym\n"
		"\t-w\t\tWatch messages enabled\n"
		"\t-X\t\tDiscard local symbols beginning .L\n"
		"\t-x\t\tDiscard all local symbols\n";

	printf(document);
	exit(0);
}

usage()
{
	fprintf(stderr,
"usage: ld [-drswxX?] [-o out] [-e entry] [-u sym] file ... [-l lib] ...\n");
	exit(1);
}

/*
 * message with filename
 */
void
filemsg(fname, args)
char	*fname, *args;
{
	message( "file '%s': %r", fname, &args );
}

/*
 * Message with module and file name
 */
void
modmsg(fname, mname, args)
char * fname;
char * mname;
char * args;
{
	if (mname[0] == 0)
		filemsg(fname, "%r", &args );

	else
		filemsg(fname, "module '%.*s': %r",
			DIRSIZ, mname, &args );
}

/*
 * Message for module passed by pointer
 */
void
mpmsg(mp, args)
mod_t * mp;
char  * args;
{
	modmsg(mp->fname, mp->mname, "%r", &args);
}

/*
 * Module is corrupt message.
 */
void
corrupt(mp)
{
	mpmsg(mp, "is corrupt");
	/* This does not make sense as an object module. */
	exit (1);
}

/*
 * Message for symbol passed by pointer
 */
void
spmsg(sp, args)
sym_t	*sp;
char	*args;
{
	static char msg[] = "symbol '%s' %r";
	char work[SYMNMLEN + 1], *name;

	name = symName(&(sp->sym), work);

	if (sp->mod == NULL)
		message(msg, name, &args);
	else
		mpmsg(sp->mod, msg, name, &args);
}

/*
 * Warning message for symbol passed by pointer
 */
void
spwarn(sp, args)
sym_t	*sp;
char	*args;
{
	static char msg[] = "warning: symbol '%s' %r";
	char work[SYMNMLEN + 1], *name;

	if (qflag)
		return;

	errCount--;	/* don't increment count */
	name = symName(&(sp->sym), work);

	if (sp->mod == NULL)
		message(msg, name, &args);
	else
		mpmsg(sp->mod, msg, name, &args);
}

/*
 * Open a file or die in the attempt.
 */
int
qopen(fn, type)
char *fn;
{
	int fd;

	if (type)
		fd = creat(fn, 0666);
	else
		fd = open(fn, 0);

	if (-1 == fd) {
		filemsg(fn, "Cannot open.");	/**/
		exit(1);
	}
	return (fd);
}
@


1.5
log
@update by cef for post 401a (fixed -I (or was that -L))
@
text
@d12 3
d16 9
d31 1
a31 2
	printf("%s: %r\n", argv0, &args);
	fflush(stdout);
d38 1
a38 2
	printf("%s: %r\n", argv0, &args);
	fflush(stdout);
d42 1
a42 1
 * Fatal error; print message and exit
a44 12
fatal(args)
char *args;
{
	if (!Qflag)
		printf("%s: %r\n", argv0, &args);
	exit(1);
}

/*
 * message plus command prototype
 */
void
@


1.4
log
@cef: Made ld do various consistency checks on object modules. This was triggered
by what may be an OS bug which corrupts files.
@
text
@d17 2
d24 1
a24 1
w_message(args)
d27 2
a28 4
	if (watch) {
		printf("%s: %r\n", argv0, &args);
		fflush(stdout);
	}
d34 1
d38 2
a39 1
	printf("%s: %r\n", argv0, &args);
d90 1
a90 1
char   mname[DIRSIZ];
d115 1
@


1.3
log
@*** empty log message ***
@
text
@d18 1
d25 1
a25 1
	if (watch)
d27 2
d111 10
@


1.2
log
@comment changes by cef
@
text
@d7 1
a7 2
#include "data.h"
#include <path.h>
d17 1
a17 1
	printf("ld: %r\n", &args);
d25 1
a25 1
		printf("ld: %r\n", &args);
a30 1
void
d32 1
a32 1
char * args;
d34 1
a34 5
	int  save = errno;

	printf("ld: %r\n", &args);
	if (0 != (errno = save))
		perror("errno reports");
a61 1
void
d73 1
a73 1
filemsg( fname, args )
d76 1
a76 1
	message( "file %s: %r", fname, &args );
d89 1
a89 1
		filemsg( fname, "%r", &args );
d92 1
a92 1
		filemsg(fname, "module %.*s: %r",
a106 9
void
mpfatal(mp, args)
mod_t * mp;
char  * args;
{
	modmsg(mp->fname, mp->mname, "%r", &args);
	exit(1);
}

d115 2
a116 1
	static char msg[] = "symbol %s: %r";
d118 2
d121 1
a121 1
		message(msg, sp->name, &args);
d123 1
a123 1
		mpmsg(sp->mod, msg, sp->name, &args);
d127 1
a127 6
 * find a file on a path in the environment, or a default path
 * with an access priveledge.
 *
 * example: pathn("helpfile", "LIBPATH", ",,\lib", "r");
 *
 * Returns full path name.
d129 4
a132 4
char	*getenv(), *path(), *strchr();
char *
pathn(name, envpath, deflpath)
char *name, *envpath, *deflpath;
d134 2
a135 1
	register char *pathptr;
d137 2
a138 2
	if ((NULL == envpath) || (NULL == (pathptr = getenv(envpath))))
		pathptr = deflpath;
d140 7
a146 3
	if ((pathptr = path(pathptr, name, AREAD)) == NULL)
		return (NULL);
	return (pathptr);
d150 1
a150 5
 * Get arguments off of argv[]. more flexable than getopt().
 * Allows optional names after arguments flagged with ! on optstring.
 * Non optional names are still flagged with : on optstring.
 * Returns non switch arguments as if they had a precedding switch of zero,
 * this permits interspersed switch and non switch arguments.
a151 4
char	*optarg;		/* Global argument pointer. */
int	optind = 1;		/* Global argv index. */
extern char	*strchr();

d153 2
a154 4
getargs(argc, argv, optstring)
int argc;
char *argv[];
char *optstring;
d156 1
a156 3
	register char c, d;
	register char *place;
	static char	*scan = NULL;	/* Private scan pointer. */
d158 8
a165 11
	for (optarg = NULL; scan == NULL || !*scan; scan++, optind++) {
		if (optind >= argc) {
			scan = NULL;
			return(EOF);
		}
		if (*(scan = argv[optind]) != '-') {
			optarg = scan;
			scan = NULL;
			optind++;
			return (0);
		}
d167 1
a167 21

	if ((place = strchr(optstring, c = *scan++)) == NULL || 
	     (c == ':') || (c == '!')) {
		printf("%s: unknown option %c\n", argv[0], c);
		return('?');
	}

	if ((d = place[1]) == ':' || d == '!') {
		if (*scan || d == '!') {
			optarg = scan;
			scan = NULL;
		} else if (optind < argc)
			optarg = argv[optind++];
		else {
			printf("%s: %c argument missing\n",
				argv[0], c);
			return('?');
		}
	}

	return(c);
@


1.1
log
@Initial revision
@
text
@d9 1
d36 2
d39 2
a139 16
 * Get space or die.
 */
char *
alloc(n)
unsigned n;
{
	char	*tmp;

	if (NULL == (tmp = malloc(n)))
		fatal(memok() ?
			"Out of space" :
			"Internal error: arena corrupt");
	return (memset(tmp, '\0', n));
}

/*
@
