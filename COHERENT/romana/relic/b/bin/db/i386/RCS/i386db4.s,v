head     1.2;
branch   ;
access   ;
symbols  ;
locks    bin:1.2;
comment  @@;


1.2
date     93.07.12.17.09.03;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     93.04.19.09.03.20;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@Steve: update for 4.2Alpha
@
text
@//////////
/ db/i386/i386db4.s
/ A debugger.
/ i386 assembly language support.
//////////

//////////
/ double
/ _get_fp_reg(struct _fpreg *fpregp)
/
/ Return a double containing the 80-bit floating point value
/ to which fpregp points in the place expected by software fp emulation.
/ This uses NDP instructions to perform the conversion
/ but stores the result in EDX:EAX for software fp.
/ This should only be called if the coprocessor or emulator is present.
//////////

	.intelorder
	.text
	.globl	_get_fp_reg
	
_get_fp_reg:
	movl	%ecx, 4(%esp)		/ fpregp to ECX
	fldt	(%ecx)			/ fetch 80-bit value to %st0
	fstpl	-8(%esp)		/ store to stack and pop
	movl	%eax, -8(%esp)		/ fetch high dword
	movl	%edx, -4(%esp)		/ and low dword
	ret				/ and return result in EDX:EAX

/ end of db/i386/i386db.h
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
/ get_fp_reg(struct _fpreg *fpregp)
d11 5
a15 1
/ Load %st with the 80-bit NDP register to which fpregp points.
d20 1
a20 1
	.globl	get_fp_reg
d22 1
a22 1
get_fp_reg:
d24 5
a28 2
	fldt	(%ecx)			/ fetch 80-bit value
	ret				/ and return it in %st0
@
