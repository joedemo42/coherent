head     1.1;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @@;


1.1
date     92.05.29.12.31.10;  author root;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@SOURCES=ps.c coffnlist.c fifo.c

AR=ar
RANLIB=ranlib
INCLUDE=
LIBS=
CFLAGS=$(INCLUDE)

all: $(TARGETS)
        @@true   # nop

ps:     $(OBJECTS)
        $(CC) -o ps $(OBJECTS) $(LIBS)

readker: readker.o
        $(CC) -o readker readker.o $(LIBS)

pt: pt.o
        $(CC) -o pt pt.o $(LIBS)

search: search.o
        $(CC) -o search search.o $(LIBS)

coffnlist: coffnlist.c
        $(CC) $(CFLAGS) -DTEST -c coffnlist.c
        $(CC) -o coffnlist coffnlist.o $(LIBS)

clean:
-- Coherent MicroEMACS -- Makefile -- File: Makefile ---------------------------
        close(fd);

        found = 0; /* We are looking for the command line.  */
        if (F_NULL != (ffp = fifo_open(&boot_gift, 0))) {

                for (; !found && T_NULL != (tp = fifo_read(ffp)); ) {
                        if (T_STR_ARGF == tp->ts_type) {
                                found = 1;
                                break;
                        }
                }
                fifo_close(ffp);

                if (!found) {
printf("can't find command line, assuming /autoboot.\n");
                        strcpy(retval, "/autoboot");
                } else {
                        /* Recast the argument list, so we can read it.  */
                        RETYPE(tp, T_FIFO_SIC);
                        ffp = fifo_open(tp, 0);
                        tp = fifo_read(ffp);
                        sprintf(retval, "/%14s", tp->ts_data);
                        fifo_close(ffp);
                }
        } else {
                strcpy(retval, "/autoboot");
        }

        return(retval);
-- Coherent MicroEMACS -- ps.c -- File: ps.c -----------------------------------
failing i-search forward: strcpys
@
