head     1.3;
branch   ;
access   ;
symbols  ;
locks    bin:1.3;
comment  @ * @;


1.3
date     93.08.05.08.47.01;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     93.08.02.03.18.24;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     93.07.19.14.34.57;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Nigel: changes for 420Alpha to fix
problems with here docs
@
text
@
#line 8 "sh.y"

#include "sh.h"

#define YYERROR	{ yyerrflag=1; goto YYerract; }

extern	NODE	*node();

#include "y.tab.h"
#define YYCLEARIN yychar = -1000
#define YYERROK yyerrflag = 0
extern int yychar;
extern short yyerrflag;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
YYSTYPE yyval, yylval;

#line 570 "sh.y"

/*
 * Create a node.
 */
NODE *
node(type, auxp, next)
NODE *auxp, *next;
{
	register NODE *np;

	np = (NODE *) balloc(sizeof (NODE));
	np->n_type = type;
	np->n_auxp = auxp;
	np->n_next = next;
	return np;
}

#define NBPC 8
#define NKEY 8
static char keys[NKEY] = { 0 };
static int  keyi = NKEY * NBPC;

keyflush()
{
	register char *kp;

	for (kp = keys+NKEY; kp > keys; *--kp = 0)
		;
	keyi = NKEY * NBPC;
}

keypop()
{
	register char	*kp;
	register int	km;

	if ((km = keyi++) >= NKEY * NBPC) {
		panic(11);
		NOTREACHED;
	}
	kp = keys + (km / NBPC);
	km = 1 << (km %= NBPC);
	keyflag = (*kp & km) ? 1 : 0;
	*kp &= ~km;
}

keypush()
{
	register char	*kp;
	register int	km;

	if ((km = --keyi) < 0) {
		panic(12);
		NOTREACHED;
	}
	if (keyflag) {
		kp = keys + (km / NBPC);
		km = 1 << (km %= NBPC);
		*kp |= km;
	}
}
/*
 * The following fragments might implement named pipes.
 * The token declaration goes in the header.
 * The nopen production should go with the others of its ilk.
 * The production fragment goes into arg:
%token _NOPEN _NCLOSE
nopen:	_NOPEN optnls ;

|	nopen pipe_cmd ')' {
		$$ = node(NRPIPE, $2, NULL);
	}
|	oparen pipe_cmd _NCLOSE {
		$$ = node(NWPIPE, $2, NULL);
	}
CLOSE {
		$$ = node(NWPIPE, $2, NULL);
	}
 *
 */
#ifdef YYTNAMES
struct yytname yytnames[33] =
{
	"$end", -1, 
	"error", -2, 
	"_ANDF", 256, 
	"_ASGN", 257, 
	"_CASE", 258, 
	"_CBRAC", 259, 
	"_DO", 260, 
	"_DONE", 261, 
	"_DSEMI", 262, 
	"_ELIF", 263, 
	"_ELSE", 264, 
	"_ESAC", 265, 
	"_FI", 266, 
	"_FOR", 267, 
	"_IF", 268, 
	"_IN", 269, 
	"_IORS", 270, 
	"_NAME", 271, 
	"_NULL", 272, 
	"_OBRAC", 273, 
	"_ORF", 274, 
	"_PARENS", 275, 
	"_RET", 276, 
	"_THEN", 277, 
	"_UNTIL", 278, 
	"_WHILE", 279, 
	"'\\n'", 10, 
	"';'", 59, 
	"'|'", 124, 
	"'('", 40, 
	"')'", 41, 
	"'&'", 38, 
	NULL
} ;
#endif
#define	YYACTSH		13
#define	YYAMASK		017777
#define	YYSHIFTACT	0
#define	YYREDACT	1
#define	YYACCEPTACT	2
#define	YYERRACT	3
#define	YYGOTO		4
#define	YYPACTION	5
#define	YYEOFVAL	(-1)
#define	YYERRVAL	(-2)
#define	YYOTHERS	(-1000)

unsigned char yypdnt[117] = {
0, 1, 1, 1, 1, 3, 5, 6,
7, 8, 8, 9, 9, 10, 10, 12,
13, 14, 15, 16, 17, 18, 2, 2,
2, 2, 2, 19, 19, 19, 20, 20,
21, 22, 23, 23, 23, 23, 23, 23,
25, 27, 26, 26, 24, 24, 24, 24,
24, 32, 32, 32, 32, 35, 33, 34,
34, 34, 34, 34, 34, 38, 39, 39,
39, 39, 39, 39, 39, 39, 39, 39,
39, 39, 39, 39, 39, 31, 40, 37,
28, 36, 41, 29, 29, 29, 29, 29,
29, 29, 29, 42, 42, 47, 47, 44,
44, 44, 48, 49, 49, 43, 43, 46,
46, 46, 45, 45, 30, 30, 11, 11,
11, 4, 4, 50, 50 
};
unsigned char yypn[117] = {
2, 1, 1, 2, 0, 2, 2, 2,
2, 2, 2, 2, 3, 1, 2, 2,
2, 2, 2, 2, 2, 2, 1, 2,
2, 3, 3, 1, 3, 3, 3, 1,
2, 0, 1, 1, 2, 1, 2, 1,
1, 6, 1, 2, 3, 2, 1, 2,
1, 1, 2, 1, 2, 1, 1, 1,
2, 1, 2, 1, 2, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 6, 5, 6, 5, 4,
6, 3, 3, 2, 0, 2, 0, 3,
1, 0, 3, 3, 1, 2, 0, 5,
2, 0, 1, 0, 3, 2, 1, 1,
2, 1, 0, 1, 2 
};
unsigned char yypgo[51] = {
0, 0, 2, 10, 12, 46, 50, 52,
54, 56, 58, 62, 68, 70, 72, 74,
76, 80, 82, 84, 90, 94, 96, 98,
100, 102, 104, 106, 108, 124, 126, 138,
150, 156, 158, 168, 170, 178, 182, 184,
186, 188, 190, 192, 198, 204, 218, 222,
226, 228, 232 
};
unsigned int yygo[244] = {
YYOTHERS, 0x3, 0x0, 0x4, 0xb, 0x2f, 0xc, 0x30,
YYOTHERS, 0x41, YYOTHERS, 0x1e, 0xe, 0x34, 0x11, 0x37,
0x16, 0x3b, 0x19, 0x3c, 0x1b, 0x3e, 0x1c, 0x3f,
0x1d, 0x40, 0x41, 0x6b, 0x49, 0x75, 0x6d, 0x86,
0x6f, 0x89, 0x88, 0x9c, 0x8f, 0x9f, 0x91, 0xa1,
0x97, 0xa5, 0x98, 0xa6, YYOTHERS, 0x32, 0xa7, 0xab,
YYOTHERS, 0x6e, YYOTHERS, 0x99, YYOTHERS, 0x9a, YYOTHERS, 0x1f,
YYOTHERS, 0x70, 0x67, 0x80, YYOTHERS, 0x66, 0x64, 0x7a,
0x6a, 0x83, YYOTHERS, 0x67, YYOTHERS, 0xf, YYOTHERS, 0x10,
YYOTHERS, 0x12, YYOTHERS, 0x20, 0x75, 0x8c, YYOTHERS, 0x21,
YYOTHERS, 0x92, YYOTHERS, 0x90, 0xf, 0x35, 0x10, 0x36,
YYOTHERS, 0x5, 0x12, 0x38, YYOTHERS, 0x6, YYOTHERS, 0x7,
YYOTHERS, 0x8, YYOTHERS, 0x22, YYOTHERS, 0x23, YYOTHERS, 0x24,
YYOTHERS, 0x47, YYOTHERS, 0x25, 0x8, 0x26, 0x14, 0x39,
0x15, 0x3a, 0x1a, 0x3d, 0x29, 0x4b, 0x69, 0x81,
0x81, 0x81, YYOTHERS, 0x7c, YYOTHERS, 0x27, 0x1e, 0x42,
0x1f, 0x43, 0x6c, 0x85, 0x8c, 0x9d, 0x99, 0xa7,
YYOTHERS, 0x44, 0x8, 0x28, 0x24, 0x48, 0x28, 0x28,
0x2b, 0x28, 0x47, 0x74, YYOTHERS, 0x5d, 0x28, 0x4a,
0x2b, 0x62, YYOTHERS, 0x29, YYOTHERS, 0x4c, 0x4c, 0x76,
0x5d, 0x77, 0x5f, 0x78, 0x60, 0x79, YYOTHERS, 0x5e,
YYOTHERS, 0x2a, 0x8, 0x2b, 0x28, 0x2b, 0x2b, 0x2b,
YYOTHERS, 0x5f, 0x29, 0x4d, YYOTHERS, 0x2c, YYOTHERS, 0x60,
YYOTHERS, 0x61, YYOTHERS, 0x2d, YYOTHERS, 0x2e, YYOTHERS, 0x6a,
0x6a, 0x84, 0x83, 0x95, YYOTHERS, 0x71, 0x80, 0x93,
0x90, 0xa0, YYOTHERS, 0x7d, 0x21, 0x46, 0x6e, 0x87,
0x70, 0x8a, 0x92, 0xa2, 0x9a, 0xa8, 0xab, 0xac,
YYOTHERS, 0x45, 0xac, 0xad, YYOTHERS, 0x9b, 0x81, 0x94,
YYOTHERS, 0x82, YYOTHERS, 0x7e, 0x8d, 0x9e, YYOTHERS, 0x7f,
0x39, 0x68, 0x41, 0x6c, 0x64, 0x68, 0x65, 0x7b,
0x6a, 0x68, YYOTHERS, 0x33 
};
unsigned short yypa[174] = {
0, 28, 32, 34, 38, 40, 46, 52,
56, 80, 82, 86, 110, 134, 134, 138,
138, 134, 140, 142, 144, 144, 134, 148,
150, 134, 152, 134, 134, 134, 140, 140,
156, 160, 164, 166, 168, 172, 174, 178,
180, 186, 190, 226, 232, 234, 236, 238,
240, 242, 244, 246, 250, 252, 254, 256,
258, 260, 268, 272, 274, 276, 278, 280,
282, 134, 284, 288, 292, 294, 298, 302,
306, 134, 308, 310, 312, 348, 350, 352,
354, 356, 358, 360, 362, 364, 366, 368,
370, 372, 374, 376, 378, 380, 416, 418,
454, 490, 492, 494, 496, 502, 506, 510,
514, 518, 522, 530, 532, 134, 556, 564,
570, 574, 578, 580, 582, 584, 588, 590,
592, 594, 596, 598, 602, 606, 610, 614,
506, 518, 618, 288, 620, 624, 626, 628,
134, 634, 636, 638, 140, 640, 644, 134,
506, 134, 646, 652, 656, 658, 662, 134,
134, 140, 664, 668, 672, 674, 678, 680,
682, 684, 686, 688, 690, 692, 694, 284,
696, 698, 700, 556, 702, 708 
};
unsigned int yyact[710] = {
0x2, 0xa, 0x2004, YYEOFVAL, 0x2021, 0x101, 0x2021, 0x102,
0x2021, 0x10b, 0x2021, 0x10c, 0x2021, 0x10e, 0x2021, 0x10f,
0x2021, 0x111, 0x2021, 0x114, 0x2021, 0x116, 0x2021, 0x117,
0x2021, 0x28, 0x1, YYOTHERS, 0x9, 0xa, 0x6000, YYOTHERS,
0x2001, YYOTHERS, 0xa, YYEOFVAL, 0x6000, YYOTHERS, 0x2002, YYOTHERS,
0xb, 0x3b, 0xc, 0x26, 0x2016, YYOTHERS, 0xd, 0x100,
0xe, 0x112, 0x201b, YYOTHERS, 0x11, 0x7c, 0x201f, YYOTHERS,
0x13, 0x101, 0x14, 0x102, 0x15, 0x10b, 0x16, 0x10c,
0x17, 0x10e, 0x18, 0x10f, 0x19, 0x111, 0x1a, 0x114,
0x1b, 0x116, 0x1c, 0x117, 0x1d, 0x28, 0x6000, YYOTHERS,
0x2003, YYOTHERS, 0x4000, YYEOFVAL, 0x6000, YYOTHERS, 0x2021, 0x101,
0x2021, 0x102, 0x2021, 0x10b, 0x2021, 0x10c, 0x2021, 0x10e,
0x2021, 0x10f, 0x2021, 0x111, 0x2021, 0x114, 0x2021, 0x116,
0x2021, 0x117, 0x2021, 0x28, 0x2018, YYOTHERS, 0x2021, 0x101,
0x2021, 0x102, 0x2021, 0x10b, 0x2021, 0x10c, 0x2021, 0x10e,
0x2021, 0x10f, 0x2021, 0x111, 0x2021, 0x114, 0x2021, 0x116,
0x2021, 0x117, 0x2021, 0x28, 0x2017, YYOTHERS, 0x31, 0xa,
0x2072, YYOTHERS, 0x2021, YYOTHERS, 0x2021, YYOTHERS, 0x2052, YYOTHERS,
0x18, 0x10f, 0x6000, YYOTHERS, 0x204e, YYOTHERS, 0x2050, YYOTHERS,
0x18, 0x10f, 0x2027, YYOTHERS, 0x206b, 0x29, 0x2021, YYOTHERS,
0x206b, 0x103, 0x2021, YYOTHERS, 0x2020, YYOTHERS, 0x2022, YYOTHERS,
0x17, 0x10e, 0x2023, YYOTHERS, 0x2025, YYOTHERS, 0x49, 0x113,
0x204f, YYOTHERS, 0x2028, YYOTHERS, 0x13, 0x101, 0x17, 0x10e,
0x2031, YYOTHERS, 0x18, 0x10f, 0x202e, YYOTHERS, 0x13, 0x101,
0x4e, 0x102, 0x4f, 0x104, 0x50, 0x105, 0x51, 0x107,
0x52, 0x108, 0x53, 0x109, 0x54, 0x10a, 0x55, 0x10b,
0x56, 0x10c, 0x57, 0x10d, 0x17, 0x10e, 0x58, 0x10f,
0x59, 0x114, 0x5a, 0x115, 0x5b, 0x116, 0x5c, 0x117,
0x2030, YYOTHERS, 0x13, 0x101, 0x17, 0x10e, 0x2033, YYOTHERS,
0x2035, YYOTHERS, 0x204d, YYOTHERS, 0x2051, YYOTHERS, 0x201a, YYOTHERS,
0x2019, YYOTHERS, 0x2073, YYOTHERS, 0x2010, YYOTHERS, 0x63, 0xa,
0x2071, YYOTHERS, 0x200f, YYOTHERS, 0x201c, YYOTHERS, 0x201d, YYOTHERS,
0x2011, YYOTHERS, 0x201e, YYOTHERS, 0x64, 0x10d, 0x31, 0xa,
0x65, 0x3b, 0x6000, YYOTHERS, 0x69, 0x10d, 0x205c, YYOTHERS,
0x2005, YYOTHERS, 0x2013, YYOTHERS, 0x2026, YYOTHERS, 0x200a, YYOTHERS,
0x2009, YYOTHERS, 0x2012, YYOTHERS, 0x6d, 0x115, 0x6000, YYOTHERS,
0x6f, 0x104, 0x2066, YYOTHERS, 0x206a, YYOTHERS, 0x72, 0x29,
0x6000, YYOTHERS, 0x73, 0x103, 0x6000, YYOTHERS, 0x17, 0x10e,
0x2024, YYOTHERS, 0x202a, YYOTHERS, 0x2032, YYOTHERS, 0x204f, YYOTHERS,
0x13, 0x101, 0x4e, 0x102, 0x4f, 0x104, 0x50, 0x105,
0x51, 0x107, 0x52, 0x108, 0x53, 0x109, 0x54, 0x10a,
0x55, 0x10b, 0x56, 0x10c, 0x57, 0x10d, 0x17, 0x10e,
0x58, 0x10f, 0x59, 0x114, 0x5a, 0x115, 0x5b, 0x116,
0x5c, 0x117, 0x202d, YYOTHERS, 0x2036, YYOTHERS, 0x203f, YYOTHERS,
0x2040, YYOTHERS, 0x2041, YYOTHERS, 0x2042, YYOTHERS, 0x2043, YYOTHERS,
0x2044, YYOTHERS, 0x2045, YYOTHERS, 0x2046, YYOTHERS, 0x2047, YYOTHERS,
0x2048, YYOTHERS, 0x203e, YYOTHERS, 0x2049, YYOTHERS, 0x204a, YYOTHERS,
0x204b, YYOTHERS, 0x204c, YYOTHERS, 0x13, 0x101, 0x4e, 0x102,
0x4f, 0x104, 0x50, 0x105, 0x51, 0x107, 0x52, 0x108,
0x53, 0x109, 0x54, 0x10a, 0x55, 0x10b, 0x56, 0x10c,
0x57, 0x10d, 0x17, 0x10e, 0x58, 0x10f, 0x59, 0x114,
0x5a, 0x115, 0x5b, 0x116, 0x5c, 0x117, 0x2037, YYOTHERS,
0x202f, YYOTHERS, 0x13, 0x101, 0x4e, 0x102, 0x4f, 0x104,
0x50, 0x105, 0x51, 0x107, 0x52, 0x108, 0x53, 0x109,
0x54, 0x10a, 0x55, 0x10b, 0x56, 0x10c, 0x57, 0x10d,
0x17, 0x10e, 0x58, 0x10f, 0x59, 0x114, 0x5a, 0x115,
0x5b, 0x116, 0x5c, 0x117, 0x203b, YYOTHERS, 0x13, 0x101,
0x4e, 0x102, 0x4f, 0x104, 0x50, 0x105, 0x51, 0x107,
0x52, 0x108, 0x53, 0x109, 0x54, 0x10a, 0x55, 0x10b,
0x56, 0x10c, 0x57, 0x10d, 0x17, 0x10e, 0x58, 0x10f,
0x59, 0x114, 0x5a, 0x115, 0x5b, 0x116, 0x5c, 0x117,
0x2039, YYOTHERS, 0x203d, YYOTHERS, 0x2034, YYOTHERS, 0x2074, YYOTHERS,
0x31, 0xa, 0x65, 0x3b, 0x200d, YYOTHERS, 0x31, 0xa,
0x206f, YYOTHERS, 0x18, 0x10f, 0x2061, YYOTHERS, 0x64, 0x10d,
0x6000, YYOTHERS, 0x63, 0xa, 0x206e, YYOTHERS, 0x18, 0x10f,
0x205e, YYOTHERS, 0x6f, 0x104, 0x31, 0xa, 0x65, 0x3b,
0x2066, YYOTHERS, 0x206d, YYOTHERS, 0x63, 0xa, 0x2071, 0x103,
0x2071, 0x104, 0x2071, 0x105, 0x2071, 0x106, 0x2071, 0x107,
0x2071, 0x108, 0x2071, 0x109, 0x2071, 0x10a, 0x2071, 0x115,
0x2071, 0x29, 0x2021, YYOTHERS, 0x206b, 0x107, 0x206b, 0x108,
0x206b, 0x10a, 0x2021, YYOTHERS, 0x31, 0xa, 0x88, 0x3b,
0x2072, YYOTHERS, 0x206b, 0x105, 0x2021, YYOTHERS, 0x8b, 0x105,
0x6000, YYOTHERS, 0x2059, YYOTHERS, 0x205a, YYOTHERS, 0x202b, YYOTHERS,
0x19, 0x111, 0x6000, YYOTHERS, 0x202c, YYOTHERS, 0x2038, YYOTHERS,
0x203c, YYOTHERS, 0x203a, YYOTHERS, 0x200e, YYOTHERS, 0x63, 0xa,
0x2070, YYOTHERS, 0x8d, 0x7c, 0x2064, YYOTHERS, 0x8e, 0x109,
0x6000, YYOTHERS, 0x8f, 0x106, 0x2060, YYOTHERS, 0x91, 0x29,
0x6000, YYOTHERS, 0x205b, YYOTHERS, 0x96, 0x105, 0x6000, YYOTHERS,
0x206c, YYOTHERS, 0x2006, YYOTHERS, 0x97, 0x107, 0x98, 0x108,
0x2069, YYOTHERS, 0x200b, YYOTHERS, 0x2065, YYOTHERS, 0x2057, YYOTHERS,
0x18, 0x10f, 0x6000, YYOTHERS, 0x2056, YYOTHERS, 0x206b, 0x106,
0x206b, 0x109, 0x2021, YYOTHERS, 0xa3, 0x109, 0x6000, YYOTHERS,
0x205d, YYOTHERS, 0xa4, 0x105, 0x6000, YYOTHERS, 0x2054, YYOTHERS,
0x206b, 0x10a, 0x2021, YYOTHERS, 0xa9, 0x10a, 0x6000, YYOTHERS,
0x200c, YYOTHERS, 0xaa, 0x103, 0x6000, YYOTHERS, 0x2063, YYOTHERS,
0x2015, YYOTHERS, 0x205f, YYOTHERS, 0x2014, YYOTHERS, 0x2062, YYOTHERS,
0x2055, YYOTHERS, 0x2053, YYOTHERS, 0x2007, YYOTHERS, 0x2008, YYOTHERS,
0x2068, YYOTHERS, 0x2058, YYOTHERS, 0x2029, YYOTHERS, 0x97, 0x107,
0x98, 0x108, 0x2069, YYOTHERS, 0x2067, YYOTHERS 
};


#define YYNOCHAR (-1000)
#define	yyerrok	yyerrflag=0
#define	yyclearin	yylval=YYNOCHAR
int yystack[YYMAXDEPTH];
YYSTYPE yyvstack[YYMAXDEPTH], *yyv;
int yychar;

#ifdef YYDEBUG
int yydebug = 1;	/* No sir, not in the BSS */
#include <stdio.h>
#endif

short yyerrflag;
int *yys;

yyparse()
{
	register YYSTYPE *yypvt;
	int act;
	register unsigned *ip, yystate;
	int pno;
	yystate = 0;
	yychar = YYNOCHAR;
	yyv = &yyvstack[-1];
	yys = &yystack[-1];

stack:
	if( ++yys >= &yystack[YYMAXDEPTH] ) {
		write(2, "Stack overflow\n", 15);
		exit(1);
	}
	*yys = yystate;
	*++yyv = yyval;
#ifdef YYDEBUG
	if( yydebug )
		fprintf(stdout, "Stack state %d, char %d\n", yystate, yychar);
#endif

read:
	ip = &yyact[yypa[yystate]];
	if( ip[1] != YYNOCHAR ) {
		if( yychar == YYNOCHAR ) {
			yychar = yylex();
#ifdef YYDEBUG
			if( yydebug )
				fprintf(stdout, "lex read char %d, val %d\n", yychar, yylval);
#endif
		}
		while (ip[1]!=YYNOCHAR) {
			if (ip[1]==yychar)
				break;
			ip += 2;
		}
	}
	act = ip[0];
	switch( act>>YYACTSH ) {
	case YYSHIFTACT:
		if( ip[1]==YYNOCHAR )
			goto YYerract;
		if( yychar != -1 )
			yychar = YYNOCHAR; /* dont throw away EOF */
		yystate = act&YYAMASK;
		yyval = yylval;
#ifdef YYDEBUG
		if( yydebug )
			fprintf(stdout, "shift %d\n", yystate);
#endif
		if( yyerrflag )
			--yyerrflag;
		goto stack;

	case YYACCEPTACT:
#ifdef YYDEBUG
		if( yydebug )
			fprintf(stdout, "accept\n");
#endif
		return(0);

	case YYERRACT:
	YYerract:
		switch (yyerrflag) {
		case 0:
			yyerror("Syntax error");

		case 1:
		case 2:

			yyerrflag = 3;
			while( yys >= & yystack[0] ) {
				ip = &yyact[yypa[*yys]];
				while( ip[1]!=YYNOCHAR )
					ip += 2;
				if( (*ip&~YYAMASK) == (YYSHIFTACT<<YYACTSH) ) {
					yystate = *ip&YYAMASK;
					goto stack;
				}
#ifdef YYDEBUG
				if( yydebug )
					fprintf(stderr, "error recovery leaves state %d, uncovers %d\n", *yys, yys[-1]);
#endif
				yys--;
				yyv--;
			}
#ifdef YYDEBUG
			if( yydebug )
				fprintf(stderr, "no shift on error; abort\n");
#endif
			return(1);

		case 3:
#ifdef YYDEBUG
			if( yydebug )
				fprintf(stderr, "Error recovery clobbers char %o\n", yychar);
#endif
			if( yychar==YYEOFVAL )
				return(1);
			yychar = YYNOCHAR;
			goto read;
		}

	case YYREDACT:
		pno = act&YYAMASK;
#ifdef YYDEBUG
		if( yydebug )
			fprintf(stdout, "reduce %d\n", pno);
#endif
		yypvt = yyv;
		yyv -= yypn[pno];
		yys -= yypn[pno];
		yyval = yyv[1];
		switch(pno) {

case 1: {

#line 66 "sh.y"

		sesp->s_node = NULL;
		reset (RCMD);
		NOTREACHED;
	}break;

case 2: {

#line 72 "sh.y"

		sesp->s_node = yypvt[0].yu_node;
		reset (errflag ? RERR : RCMD);
		NOTREACHED;
	}break;

case 3: {

#line 77 "sh.y"

		keyflush ();
		keyflag = 1;
		reset (RERR);
		NOTREACHED;
	}break;

case 9: {

#line 95 "sh.y"
	yyval.yu_nval = NWHILE; }break;

case 10: {

#line 96 "sh.y"
	yyval.yu_nval = NUNTIL; }break;

case 22: {

#line 118 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 23: {

#line 121 "sh.y"

		yyval.yu_node = node(NBACK, yypvt[-1].yu_node, NULL);
	}break;

case 24: {

#line 124 "sh.y"

		yyval.yu_node = yypvt[-1].yu_node;
	}break;

case 25: {

#line 127 "sh.y"

		yyval.yu_node = node(NBACK, yypvt[-2].yu_node, yypvt[0].yu_node);
	}break;

case 26: {

#line 130 "sh.y"

		yyval.yu_node = node(NLIST, yypvt[-2].yu_node, yypvt[0].yu_node);
	}break;

case 27: {

#line 136 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 28: {

#line 139 "sh.y"

		yyval.yu_node = node(NORF, yypvt[-2].yu_node, yypvt[0].yu_node);
	}break;

case 29: {

#line 142 "sh.y"

		yyval.yu_node = node(NANDF, yypvt[-2].yu_node, yypvt[0].yu_node);
	}break;

case 30: {

#line 148 "sh.y"

		yyval.yu_node = node(NPIPE, yypvt[-2].yu_node, yypvt[0].yu_node);
	}break;

case 31: {

#line 151 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 32: {

#line 163 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
		keypop ();
	}break;

case 33: {

#line 169 "sh.y"

		keypush ();
		keyflag = 1;
	}break;

case 34: {

#line 176 "sh.y"

		yyval.yu_node = node (NCOMS, yypvt[0].yu_node, NULL);
	}break;

case 35: {

#line 179 "sh.y"

		yyval.yu_node = node (NCOMS, yypvt[0].yu_node, NULL);
	}break;

case 36: {

#line 182 "sh.y"

		yypvt[-1].yu_node->n_next = yypvt[0].yu_node;
		yyval.yu_node = node (NCOMS, yypvt[-1].yu_node, NULL);
	}break;

case 37: {

#line 186 "sh.y"

		yyval.yu_node = node (NCOMS, yypvt[0].yu_node, NULL);
	}break;

case 38: {

#line 189 "sh.y"

		yyval.yu_node = node (NRET, yypvt[0].yu_strp, NULL);
	}break;

case 39: {

#line 192 "sh.y"

		yyval.yu_node = node (NRET, "", NULL);
	}break;

case 40: {

#line 198 "sh.y"

		yyval.yu_node = node (NCTRL, yypvt[0].yu_node, NULL);
	}break;

case 41: {

#line 204 "sh.y"

		yyval.yu_node = node (NCTRL, node (NFUNC, yypvt[-5].yu_strp, yypvt[-1].yu_node), NULL);
	}break;

case 42: {

#line 210 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 43: {

#line 213 "sh.y"

		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
	}break;

case 44: {

#line 219 "sh.y"

		NODE	      *	tmp = yypvt[-2].yu_node;
		/*
		 * NIGEL: The structure of the nodes that have to be generated
		 * is flat, but now the grammar is structured; deal with this.
		 */

		while (tmp->n_next)
			tmp = tmp->n_next;

		(tmp->n_next = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
		yyval.yu_node = yypvt[-2].yu_node;
	}break;

case 45: {

#line 232 "sh.y"

		NODE	      *	tmp = yypvt[-1].yu_node;
		/*
		 * NIGEL: The structure of the nodes that have to be generated
		 * is flat, but now the grammar is structured; deal with this.
		 */

		while (tmp->n_next)
			tmp = tmp->n_next;

		tmp->n_next = yypvt[0].yu_node;
		yyval.yu_node = yypvt[-1].yu_node;
	}break;

case 46: {

#line 245 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 47: {

#line 248 "sh.y"

		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
	}break;

case 48: {

#line 251 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 49: {

#line 257 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 50: {

#line 260 "sh.y"

		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
	}break;

case 51: {

#line 263 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 52: {

#line 266 "sh.y"

		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
	}break;

case 53: {

#line 272 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
		keyflag = 0;
	}break;

case 54: {

#line 279 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
		keyflag = 0;
	}break;

case 55: {

#line 294 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 56: {

#line 297 "sh.y"

		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
	}break;

case 57: {

#line 300 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 58: {

#line 303 "sh.y"

		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
	}break;

case 59: {

#line 306 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 60: {

#line 309 "sh.y"

		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
	}break;

case 61: {

#line 315 "sh.y"

		yyval.yu_node = node (NARGS, duplstr (strt, 0), NULL);
	}break;

case 77: {

#line 406 "sh.y"

		yyval.yu_node = node (NIORS, yypvt[0].yu_strp, NULL);
	}break;

case 78: {

#line 411 "sh.y"

		yyval.yu_strp = duplstr (strt, 0);
	}break;

case 79: {

#line 416 "sh.y"

		yyval.yu_node = node (NARGS, yypvt[0].yu_strp, NULL);
	}break;

case 80: {

#line 421 "sh.y"

		yyval.yu_strp = duplstr (strt, 0);
	}break;

case 81: {

#line 427 "sh.y"

		yyval.yu_node = node (NASSG, yypvt[0].yu_strp, NULL);
	}break;

case 82: {

#line 432 "sh.y"

		yyval.yu_strp = duplstr (strt, 0);
	}break;

case 83: {

#line 438 "sh.y"

		yyval.yu_node = node(NFOR, yypvt[-4].yu_strp, node(NFOR2, yypvt[-3].yu_node, node(NLIST, yypvt[-1].yu_node, NULL)));
		yyval.yu_node->n_next->n_next->n_next = yyval.yu_node->n_next;
	}break;

case 84: {

#line 442 "sh.y"

		yyval.yu_node = node(NFOR, yypvt[-3].yu_strp, node(NFOR2, yypvt[-2].yu_node, node(NLIST, yypvt[-1].yu_node, NULL)));
		yyval.yu_node->n_next->n_next->n_next = yyval.yu_node->n_next;
	}break;

case 85: {

#line 446 "sh.y"

		yyval.yu_node = node(NCASE, yypvt[-4].yu_strp, yypvt[-1].yu_node);
	}break;

case 86: {

#line 449 "sh.y"

		yyval.yu_node = node(NCASE, yypvt[-3].yu_strp, yypvt[-1].yu_node);
	}break;

case 87: {

#line 452 "sh.y"

		yyval.yu_node = node(yypvt[-3].yu_nval, yypvt[-2].yu_node, node(NLIST, yypvt[-1].yu_node, NULL));
		yyval.yu_node->n_next->n_next = yyval.yu_node;
	}break;

case 88: {

#line 456 "sh.y"

		yyval.yu_node = node(NIF, node(NNULL, yypvt[-4].yu_node, yypvt[-2].yu_node), yypvt[-1].yu_node);
	}break;

case 89: {

#line 459 "sh.y"

		yyval.yu_node = node(NPARN, yypvt[-1].yu_node, NULL);
	}break;

case 90: {

#line 462 "sh.y"

		yyval.yu_node = node(NBRAC, yypvt[-1].yu_node, NULL);
	}break;

case 91: {

#line 468 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 92: {

#line 471 "sh.y"

		yyval.yu_node = node(NARGS, "\"$@@\"", NULL);
	}break;

case 93: {

#line 477 "sh.y"

		yyval.yu_node = node(NARGS, yypvt[-1].yu_strp, yypvt[0].yu_node);
	}break;

case 94: {

#line 480 "sh.y"

		yyval.yu_node = NULL;
	}break;

case 95: {

#line 486 "sh.y"

		register NODE *np;

		for (np=yypvt[-2].yu_node; np->n_next; np=np->n_next)
			;
		np->n_next = yypvt[0].yu_node;
		yyval.yu_node = yypvt[-2].yu_node;
	}break;

case 96: {

#line 494 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 97: {

#line 497 "sh.y"

		yyval.yu_node = NULL;
	}break;

case 98: {

#line 503 "sh.y"

		yyval.yu_node = node(NCASE2, yypvt[0].yu_node, yypvt[-2].yu_node);
	}break;

case 99: {

#line 509 "sh.y"

		yyval.yu_node = node(NCASE3, yypvt[-2].yu_strp, yypvt[0].yu_node);
	}break;

case 100: {

#line 512 "sh.y"

		yyval.yu_node = node(NCASE3, yypvt[0].yu_strp, NULL);
	}break;

case 101: {

#line 518 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 102: {

#line 521 "sh.y"

		yyval.yu_node = NULL;
	}break;

case 103: {

#line 527 "sh.y"

		yyval.yu_node = node(NIF, node(NNULL, yypvt[-3].yu_node, yypvt[-1].yu_node), yypvt[0].yu_node);
	}break;

case 104: {

#line 530 "sh.y"

		yyval.yu_node = node(NELSE, yypvt[0].yu_node, NULL);
	}break;

case 105: {

#line 533 "sh.y"

		yyval.yu_node = NULL;
	}break;

case 106: {

#line 539 "sh.y"

		yyval.yu_node = yypvt[0].yu_node;
	}break;

case 107: {

#line 543 "sh.y"

		yyval.yu_node = NULL;
	}break;

case 108: {

#line 549 "sh.y"

		yyval.yu_node = node(NLIST, yypvt[-2].yu_node, yypvt[0].yu_node);
	}break;

case 109: {

#line 552 "sh.y"

		yyval.yu_node = yypvt[-1].yu_node;
	}break;

		}
		ip = &yygo[ yypgo[yypdnt[pno]] ];
		while( *ip!=*yys && *ip!=YYNOCHAR )
			ip += 2;
		yystate = ip[1];
		goto stack;
	}
}




@


1.2
log
@Nigel: 4.2 alpha update
@
text
@d20 1
a20 1
#line 569 "sh.y"
d481 1
a481 1
		reset(RCMD);
d490 1
a490 1
		reset(errflag ? RERR : RCMD);
d498 1
a498 1
		keyflush();
d500 1
a500 1
		reset(RERR);
d506 2
a507 2
#line 94 "sh.y"
	yyval.yu_nval = NWHILE;	}break;
d511 2
a512 2
#line 95 "sh.y"
	yyval.yu_nval = NUNTIL;	}break;
d516 1
a516 1
#line 117 "sh.y"
d523 1
a523 1
#line 120 "sh.y"
d530 1
a530 1
#line 123 "sh.y"
d537 1
a537 1
#line 126 "sh.y"
d544 1
a544 1
#line 129 "sh.y"
d551 1
a551 1
#line 135 "sh.y"
d558 1
a558 1
#line 138 "sh.y"
d565 1
a565 1
#line 141 "sh.y"
d572 1
a572 1
#line 147 "sh.y"
d579 1
a579 1
#line 150 "sh.y"
d586 1
a586 1
#line 162 "sh.y"
d594 1
a594 1
#line 168 "sh.y"
d602 1
a602 1
#line 175 "sh.y"
d609 1
a609 1
#line 178 "sh.y"
d616 1
a616 1
#line 181 "sh.y"
d624 1
a624 1
#line 185 "sh.y"
d631 1
a631 1
#line 188 "sh.y"
d638 1
a638 1
#line 191 "sh.y"
d645 1
a645 1
#line 197 "sh.y"
d652 1
a652 1
#line 203 "sh.y"
d659 1
a659 1
#line 209 "sh.y"
d666 1
a666 1
#line 212 "sh.y"
d673 1
a673 1
#line 218 "sh.y"
d690 1
a690 1
#line 231 "sh.y"
d707 1
a707 1
#line 244 "sh.y"
d714 1
a714 1
#line 247 "sh.y"
d721 1
a721 1
#line 250 "sh.y"
d728 1
a728 1
#line 256 "sh.y"
d735 1
a735 1
#line 259 "sh.y"
d742 1
a742 1
#line 262 "sh.y"
d749 1
a749 1
#line 265 "sh.y"
d756 1
a756 1
#line 271 "sh.y"
d764 1
a764 1
#line 278 "sh.y"
d772 1
a772 1
#line 293 "sh.y"
d779 1
a779 1
#line 296 "sh.y"
d786 1
a786 1
#line 299 "sh.y"
d793 1
a793 1
#line 302 "sh.y"
d800 1
a800 1
#line 305 "sh.y"
d807 1
a807 1
#line 308 "sh.y"
d814 1
a814 1
#line 314 "sh.y"
d821 1
a821 1
#line 405 "sh.y"
d828 1
a828 1
#line 410 "sh.y"
d835 1
a835 1
#line 415 "sh.y"
d842 1
a842 1
#line 420 "sh.y"
d849 1
a849 1
#line 426 "sh.y"
d856 1
a856 1
#line 431 "sh.y"
d863 1
a863 1
#line 437 "sh.y"
d871 1
a871 1
#line 441 "sh.y"
d879 1
a879 1
#line 445 "sh.y"
d886 1
a886 1
#line 448 "sh.y"
d893 1
a893 1
#line 451 "sh.y"
d901 1
a901 1
#line 455 "sh.y"
d908 1
a908 1
#line 458 "sh.y"
d915 1
a915 1
#line 461 "sh.y"
d922 1
a922 1
#line 467 "sh.y"
d929 1
a929 1
#line 470 "sh.y"
d936 1
a936 1
#line 476 "sh.y"
d943 1
a943 1
#line 479 "sh.y"
d950 1
a950 1
#line 485 "sh.y"
d962 1
a962 1
#line 493 "sh.y"
d969 1
a969 1
#line 496 "sh.y"
d976 1
a976 1
#line 502 "sh.y"
d983 1
a983 1
#line 508 "sh.y"
d990 1
a990 1
#line 511 "sh.y"
d997 1
a997 1
#line 517 "sh.y"
d1004 1
a1004 1
#line 520 "sh.y"
d1011 1
a1011 1
#line 526 "sh.y"
d1018 1
a1018 1
#line 529 "sh.y"
d1025 1
a1025 1
#line 532 "sh.y"
d1032 1
a1032 1
#line 538 "sh.y"
d1039 1
a1039 1
#line 542 "sh.y"
d1046 1
a1046 1
#line 548 "sh.y"
d1053 1
a1053 1
#line 551 "sh.y"
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
#line 553 "sh.y"
d96 3
d151 16
a166 16
unsigned char yypdnt[118] = {
0, 1, 1, 2, 2, 2, 4, 6,
7, 8, 9, 9, 10, 10, 11, 11,
13, 14, 15, 16, 17, 18, 19, 3,
3, 3, 3, 3, 20, 20, 20, 21,
21, 22, 23, 24, 24, 24, 24, 24,
24, 26, 28, 27, 27, 25, 25, 25,
25, 25, 33, 33, 33, 33, 36, 34,
35, 35, 35, 35, 35, 35, 39, 40,
40, 40, 40, 40, 40, 40, 40, 40,
40, 40, 40, 40, 40, 40, 32, 41,
38, 29, 37, 42, 30, 30, 30, 30,
30, 30, 30, 30, 43, 43, 48, 48,
45, 45, 45, 49, 50, 50, 44, 44,
47, 47, 47, 46, 46, 31, 31, 12,
12, 12, 5, 5, 51, 51 
d168 9
a176 9
unsigned char yypn[118] = {
2, 2, 0, 1, 2, 2, 2, 2,
2, 2, 2, 2, 2, 3, 1, 2,
2, 2, 2, 2, 2, 2, 2, 1,
2, 2, 3, 3, 1, 3, 3, 3,
1, 2, 0, 1, 1, 2, 1, 2,
1, 1, 6, 1, 2, 3, 2, 1,
2, 1, 1, 2, 1, 2, 1, 1,
1, 2, 1, 2, 1, 2, 1, 1,
d179 5
a183 5
1, 1, 1, 1, 6, 5, 6, 5,
4, 6, 3, 3, 2, 0, 2, 0,
3, 1, 0, 3, 3, 1, 2, 0,
5, 2, 0, 1, 0, 3, 2, 1,
1, 2, 1, 0, 1, 2 
d185 8
a192 8
unsigned char yypgo[52] = {
0, 0, 2, 4, 12, 14, 48, 52,
54, 56, 58, 60, 64, 70, 72, 74,
76, 78, 82, 84, 86, 92, 96, 98,
100, 102, 104, 106, 108, 110, 126, 128,
140, 152, 158, 160, 170, 172, 180, 184,
186, 188, 190, 192, 194, 200, 206, 220,
224, 228, 230, 234 
d194 32
a225 32
unsigned int yygo[246] = {
YYOTHERS, 0x1, YYOTHERS, 0x5, 0x1, 0x6, 0xd, 0x31,
0xe, 0x32, YYOTHERS, 0x43, YYOTHERS, 0x20, 0x10, 0x36,
0x13, 0x39, 0x18, 0x3d, 0x1b, 0x3e, 0x1d, 0x40,
0x1e, 0x41, 0x1f, 0x42, 0x43, 0x6d, 0x4b, 0x77,
0x6f, 0x88, 0x71, 0x8b, 0x8a, 0x9e, 0x91, 0xa1,
0x93, 0xa3, 0x99, 0xa7, 0x9a, 0xa8, YYOTHERS, 0x34,
0xa9, 0xad, YYOTHERS, 0x70, YYOTHERS, 0x9b, YYOTHERS, 0x9c,
YYOTHERS, 0x21, YYOTHERS, 0x72, 0x69, 0x82, YYOTHERS, 0x68,
0x66, 0x7c, 0x6c, 0x85, YYOTHERS, 0x69, YYOTHERS, 0x11,
YYOTHERS, 0x12, YYOTHERS, 0x14, YYOTHERS, 0x22, 0x77, 0x8e,
YYOTHERS, 0x23, YYOTHERS, 0x94, YYOTHERS, 0x92, 0x11, 0x37,
0x12, 0x38, YYOTHERS, 0x7, 0x14, 0x3a, YYOTHERS, 0x8,
YYOTHERS, 0x9, YYOTHERS, 0xa, YYOTHERS, 0x24, YYOTHERS, 0x25,
YYOTHERS, 0x26, YYOTHERS, 0x49, YYOTHERS, 0x27, 0xa, 0x28,
0x16, 0x3b, 0x17, 0x3c, 0x1c, 0x3f, 0x2b, 0x4d,
0x6b, 0x83, 0x83, 0x83, YYOTHERS, 0x7e, YYOTHERS, 0x29,
0x20, 0x44, 0x21, 0x45, 0x6e, 0x87, 0x8e, 0x9f,
0x9b, 0xa9, YYOTHERS, 0x46, 0xa, 0x2a, 0x26, 0x4a,
0x2a, 0x2a, 0x2d, 0x2a, 0x49, 0x76, YYOTHERS, 0x5f,
0x2a, 0x4c, 0x2d, 0x64, YYOTHERS, 0x2b, YYOTHERS, 0x4e,
0x4e, 0x78, 0x5f, 0x79, 0x61, 0x7a, 0x62, 0x7b,
YYOTHERS, 0x60, YYOTHERS, 0x2c, 0xa, 0x2d, 0x2a, 0x2d,
0x2d, 0x2d, YYOTHERS, 0x61, 0x2b, 0x4f, YYOTHERS, 0x2e,
YYOTHERS, 0x62, YYOTHERS, 0x63, YYOTHERS, 0x2f, YYOTHERS, 0x30,
YYOTHERS, 0x6c, 0x6c, 0x86, 0x85, 0x97, YYOTHERS, 0x73,
0x82, 0x95, 0x92, 0xa2, YYOTHERS, 0x7f, 0x23, 0x48,
0x70, 0x89, 0x72, 0x8c, 0x94, 0xa4, 0x9c, 0xaa,
0xad, 0xae, YYOTHERS, 0x47, 0xae, 0xaf, YYOTHERS, 0x9d,
0x83, 0x96, YYOTHERS, 0x84, YYOTHERS, 0x80, 0x8f, 0xa0,
YYOTHERS, 0x81, 0x3b, 0x6a, 0x43, 0x6e, 0x66, 0x6a,
0x67, 0x7d, 0x6c, 0x6a, YYOTHERS, 0x35 
d227 11
a237 11
unsigned short yypa[176] = {
0, 2, 30, 34, 38, 40, 42, 46,
52, 58, 62, 86, 88, 90, 114, 138,
138, 142, 142, 138, 144, 146, 148, 148,
138, 152, 154, 138, 156, 138, 138, 138,
144, 144, 160, 164, 168, 170, 172, 176,
178, 182, 184, 190, 194, 230, 236, 238,
240, 242, 244, 246, 248, 250, 254, 256,
258, 260, 262, 264, 272, 276, 278, 280,
282, 284, 286, 138, 288, 292, 296, 298,
302, 306, 310, 138, 312, 314, 316, 352,
d239 11
a249 11
370, 372, 374, 376, 378, 380, 382, 384,
420, 422, 458, 494, 496, 498, 500, 506,
510, 514, 518, 522, 526, 534, 536, 138,
560, 568, 574, 578, 582, 584, 586, 588,
592, 594, 596, 598, 600, 602, 606, 610,
614, 618, 510, 522, 622, 292, 624, 628,
630, 632, 138, 638, 640, 642, 144, 644,
648, 138, 510, 138, 650, 656, 660, 662,
666, 138, 138, 144, 668, 672, 676, 678,
682, 684, 686, 688, 690, 692, 694, 696,
698, 288, 700, 702, 704, 560, 706, 712
d251 85
a335 20
unsigned int yyact[714] = {
0x2002, YYOTHERS, 0x2, YYEOFVAL, 0x4, 0xa, 0x2022, 0x101,
0x2022, 0x102, 0x2022, 0x10b, 0x2022, 0x10c, 0x2022, 0x10e,
0x2022, 0x10f, 0x2022, 0x111, 0x2022, 0x114, 0x2022, 0x116,
0x2022, 0x117, 0x2022, 0x28, 0x3, YYOTHERS, 0x4000, YYEOFVAL,
0x6000, YYOTHERS, 0xb, 0xa, 0x6000, YYOTHERS, 0x2003, YYOTHERS,
0x2001, YYOTHERS, 0xc, 0xa, 0x6000, YYOTHERS, 0xd, 0x3b,
0xe, 0x26, 0x2017, YYOTHERS, 0xf, 0x100, 0x10, 0x112,
0x201c, YYOTHERS, 0x13, 0x7c, 0x2020, YYOTHERS, 0x15, 0x101,
0x16, 0x102, 0x17, 0x10b, 0x18, 0x10c, 0x19, 0x10e,
0x1a, 0x10f, 0x1b, 0x111, 0x1c, 0x114, 0x1d, 0x116,
0x1e, 0x117, 0x1f, 0x28, 0x6000, YYOTHERS, 0x2005, YYOTHERS,
0x2004, YYOTHERS, 0x2022, 0x101, 0x2022, 0x102, 0x2022, 0x10b,
0x2022, 0x10c, 0x2022, 0x10e, 0x2022, 0x10f, 0x2022, 0x111,
0x2022, 0x114, 0x2022, 0x116, 0x2022, 0x117, 0x2022, 0x28,
0x2019, YYOTHERS, 0x2022, 0x101, 0x2022, 0x102, 0x2022, 0x10b,
0x2022, 0x10c, 0x2022, 0x10e, 0x2022, 0x10f, 0x2022, 0x111,
0x2022, 0x114, 0x2022, 0x116, 0x2022, 0x117, 0x2022, 0x28,
0x2018, YYOTHERS, 0x33, 0xa, 0x2073, YYOTHERS, 0x2022, YYOTHERS,
0x2022, YYOTHERS, 0x2053, YYOTHERS, 0x1a, 0x10f, 0x6000, YYOTHERS,
d336 1
a336 1
0x204f, YYOTHERS, 0x2051, YYOTHERS, 0x1a, 0x10f, 0x2028, YYOTHERS,
d337 4
a340 70
0x206c, 0x29, 0x2022, YYOTHERS, 0x206c, 0x103, 0x2022, YYOTHERS,
0x2021, YYOTHERS, 0x2023, YYOTHERS, 0x19, 0x10e, 0x2024, YYOTHERS,
0x2026, YYOTHERS, 0x4b, 0x113, 0x2050, YYOTHERS, 0x2029, YYOTHERS,
0x15, 0x101, 0x19, 0x10e, 0x2032, YYOTHERS, 0x1a, 0x10f,
0x202f, YYOTHERS, 0x15, 0x101, 0x50, 0x102, 0x51, 0x104,
0x52, 0x105, 0x53, 0x107, 0x54, 0x108, 0x55, 0x109,
0x56, 0x10a, 0x57, 0x10b, 0x58, 0x10c, 0x59, 0x10d,
0x19, 0x10e, 0x5a, 0x10f, 0x5b, 0x114, 0x5c, 0x115,
0x5d, 0x116, 0x5e, 0x117, 0x2031, YYOTHERS, 0x15, 0x101,
0x19, 0x10e, 0x2034, YYOTHERS, 0x2036, YYOTHERS, 0x204e, YYOTHERS,
0x2052, YYOTHERS, 0x201b, YYOTHERS, 0x201a, YYOTHERS, 0x2074, YYOTHERS,
0x2011, YYOTHERS, 0x65, 0xa, 0x2072, YYOTHERS, 0x2010, YYOTHERS,
0x201d, YYOTHERS, 0x201e, YYOTHERS, 0x2012, YYOTHERS, 0x201f, YYOTHERS,
0x66, 0x10d, 0x33, 0xa, 0x67, 0x3b, 0x6000, YYOTHERS,
0x6b, 0x10d, 0x205d, YYOTHERS, 0x2006, YYOTHERS, 0x2014, YYOTHERS,
0x2027, YYOTHERS, 0x200b, YYOTHERS, 0x200a, YYOTHERS, 0x2013, YYOTHERS,
0x6f, 0x115, 0x6000, YYOTHERS, 0x71, 0x104, 0x2067, YYOTHERS,
0x206b, YYOTHERS, 0x74, 0x29, 0x6000, YYOTHERS, 0x75, 0x103,
0x6000, YYOTHERS, 0x19, 0x10e, 0x2025, YYOTHERS, 0x202b, YYOTHERS,
0x2033, YYOTHERS, 0x2050, YYOTHERS, 0x15, 0x101, 0x50, 0x102,
0x51, 0x104, 0x52, 0x105, 0x53, 0x107, 0x54, 0x108,
0x55, 0x109, 0x56, 0x10a, 0x57, 0x10b, 0x58, 0x10c,
0x59, 0x10d, 0x19, 0x10e, 0x5a, 0x10f, 0x5b, 0x114,
0x5c, 0x115, 0x5d, 0x116, 0x5e, 0x117, 0x202e, YYOTHERS,
0x2037, YYOTHERS, 0x2040, YYOTHERS, 0x2041, YYOTHERS, 0x2042, YYOTHERS,
0x2043, YYOTHERS, 0x2044, YYOTHERS, 0x2045, YYOTHERS, 0x2046, YYOTHERS,
0x2047, YYOTHERS, 0x2048, YYOTHERS, 0x2049, YYOTHERS, 0x203f, YYOTHERS,
0x204a, YYOTHERS, 0x204b, YYOTHERS, 0x204c, YYOTHERS, 0x204d, YYOTHERS,
0x15, 0x101, 0x50, 0x102, 0x51, 0x104, 0x52, 0x105,
0x53, 0x107, 0x54, 0x108, 0x55, 0x109, 0x56, 0x10a,
0x57, 0x10b, 0x58, 0x10c, 0x59, 0x10d, 0x19, 0x10e,
0x5a, 0x10f, 0x5b, 0x114, 0x5c, 0x115, 0x5d, 0x116,
0x5e, 0x117, 0x2038, YYOTHERS, 0x2030, YYOTHERS, 0x15, 0x101,
0x50, 0x102, 0x51, 0x104, 0x52, 0x105, 0x53, 0x107,
0x54, 0x108, 0x55, 0x109, 0x56, 0x10a, 0x57, 0x10b,
0x58, 0x10c, 0x59, 0x10d, 0x19, 0x10e, 0x5a, 0x10f,
0x5b, 0x114, 0x5c, 0x115, 0x5d, 0x116, 0x5e, 0x117,
0x203c, YYOTHERS, 0x15, 0x101, 0x50, 0x102, 0x51, 0x104,
0x52, 0x105, 0x53, 0x107, 0x54, 0x108, 0x55, 0x109,
0x56, 0x10a, 0x57, 0x10b, 0x58, 0x10c, 0x59, 0x10d,
0x19, 0x10e, 0x5a, 0x10f, 0x5b, 0x114, 0x5c, 0x115,
0x5d, 0x116, 0x5e, 0x117, 0x203a, YYOTHERS, 0x203e, YYOTHERS,
0x2035, YYOTHERS, 0x2075, YYOTHERS, 0x33, 0xa, 0x67, 0x3b,
0x200e, YYOTHERS, 0x33, 0xa, 0x2070, YYOTHERS, 0x1a, 0x10f,
0x2062, YYOTHERS, 0x66, 0x10d, 0x6000, YYOTHERS, 0x65, 0xa,
0x206f, YYOTHERS, 0x1a, 0x10f, 0x205f, YYOTHERS, 0x71, 0x104,
0x33, 0xa, 0x67, 0x3b, 0x2067, YYOTHERS, 0x206e, YYOTHERS,
0x65, 0xa, 0x2072, 0x103, 0x2072, 0x104, 0x2072, 0x105,
0x2072, 0x106, 0x2072, 0x107, 0x2072, 0x108, 0x2072, 0x109,
0x2072, 0x10a, 0x2072, 0x115, 0x2072, 0x29, 0x2022, YYOTHERS,
0x206c, 0x107, 0x206c, 0x108, 0x206c, 0x10a, 0x2022, YYOTHERS,
0x33, 0xa, 0x8a, 0x3b, 0x2073, YYOTHERS, 0x206c, 0x105,
0x2022, YYOTHERS, 0x8d, 0x105, 0x6000, YYOTHERS, 0x205a, YYOTHERS,
0x205b, YYOTHERS, 0x202c, YYOTHERS, 0x1b, 0x111, 0x6000, YYOTHERS,
0x202d, YYOTHERS, 0x2039, YYOTHERS, 0x203d, YYOTHERS, 0x203b, YYOTHERS,
0x200f, YYOTHERS, 0x65, 0xa, 0x2071, YYOTHERS, 0x8f, 0x7c,
0x2065, YYOTHERS, 0x90, 0x109, 0x6000, YYOTHERS, 0x91, 0x106,
0x2061, YYOTHERS, 0x93, 0x29, 0x6000, YYOTHERS, 0x205c, YYOTHERS,
0x98, 0x105, 0x6000, YYOTHERS, 0x206d, YYOTHERS, 0x2007, YYOTHERS,
0x99, 0x107, 0x9a, 0x108, 0x206a, YYOTHERS, 0x200c, YYOTHERS,
0x2066, YYOTHERS, 0x2058, YYOTHERS, 0x1a, 0x10f, 0x6000, YYOTHERS,
0x2057, YYOTHERS, 0x206c, 0x106, 0x206c, 0x109, 0x2022, YYOTHERS,
0xa5, 0x109, 0x6000, YYOTHERS, 0x205e, YYOTHERS, 0xa6, 0x105,
0x6000, YYOTHERS, 0x2055, YYOTHERS, 0x206c, 0x10a, 0x2022, YYOTHERS,
0xab, 0x10a, 0x6000, YYOTHERS, 0x200d, YYOTHERS, 0xac, 0x103,
0x6000, YYOTHERS, 0x2064, YYOTHERS, 0x2016, YYOTHERS, 0x2060, YYOTHERS,
0x2015, YYOTHERS, 0x2063, YYOTHERS, 0x2056, YYOTHERS, 0x2054, YYOTHERS,
0x2008, YYOTHERS, 0x2009, YYOTHERS, 0x2069, YYOTHERS, 0x2059, YYOTHERS,
0x202a, YYOTHERS, 0x99, 0x107, 0x9a, 0x108, 0x206a, YYOTHERS,
0x2068, YYOTHERS 
d476 1
a476 1
case 3: {
d478 1
a478 1
#line 71 "sh.y"
d485 1
a485 1
case 4: {
d487 1
a487 1
#line 77 "sh.y"
d489 1
a489 1
		sesp->s_node = yypvt[-1].yu_node;
d494 1
a494 1
case 5: {
d496 1
a496 1
#line 82 "sh.y"
d504 1
a504 1
case 10: {
d506 1
a506 1
#line 98 "sh.y"
d509 1
a509 1
case 11: {
d511 1
a511 1
#line 99 "sh.y"
d514 1
a514 1
case 23: {
d516 1
a516 1
#line 121 "sh.y"
d521 1
a521 1
case 24: {
d523 1
a523 1
#line 124 "sh.y"
d528 1
a528 1
case 25: {
d530 1
a530 1
#line 127 "sh.y"
d535 1
a535 1
case 26: {
d537 1
a537 1
#line 130 "sh.y"
d542 1
a542 1
case 27: {
d544 1
a544 1
#line 133 "sh.y"
d549 1
a549 1
case 28: {
d551 1
a551 1
#line 139 "sh.y"
d556 1
a556 1
case 29: {
d558 1
a558 1
#line 142 "sh.y"
d563 1
a563 1
case 30: {
d565 1
a565 1
#line 145 "sh.y"
d570 1
a570 1
case 31: {
d572 1
a572 1
#line 151 "sh.y"
d577 1
a577 1
case 32: {
d579 1
a579 1
#line 154 "sh.y"
d584 1
a584 1
case 33: {
d586 1
a586 1
#line 166 "sh.y"
d592 1
a592 1
case 34: {
d594 1
a594 1
#line 172 "sh.y"
d600 7
d609 1
a609 1
#line 179 "sh.y"
d616 1
a616 1
#line 182 "sh.y"
d618 2
a619 1
		yyval.yu_node = node (NCOMS, yypvt[0].yu_node, NULL);
d626 1
a626 2
		yypvt[-1].yu_node->n_next = yypvt[0].yu_node;
		yyval.yu_node = node (NCOMS, yypvt[-1].yu_node, NULL);
d631 1
a631 1
#line 189 "sh.y"
d633 1
a633 1
		yyval.yu_node = node (NCOMS, yypvt[0].yu_node, NULL);
d638 1
a638 1
#line 192 "sh.y"
d640 1
a640 1
		yyval.yu_node = node (NRET, yypvt[0].yu_strp, NULL);
d645 1
a645 1
#line 195 "sh.y"
d647 1
a647 1
		yyval.yu_node = node (NRET, "", NULL);
d652 1
a652 1
#line 201 "sh.y"
d654 1
a654 1
		yyval.yu_node = node (NCTRL, yypvt[0].yu_node, NULL);
d659 1
a659 1
#line 207 "sh.y"
d661 1
a661 1
		yyval.yu_node = node (NCTRL, node (NFUNC, yypvt[-5].yu_strp, yypvt[-1].yu_node), NULL);
d666 1
a666 1
#line 213 "sh.y"
d668 1
a668 1
		yyval.yu_node = yypvt[0].yu_node;
d673 1
a673 1
#line 216 "sh.y"
d675 11
a685 1
		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d690 1
a690 1
#line 222 "sh.y"
d692 11
a702 1
		((yyval.yu_node = yypvt[-2].yu_node)->n_next = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d707 1
a707 1
#line 225 "sh.y"
d709 1
a709 1
		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d714 1
a714 1
#line 228 "sh.y"
d716 1
a716 1
		yyval.yu_node = yypvt[0].yu_node;
d721 1
a721 1
#line 231 "sh.y"
d723 1
a723 1
		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d728 1
a728 1
#line 234 "sh.y"
d735 1
a735 1
#line 240 "sh.y"
d737 1
a737 1
		yyval.yu_node = yypvt[0].yu_node;
d742 1
a742 1
#line 243 "sh.y"
d744 1
a744 1
		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d749 1
a749 1
#line 246 "sh.y"
d751 1
a751 1
		yyval.yu_node = yypvt[0].yu_node;
d756 1
a756 1
#line 249 "sh.y"
d758 2
a759 1
		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d764 1
a764 1
#line 255 "sh.y"
d772 1
a772 1
#line 262 "sh.y"
a774 1
		keyflag = 0;
d779 1
a779 1
#line 277 "sh.y"
d781 1
a781 1
		yyval.yu_node = yypvt[0].yu_node;
d786 1
a786 1
#line 280 "sh.y"
d788 1
a788 1
		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d793 1
a793 1
#line 283 "sh.y"
d795 1
a795 1
		yyval.yu_node = yypvt[0].yu_node;
d800 1
a800 1
#line 286 "sh.y"
d802 1
a802 1
		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d807 1
a807 1
#line 289 "sh.y"
d809 1
a809 1
		yyval.yu_node = yypvt[0].yu_node;
d814 1
a814 1
#line 292 "sh.y"
d816 1
a816 1
		(yyval.yu_node = yypvt[-1].yu_node)->n_next = yypvt[0].yu_node;
d819 1
a819 1
case 62: {
d821 1
a821 1
#line 298 "sh.y"
d823 1
a823 1
		yyval.yu_node = node (NARGS, duplstr (strt, 0), NULL);
d828 1
a828 1
#line 389 "sh.y"
d830 1
a830 1
		yyval.yu_node = node (NIORS, yypvt[0].yu_strp, NULL);
d835 1
a835 1
#line 394 "sh.y"
d837 1
a837 1
		yyval.yu_strp = duplstr (strt, 0);
d842 1
a842 1
#line 399 "sh.y"
d844 1
a844 1
		yyval.yu_node = node (NARGS, yypvt[0].yu_strp, NULL);
d849 1
a849 1
#line 404 "sh.y"
d851 1
a851 1
		yyval.yu_strp = duplstr (strt, 0);
d856 1
a856 1
#line 410 "sh.y"
d858 1
a858 1
		yyval.yu_node = node (NASSG, yypvt[0].yu_strp, NULL);
d863 1
a863 1
#line 415 "sh.y"
a864 7
		yyval.yu_strp = duplstr (strt, 0);
	}break;

case 84: {

#line 421 "sh.y"

d869 1
a869 1
case 85: {
d871 1
a871 1
#line 425 "sh.y"
d877 1
a877 1
case 86: {
d879 1
a879 1
#line 429 "sh.y"
d884 1
a884 1
case 87: {
d886 1
a886 1
#line 432 "sh.y"
d891 1
a891 1
case 88: {
d893 1
a893 1
#line 435 "sh.y"
d899 1
a899 1
case 89: {
d901 1
a901 1
#line 439 "sh.y"
d906 1
a906 1
case 90: {
d908 1
a908 1
#line 442 "sh.y"
d913 1
a913 1
case 91: {
d915 1
a915 1
#line 445 "sh.y"
d920 1
a920 1
case 92: {
d922 1
a922 1
#line 451 "sh.y"
d927 1
a927 1
case 93: {
d929 1
a929 1
#line 454 "sh.y"
d934 1
a934 1
case 94: {
d936 1
a936 1
#line 460 "sh.y"
d941 1
a941 1
case 95: {
d943 1
a943 1
#line 463 "sh.y"
d948 1
a948 1
case 96: {
d950 1
a950 1
#line 469 "sh.y"
d960 1
a960 1
case 97: {
d962 1
a962 1
#line 477 "sh.y"
d967 1
a967 1
case 98: {
d969 1
a969 1
#line 480 "sh.y"
d974 1
a974 1
case 99: {
d976 1
a976 1
#line 486 "sh.y"
d981 1
a981 1
case 100: {
d983 1
a983 1
#line 492 "sh.y"
d988 1
a988 1
case 101: {
d990 1
a990 1
#line 495 "sh.y"
d995 1
a995 1
case 102: {
d997 1
a997 1
#line 501 "sh.y"
d1002 1
a1002 1
case 103: {
d1004 1
a1004 1
#line 504 "sh.y"
d1009 1
a1009 1
case 104: {
d1011 1
a1011 1
#line 510 "sh.y"
d1016 1
a1016 1
case 105: {
d1018 1
a1018 1
#line 513 "sh.y"
d1023 1
a1023 1
case 106: {
d1025 1
a1025 1
#line 516 "sh.y"
d1030 1
a1030 1
case 107: {
d1032 1
a1032 1
#line 522 "sh.y"
d1037 1
a1037 1
case 108: {
d1039 1
a1039 1
#line 526 "sh.y"
d1044 1
a1044 1
case 109: {
d1046 1
a1046 1
#line 532 "sh.y"
d1051 1
a1051 1
case 110: {
d1053 1
a1053 1
#line 535 "sh.y"
@
