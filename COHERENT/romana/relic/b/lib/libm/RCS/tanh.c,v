head     1.2;
access   ;
symbols  ;
locks    bin:1.2;
comment  @ * @;


1.2
date     92.06.10.00.23.09;  author bin;  state Exp;
branches ;
next	1.1;

1.1
date     92.06.10.00.23.09;  author bin;  state Exp;
branches ;
next	;


desc
@steve 6/9/92
Initial MWC RCS revision.
@


1.2
log
@steve 6/9/92
Added code to return arg unchanged when less that THRESHOLD in absolute value
after Promula reported inaccuracy for very small arguments.
@
text
@/*
 * libm/tanh.c
 * Hyperbolic tangent.
 */

#include <math.h>

#if	EMU87
#include "emumath.h"
#endif

/*
 * To get a correct result for very small |x|,
 * the code below just returns x for |x| < THRESHOLD.
 * We can derive a theoretical value for THRESHOLD from the series:
 *	tanh(x)  = x - x^3/3 + 2*x^5/17 - ...
 * so if |x| < sqrt(3 * DBL_EPSILON) then x^3/3 < x * DBL_EPSILON
 * and the low-order terms must be insignificant.
 * The threshold value below, arrived at empirically, is somewhat larger;
 * it is for IEEE fp, the DECVAX value must be slightly different but...
 */
#define	THRESHOLD	7.000900090031528e-06

double
tanh(x) double x;
{
	double r;
	register int s;

	if (fabs(x) < THRESHOLD)
		return x;
	/*
	 * Hart (6.2.28) gives an alternative formula for |x| < 1,
	 * unused here; should it be used?
	 */
	if (s = (x < 0.0))
		x = -x;
	r = exp(-2.0*x);
	r = (1.0-r) / (1.0+r);
	return s ? -r : r;
}

/* end of tanh.c */
@


1.1
log
@Initial revision
@
text
@d2 1
d5 1
d12 12
d25 1
a25 2
tanh(x)
double x;
d30 7
a36 2
	s = 0;
	if (x < 0.0) {
a37 2
		s = 1;
	}
d40 1
a40 1
	return (s?-r:r);
d42 2
@
