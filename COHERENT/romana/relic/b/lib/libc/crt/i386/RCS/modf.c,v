head     1.2;
access   ;
symbols  ;
locks    bin:1.2;
comment  @ * @;


1.2
date     92.05.08.06.24.36;  author bin;  state Exp;
branches ;
next	1.1;

1.1
date     92.05.08.06.24.10;  author bin;  state Exp;
branches ;
next	;


desc
@steve 5/7/92
Initial MWC RCS revision.
@


1.2
log
@steve 5/7/92
Changed results for negative arguments, so that e.g. -1.15 now
gives -1 + -.15 rather than -2 + .85, in keeping with ANSI standard.
@
text
@/*
 * libc/crt/modf.c
 */

/*
 * double
 * modf(real, dp)
 * double real, *dp;
 *
 * modf() finds g = greatest integer <= real,
 * then stores g through dp and returns real - g.
 * This version uses a machine dependent subroutine
 *	double _modf(real, dp, e)
 * which assumes real >= 0, 1 <= e = exponent(real) <= DMBITS+1,
 * where DMBITS is the number of mantissa bits in a double.
 */

#if	_IEEE
#define	DEBITS	11
#define	DMBITS	52
#define	FEBITS	 8
#define	FMBITS	23
#endif

#if	_DECVAX
#define	DEBITS	 8
#define	DMBITS	55
#define	FEBITS	 8
#define	FMBITS	23
#endif

extern	double	_modf();
extern	double	frexp();

double
modf(d, dp) double d; register double *dp;
{
	int e;

 	frexp(d, &e);
	if (e >= DMBITS+1) {			/* very large d */
		*dp = d;
		return 0.0;
	} else if (e <= 0) {			/* -1. < d < 1. */
		*dp = 0.0;
		return d;
	} else if (d >= 0.0)
		return _modf(d, dp, e);		/* d >= 0., 1 <= e < DMBITS+1 */

	/* d is negative. */
	d = _modf(-d, dp, e);
	*dp = -*dp;
	return -d;
}

/* end of modf.c */
@


1.1
log
@Initial revision
@
text
@d45 1
a45 5
		if (d < 0.0) {			/* -1. < d < 0. */
			*dp = -1.0;
			return 1.0 + d;
		}
		*dp = 0.0;			/* 0. <= d < 1. */
d52 2
a53 7
	if (d != 0.0) {
		*dp = -*dp - 1.0;
		return 1.0 - d;
	} else {				/* -0.0, this should not happen */
		*dp = -*dp;
		return d;
	}
@
