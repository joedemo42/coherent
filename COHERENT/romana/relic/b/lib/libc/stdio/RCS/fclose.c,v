head     1.2;
branch   ;
access   ;
symbols  ;
locks    bin:1.2; strict;
comment  @ * @;


1.2
date     93.02.10.16.57.39;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.04.30.14.16.18;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/*
 * libc/stdio/fclose.c
 * ANSI-compliant C standard i/o library.
 * fclose()
 * ANSI 4.9.5.1.
 * Close a stream.
 */

#include <stdio.h>

int
fclose(stream) register FILE *stream;
{
	register int flags, status;
	register _FILE2 *f2p;

	f2p = stream->_f2p;
	flags = stream->_ff2;
	if ((flags & _FINUSE) == 0)
		return EOF;			/* Not in use */
	status = fflush(stream);		/* Flush unwritten data */
#if	_DONTC
	if (flags & _FDONTC)
		return status;			/* Don't close */
#endif
	close(fileno(stream));			/* Call sys close */
	if (flags & _FFREEB)
		free(f2p->_bp);			/* Release allocated buffer */
	if (f2p->_nm != NULL) {
		remove(f2p->_nm);		/* Delete temporary file */
		free(f2p->_nm);			/* and release allocated name */
	}
	stream->_ff1 = stream->_ff2 = 0;	/* Reset all flags */
	return status;
}

/* end of libc/stdio/fclose.c */
@


1.1
log
@Initial revision
@
text
@d2 5
a6 2
 * Standard I/O Library
 * flush unwritten data, release allocated buffers, call sys close
d12 1
a12 2
fclose(fp)
register FILE	*fp;
d14 2
a15 1
	register int	st;
d17 18
a34 8
	if (!(fp->_ff&_FINUSE))
		return (EOF);
	st = fflush(fp);
	close(fileno(fp));
	if (fp->_bp!=NULL && !(fp->_ff&_FSTBUF))
		free(fp->_bp);
	fp->_ff = 0;
	return (st);
d36 2
@
