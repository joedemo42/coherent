head     1.3;
branch   ;
access   ;
symbols  ;
locks    bin:1.3;
comment  @ * @;


1.3
date     93.02.10.16.57.46;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.14.21.00.53;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.14.20.23.33;  author bin;  state Exp;
branches ;
next     ;


desc
@steve 2/14/92
Initial MWC RCS revision.
@


1.3
log
@*** empty log message ***
@
text
@/*
 * libc/stdio/fflush.c
 * ANSI-compliant C standard i/o library.
 * fflush()
 * ANSI 4.9.5.2.
 * Write out unwritten data in buffer.
 */

#include <stdio.h>
#if	COHERENT || GEMDOS
#include <errno.h>
#endif

int
fflush(stream) register FILE *stream;
{
	register int n;
	register FILE **fpp;
	register _FILE2 *f2p;

	if (stream == NULL) {
		/* fflush all streams. */
		n = 0;
		for (fpp = _fp+_NFILE; --fpp >= _fp; )
			if ((stream = *fpp) != NULL
			 && (stream->_ff2 & _FINUSE)
			 && fflush(stream) == EOF)
				n = EOF;
		return n;
	}
	stream->_cc = 0;
	if ((stream->_ff1 & _FERR) != 0)
		return EOF;
	f2p = stream->_f2p;
	if ((n = stream->_cp - f2p->_dp) <= 0
	  || write(fileno(stream), f2p->_dp, n) == n ) {
		if (n < 0)
			;
		else if (stream->_cp == f2p->_ep)
			f2p->_dp = stream->_cp = f2p->_bp;
		else
			f2p->_dp = stream->_cp;
		return 0;
	} else {
#if	COHERENT || GEMDOS
		if (errno == EINTR)
			errno = 0;
		else
#endif
		stream->_ff1 |= _FERR;
		return EOF;
	}
}

/* end of libc/stdio/fflush.c */
@


1.2
log
@steve 2/14/92
Preserve errno.
@
text
@d3 4
a6 2
 * Standard I/O Library.
 * Write out any unwritten data in buffer.
d10 1
d12 1
d15 1
a15 2
fflush(fp)
register FILE	*fp;
d17 3
a19 1
	register int n, cc, oerrno;
d21 17
a37 8
	oerrno = errno;
	n = errno = fp->_cc = 0;
	if (fp->_ff&_FERR)
		n = EOF;
	else if ((cc = fp->_cp - fp->_dp) <= 0
	 || write(fileno(fp), fp->_dp, cc) == cc
	 || errno == EINTR) {
		if (cc < 0)
d39 2
a40 2
		else if (fp->_cp == _ep(fp))
			fp->_dp = fp->_cp = fp->_bp;
d42 2
a43 1
			fp->_dp = fp->_cp;
d45 7
a51 2
		fp->_ff |= _FERR;
		n = EOF;
a52 3
	if (errno == 0)
		errno = oerrno;
	return n;
@


1.1
log
@Initial revision
@
text
@d2 3
a4 2
 * Standard I/O Library
 * Write out any unwritten data in buffer
d14 1
a14 1
	register int	cc;
d16 5
a20 5
	fp->_cc = 0;
	errno = 0;
	if (fp->_ff&_FERR) {
		return (EOF);
	} else if ((cc = fp->_cp - fp->_dp) <= 0
a28 1
		return (0);
d31 1
a31 1
		return (EOF);
d33 3
d37 2
@
