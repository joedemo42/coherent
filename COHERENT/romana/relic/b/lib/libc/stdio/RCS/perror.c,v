head     1.2;
branch   ;
access   ;
symbols  ;
locks    bin:1.2; strict;
comment  @ * @;


1.2
date     93.02.10.16.58.08;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.12.14.10.06.54;  author bin;  state Exp;
branches ;
next     ;


desc
@moved from gen
@


1.2
log
@*** empty log message ***
@
text
@/*
 * libc/stdio/perror.c
 * ANSI-compliant C standard i/o library.
 * perror()
 * ANSI 4.9.10.4.
 * Write an error message to stderr.
 */

#include <stdio.h>
#include <errno.h>
#include <string.h>

void
perror(s) const char *s;
{
	if (s != NULL && *s != '\0')
		fprintf(stderr, "%s: ", s);
	fprintf(stderr, "%s\n", strerror(errno));
}

/* end of libc/stdio/perror.c */
@


1.1
log
@Initial revision
@
text
@d2 5
a6 1
 * Print error messages based on value in `errno'.
d10 2
d13 7
a19 3
extern	int	errno;
extern	char	*sys_errlist[];
extern	int	sys_nerr;
d21 1
a21 15
perror(s)
register char *s;
{
	register char *es;

	if (errno < sys_nerr)
		es = sys_errlist[errno]; else
		es = "Bad error number";
	if (s != NULL) {
		fputs(s, stderr);
		fputs(": ", stderr);
	}
	fputs(es, stderr);
	fputs("\n", stderr);
}
@
