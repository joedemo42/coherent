head     1.2;
branch   ;
access   ;
symbols  ;
locks    bin:1.2; strict;
comment  @ * @;


1.2
date     93.02.10.17.03.24;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.11.16.11.00.53;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/*
 * libc/stdio/tmpnam.c
 * ANSI-compliant C standard i/o library.
 * tmpnam()
 * ANSI 4.9.4.4.
 * Generate a temporary file name a la SV.
 * The name (generated by mktemp()) is of the form "/tmp/t<pid>x",
 * where <pid> is the 5-digit pid and x is an ASCII character.
 */

#include <stdio.h>
#include <string.h>

extern	char *mktemp();

#ifdef	GEMDOS
#define	FSPATHSEP	"\\"
#ifndef	P_tmpdir
#define	P_tmpdir	"\\tmp"
#endif
#endif
#ifdef	DOS
#define	FSPATHSEP	"\\"
#ifndef	P_tmpdir
#define	P_tmpdir	"\\tmp"
#endif
#endif
#ifndef	FSPATHSEP
#define	FSPATHSEP	"/"
#ifndef	P_tmpdir
#define	P_tmpdir	"/tmp"
#endif
#endif
#ifndef	L_tmpnam
#define	L_tmpnam	64
#endif
#define	TEMPLATE	"tXXXXXX"

char *
tmpnam(s) register char *s;
{
	static char namebuf[L_tmpnam];
	char *name;

	if (s == NULL)
		s = namebuf;
	for (;;) {
		strcpy(s, P_tmpdir);
		strcat(s, FSPATHSEP);
		strcat(s, TEMPLATE);
		name = mktemp(s);
		if (access(name, 0) == -1)
			break;
	}
	return name;
}

/* end of libc/stdio/tmpnam.c */
@


1.1
log
@Initial revision
@
text
@d2 7
a8 2
 * Standard I/O Library.
 * Create a unique name for a temporary file ala SYS V.
d12 1
d14 2
d39 2
a40 3
char	*
tmpnam(s)
register char	*s;
d42 1
a43 2
	static	char namebuf[L_tmpnam];
	extern	char *mktemp(), *strcpy(), *strcat();
d45 2
a47 2
		if (s == NULL)
			s = namebuf;
d55 1
a55 1
	return (s);
d57 2
@
