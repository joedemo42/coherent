head     1.3;
branch   ;
access   ;
symbols  ;
locks    bin:1.3;
comment  @ * @;


1.3
date     93.02.10.16.57.27;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.23.22.21.26;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.23.22.21.05;  author bin;  state Exp;
branches ;
next     ;


desc
@Initial MWC RCS revision.
@


1.3
log
@*** empty log message ***
@
text
@/*
 * libc/stdio/_fpseek.c
 * ANSI-compliant C standard i/o library internals.
 * _fpseek()
 * Align file seek address with current pointer in buffer.
 */

#include <stdio.h>

int
_fpseek(fp) register FILE *fp;
{
	register _FILE2 *f2p;

	f2p = fp->_f2p;
	if (fp->_ff2 & _FUNGOT)
		(*f2p->_gt)(fp);	/* Discard ungotten character */
	if (f2p->_dp <= fp->_cp)
		return fflush(fp);	/* Flush buffered output */
	if (lseek(fileno(fp), (long)(fp->_cp-f2p->_dp), SEEK_CUR) == -1L)
		return EOF;		/* Seek back over unread input */
	f2p->_dp = fp->_cp;
	fp->_cc = 0;
	return 0;
}

/* end of libc/stdio/_fpseek.c */
@


1.2
log
@steve 4/23/90
Integrated MSDOS source with COHERENT stdio source.
The only difference is using parameter SEEK_CUR instead of an explicit 1.
@
text
@d2 4
a5 4
 * Standard I/O Library Internals
 * Align file seek addr with current pointer in buffer
 * by writing out unflushed data or seeking back over unread data
 * ungot char is discarded
d11 1
a11 2
_fpseek(fp)
register FILE	*fp;
d13 1
a13 1
	extern	long	lseek();
d15 8
a22 7
	if (fp->_ff&_FUNGOT)
		(*fp->_gt)(fp);
	if (fp->_dp <= fp->_cp)
		return (fflush(fp));
	if (lseek(fileno(fp), (long)(fp->_cp-fp->_dp), SEEK_CUR) == -1L)
		return (EOF);
	fp->_dp = fp->_cp;
d24 1
a24 1
	return (0);
d26 2
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
	if (lseek(fileno(fp), (long)(fp->_cp-fp->_dp), 1) == -1L)
@
