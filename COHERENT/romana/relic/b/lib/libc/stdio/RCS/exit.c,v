head     1.2;
branch   ;
access   ;
symbols  ;
locks    bin:1.2; strict;
comment  @ * @;


1.2
date     92.11.23.08.30.30;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.04.30.14.16.17;  author bin;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@steve: modified exit() for use with atexit().
@
text
@/*
 * libc/stdio/exit.c
 * C general utilities library.
 * exit()
 * ANSI 4.10.4.3.
 * Normal termination.
 * Implementation defined behavior:
 *	successful termination (status==0 or status==EXIT_SUCCESS) returns 0
 *	unsuccessful termination (status==EXIT_FAILURE) returns 1
 *	otherwise (status!=EXIT_SUCCESS && status!=EXIT_FAILURE) returns status
 * This just passes the given status to the system,
 * which works since EXIT_SUCCESS is 0 and EXIT_FAILURE is 1.
 * Should be in libc/stdlib/exit.c but is in libc/stdio/exit.c instead
 * because the order of objects in the library is significant,
 * cf. libc/stdio/Makefile.
 */

#include <stdio.h>
#include <stdlib.h>

void	(**_atexitfp)();	/* pointer to last atexit-registered function */
int	_atexitn;		/* count of atexit-registered functions */

void
exit(status)
{
	while (_atexitn-- > 0)
		(**--_atexitfp)();	/* Execute registered functions	*/
	_finish();			/* Close open streams		*/
	_exit(status);			/* Return status		*/
}

/* end of libc/stdio/exit.c */
@


1.1
log
@Initial revision
@
text
@d2 14
a15 2
 * Standard I/O Library
 * Close all files and call sys exit
d19 1
d21 5
a25 2
int
exit(s)
d27 4
a30 2
	_finish();
	_exit(s);
d32 2
@
