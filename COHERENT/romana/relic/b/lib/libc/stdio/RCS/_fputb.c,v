head     1.3;
branch   ;
access   ;
symbols  ;
locks    bin:1.3;
comment  @ * @;


1.3
date     93.02.10.16.57.28;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.23.22.53.59;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.23.22.52.55;  author bin;  state Exp;
branches ;
next     ;


desc
@Initial MWC RCS revision.
@


1.3
log
@*** empty log message ***
@
text
@/*
 * libc/stdio/_fputb.c
 * ANSI-compliant C standard i/o library internals.
 * _fputb(), _fputba()
 * Write character, buffered.
 */

#include <stdio.h>

int
_fputb(c, fp) register int c; register FILE *fp;
{
	register _FILE2 *f2p;

	f2p = fp->_f2p;
	if (--fp->_cc < 0) {
		if (_fpseek(fp))
			return EOF;
		fp->_cc = f2p->_ep - f2p->_dp - 1;
	}
	return (*fp->_cp++ = (unsigned char)c);
}

#if	_ASCII

/* ASCII: prepend '\r' before '\n'. */
int
_fputba(c, fp) register int c; register FILE *fp;
{
 	if ((unsigned char)c == '\n' && _binputb('\r', fp) == EOF)
		return EOF;
	return _binputb(c, fp);
}

#endif

/* end of libc/stdio/_fputb.c */
@


1.2
log
@steve 4/23/90
Added MSDOS source changes to COHERENT source.
Parameter 'c' changed from unsigned char to register int,
return value cast to unsigned char.  This fixes bug
with "char c = 255; if (putchar(c) == EOF) ...".
@
text
@d2 4
a5 2
 * Standard I/O Library Internals
 * Buffered output
d11 1
a11 3
_fputb(c, fp)
register int	c;
register FILE	*fp;
d13 9
a21 4
	if (_fpseek(fp))
		return (EOF);
	fp->_cc = _ep(fp) - fp->_dp - 1;
	return (*fp->_cp++=(unsigned char)c);
d23 15
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
unsigned char	c;
d16 1
a16 1
	return (*fp->_cp++=c);
@
