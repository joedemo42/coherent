head     1.3;
branch   ;
access   ;
symbols  ;
locks    bin:1.3;
comment  @ * @;


1.3
date     93.02.10.16.57.13;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.14.20.59.51;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.14.20.23.13;  author bin;  state Exp;
branches ;
next     ;


desc
@steve 2/14/92
Initial MWC RCS revision.
@


1.3
log
@*** empty log message ***
@
text
@/*
 * libc/stdio/_fgetb.c
 * ANSI-compliant C standard i/o library internals.
 * _fgetb(), _fgetba()
 * Read character, buffered.
 */

#include <stdio.h>
#if	COHERENT || GEMDOS
#include <errno.h>
#endif

int
_fgetb(fp) register FILE *fp;
{
	register _FILE2 *f2p;

	if (--fp->_cc < 0) {
		if (fflush(fp))
			return EOF;

		/* Special kludge: fflush stdout if line buffered. */
		if ((stdout->_ff1 & _IOLBF) != 0)
			fflush(stdout);

		f2p = fp->_f2p;
		if ((fp->_cc = read(fileno(fp), f2p->_dp, (int)(f2p->_ep - f2p->_dp))) == -1) {
#if	COHERENT || GEMDOS
			if (errno == EINTR)
				errno = 0;
			else
#endif
			fp->_ff1 |= _FERR;
			fp->_cc = 0;
			return EOF;
		} else if (fp->_cc == 0) {
			fp->_ff1 |= _FEOF;
			return EOF;
		}
		f2p->_dp += fp->_cc--;
	}
	return (*fp->_cp++);
}

#if	_ASCII

/* ASCII: ignore '\r', map _EOFCHAR to EOF. */
int
_fgetba(fp) register FILE *fp;
{
 	register int c;

	while ((c = _bingetb(fp)) == '\r')
		;
	if (c == _EOFCHAR) {
		fp->_ff |= _FEOF;
		return EOF;
	}
	return c;
}

#endif

/* end of libc/stdio/_fgetb.c */
@


1.2
log
@steve 2/14/92
Preserve errno if read succeeds.
@
text
@d3 3
a5 2
 * C Standard I/O Library internals.
 * Buffered input: read a buffer.
d9 1
d11 1
a12 2
extern	int	_fputt();

d16 1
a16 1
	register int n, oerrno;
d18 39
a56 1
	if (fflush(fp))
a57 18
	if (stdout->_pt==&_fputt)	/* special kludge */
		fflush(stdout);
	oerrno = errno;			/* save old errno */
	errno = 0;
	n = fp->_cc = -read(fileno(fp), fp->_dp, _ep(fp) - fp->_dp);
	if (errno == 0)
		errno = oerrno;		/* preserve errno if no error */
	if (n == 1) {			/* read() returned -1, i.e. error */
		if (errno != EINTR)
			fp->_ff |= _FERR;
		fp->_cc = 0;
		return EOF;
	} else if (n == 0) {		/* read() returned 0, i.e. EOF */
		fp->_ff |= _FEOF;
		return EOF;
	} else {			/* success */
		fp->_dp -= fp->_cc++;
		return (*fp->_cp++);
d59 1
d62 2
@


1.1
log
@Initial revision
@
text
@d2 3
a4 2
 * Standard I/O Library Internals
 * Buffered Input; read a bufferfull
d10 2
d13 1
a13 2
_fgetb(fp)
register FILE	*fp;
d15 1
a15 1
	extern	int	_fputt();
d18 1
a18 1
		return (EOF);
d21 1
d23 4
a26 1
	if ((fp->_cc = -read(fileno(fp), fp->_dp, _ep(fp) - fp->_dp)) == 1) {
d30 2
a31 2
		return (EOF);
	} else if (fp->_cc == 0) {
d33 2
a34 2
		return (EOF);
	} else {
d39 2
@
