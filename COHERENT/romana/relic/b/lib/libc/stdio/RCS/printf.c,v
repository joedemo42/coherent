head     1.5;
branch   ;
access   ;
symbols  ;
locks    bin:1.5;
comment  @ * @;


1.5
date     93.01.22.09.55.58;  author bin;  state Exp;
branches ;
next     1.4;

1.4
date     92.01.22.01.26.43;  author bin;  state Exp;
branches ;
next     1.3;

1.3
date     92.01.21.19.31.52;  author bin;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.23.22.00.22;  author bin;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.23.22.00.05;  author bin;  state Exp;
branches ;
next     ;


desc
@Initial MWC RCS revision.
@


1.5
log
@steve handed updated 1/21/92
@
text
@/*
 * libc/stdio/printf.c
 * ANSI-compliant C standard i/o library.
 * printf()
 * ANSI 4.9.6.3.
 * Formatted print to standard output.
 */

#include <stdio.h>
#include <stdarg.h>

int
printf(format) const char *format;
{
	va_list	args;
	int	count;

	va_start(args, format);
	count = vfprintf(stdout, format, args);
	va_end(args);
	return count;
}

/* end of libc/stdio/printf.c */
@


1.4
log
@steve 1/21/92

Corrected bug introduced in previous edit; improved coding in printi/printl.
@
text
@d3 4
a6 8
 * C standard i/o library.
 * printf(), fprint(), sprintf().
 * Not ANSI compatible!
 * Non-portable things:
 * 1) alignment of arguments is assumed to be completely contiguous.
 * 2) the smallest number is assumed to negate to itself.
 * 3) All of long, int, char*, and double are assumed to
 *    be held in an exact number of ints.
d10 1
a10 3
#include <sys/mdata.h>
#include <ctype.h>
#include <string.h>
d12 5
a16 4
/* Avoid calling the new style toupper() function on MSDOS and GEMDOS */
#ifdef _toupper
#define toupper(c) _toupper(c)
#endif
d18 5
a22 2
/* External. */
extern	char	*_dtefg();
a23 267
/*
 * NXBUF is the size of the buffer for a single conversion item.
 * ANSI requires at least 509 characters for a single conversion;
 * note that e.g. "%f" of 1E300 requires a 300+ character buffer.
 * NIBUF and NLBUF must be long enough to hold a converted int and long;
 * a 32-bit value converts to maximum of 11 octal digits + NUL.
 */
#define	NXBUF	512		/* xprintf() buffer size */
#define	NIBUF	12		/* printi() buffer size */
#define	NLBUF	12		/* printl() buffer size */

#define	NULLFMT	"{NULL}"

union	alltypes {
	char	c;
	int	i;
	unsigned u;
	long	l;
	double	d;
	char	*s;
};

#define	bump(p,s)	(p += sizeof(s)/sizeof(int))

/* Forward. */
char	*printi();
char	*printl();

/*
 * Formatted print to standard output.
 */
printf(args) union alltypes args;
{
	xprintf(stdout, &args);
}

/*
 * Formatted print to a specific file.
 */
fprintf(fp, args) FILE *fp; union alltypes args;
{
	xprintf(fp, &args);
}

/*
 * Formatted print into given string.
 * Handcrafted file structure created for putc.
 */
sprintf(sp, args) char *sp; union alltypes args;
{
	FILE	file;

	_stropen(sp, -MAXINT-1, &file);
	xprintf(&file, &args);
	putc('\0', &file);
}

static
xprintf(fp, argp) FILE *fp; union alltypes *argp;
{
	register char *cbp;
	int *iap;
	register c;
	char *s;
	char *cbs;
	int adj, pad;
	int prec;
	int fwidth;
	int pwidth;
	int isnumeric;
	register char *fmt;
	union alltypes elem;
	char cbuf[NXBUF];

	iap = (int *)argp;
	fmt = *(char **)iap;
	bump(iap, char*);
	for (;;) {
		while((c = *fmt++) != '%') {
			if (c == '\0')
				return;		/* end of format string, done */
			putc(c, fp);		/* copy non-conversion char */
		}
		pad = ' ';
		fwidth = -1;
		prec = -1;
		c = *fmt++;
		if (c == '-') {
			adj = 1;
			c = *fmt++;
		} else
			adj = 0;
		if (c == '0') {
			pad = '0';
			c = *fmt++;
		}
		if (c == '*') {
			if ((fwidth = *iap++) < 0) {
				adj = 1;
				fwidth = -fwidth;
			}
			c = *fmt++;
		} else
			for (fwidth = 0; c>='0' && c<='9'; c = *fmt++)
				fwidth = fwidth*10 + c-'0';
		if (c == '.') {
			c = *fmt++;
			if (c == '*') {
				prec = *iap++;
				c = *fmt++;
			} else
				for (prec=0; c>='0' && c<='9'; c=*fmt++)
					prec = prec*10 + c-'0';
		}
		if (c == 'l') {
			c = *fmt++;
			if (c=='d' || c=='o' || c=='u' || c=='x')
				c = toupper(c);
		}
		cbp = cbs = cbuf;
		isnumeric = 1;
		switch (c) {

		case 'd':
			elem.i = *iap++;
			if (elem.i < 0) {
				elem.i = -elem.i;
				*cbp++ = '-';
			}
			cbp = printi(cbp, elem.i, 10);
			break;

		case 'u':
			cbp = printi(cbp, *iap++, 10);
			break;
	
		case 'o':
			cbp = printi(cbp, *iap++, 8);
			break;

		case 'x':
			cbp = printi(cbp, *iap++, 16);
			break;

		case 'D':
			elem.l = *(long *)iap;
			bump(iap, long);
			if (elem.l < 0) {
				elem.l = -elem.l;
				*cbp++ = '-';
			}
			cbp = printl(cbp, elem.l, 10);
			break;

		case 'U':
			cbp = printl(cbp, *(long *)iap, 10);
			bump(iap, long);
			break;

		case 'O':
			cbp = printl(cbp, *(long *)iap, 8);
			bump(iap, long);
			break;

		case 'X':
			cbp = printl(cbp, *(long *)iap, 16);
			bump(iap, long);
			break;

		case 'e':
		case 'f':
		case 'g':
			cbp = _dtefg(c, iap, prec, cbp);
			bump(iap, double);
			break;

		case 's':
			isnumeric = 0;
			if ((s = *(char **)iap) == NULL)
				s = NULLFMT;
			bump(iap, char*);
			cbp = cbs = s;
			while (*cbp++ != '\0')
				if (prec >= 0 && cbp-s > prec)
					break;
			cbp--;
			break;
	
		case 'c':
			isnumeric = 0;
			*cbp++ = *iap++;
			break;
	
		case 'r':
			xprintf(fp, *(char ***)iap);
			bump(iap, char**);
			break;
	
		default:
			putc(c, fp);
			continue;
		}
		if ((pwidth = fwidth + cbs-cbp) < 0)
			pwidth = 0;
		if (!adj) {
			if (isnumeric && pad == '0' && *cbs == '-')
				putc(*cbs++, fp);
			while (pwidth-- != 0)
				putc(pad, fp);
		}
		while (cbs < cbp)
			putc(*cbs++, fp);
		if (adj)
			while (pwidth-- != 0)
				putc(pad, fp);
	}
}

static readonly char digits[] = {
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'A', 'B', 'C', 'D', 'E', 'F'
};

/*
 * Convert unsigned integer n to ASCII in base b.
 * Store it through cp and return a pointer past the end.
 */
static
char *
printi(cp, n, b) register char *cp; register unsigned int n; register int b;
{
	register unsigned int a;
	register char *ep;
	char pbuf[NIBUF];

	ep = &pbuf[NIBUF-1];
	*ep = '\0';
	for ( ; (a = n/b) != 0; n = a)
		*--ep = digits[n%b];
	*cp++ = digits[n];
	while (*ep)
		*cp++ = *ep++;
	return cp;
}

/*
 * Convert unsigned long integer n to ASCII in base b.
 * Store it through cp and return a pointer past the end.
 */
static
char *
printl(cp, n, b) register char *cp; register unsigned long n; register int b;
{
	register unsigned long a;
	register char *ep;
	char pbuf[NLBUF];

	ep = &pbuf[NLBUF-1];
	*ep = '\0';
	for ( ; (a = n/b) != 0; n = a)
		*--ep = digits[n%b];
	*cp++ = digits[n];
	while (*ep)
		*cp++ = *ep++;
	return cp;
}

@


1.3
log
@steve 1/21/92
Replaced buffer sizes in xprintf(), printi(), printl() with manifest
constants.  Bumped xprintf() buffer size from 64 to 512, so e.g.
printf("%f", 1e300); does not overwrite the buffer.  Minor recoding of
printi() and printl() for uniformity and efficiency.
@
text
@d250 2
a251 1
 * Print an unsigned integer in base b.
d261 2
a262 2
	ep = &pbuf[NIBUF];
	*--ep = '\0';
d265 4
a268 2
	*--ep = digits[n];
	return strcpy(cp, ep);
d272 2
a273 1
 * Print an unsigned long integer in base b.
d283 2
a284 2
	ep = &pbuf[NLBUF];
	*--ep = '\0';
d287 4
a290 2
	*--ep = digits[n];
	return strcpy(cp, ep);
@


1.2
log
@steve 4/23/90
Integrate MSDOS source with COHERENT stdio source.
The only change is the calling sequence for _dteftgg.
The old COHERENT source fetched a double through a double *,
stored it, and passed the double as the second arg to _dtefg().
The new source just passes the double * as the second arg instead.
This avoids pulling in unnecessary fp overhead when fp output
is unused.
@
text
@d2 4
a5 1
 * Standard I/O library printf/fprint/sprintf.
d16 1
d23 16
d48 1
a48 1
#define	bump(p,s)	(p+=sizeof(s)/sizeof(int))
d50 1
a52 1
char	*_dtefg();
a53 2
static readonly char null[] = "{NULL}";

d57 1
a57 2
printf(args)
union alltypes args;
d65 1
a65 3
fprintf(fp, args)
FILE *fp;
union alltypes args;
d74 1
a74 3
sprintf(sp, args)
char *sp;
union alltypes args;
d84 1
a84 3
xprintf(fp, argp)
FILE *fp;
union alltypes *argp;
d98 1
a98 1
	char cbuf[64];
d105 3
a107 4
			if(c == '\0') {
				return;
			}
			putc(c, fp);
d205 1
a205 1
				s = null;
d209 1
a209 1
				if (prec>=0 && cbp-s>prec)
d254 1
a254 3
printi(cp, n, b)
char *cp;
register unsigned n;
d256 1
a256 1
	register a;
d258 1
a258 1
	char pbuf[10];
d260 3
a262 3
	ep = &pbuf[10];
	*--ep = 0;
	for ( ; a = n/b; n=a)
d265 1
a265 3
	while (*ep)
		*cp++ = *ep++;
	return (cp);
d269 1
a269 1
 * Print an unsigned long in base b.
d273 1
a273 4
printl(cp, n, b)
register char *cp;
unsigned long n;
register b;
d275 1
a275 2
	char pbuf[13];
	unsigned long a;
d277 1
d279 1
a279 1
	ep = &pbuf[13];
d284 1
a284 3
	while (*ep)
		*cp++ = *ep++;
	return (cp);
d286 2
@


1.1
log
@Initial revision
@
text
@d13 1
d28 1
a29 2
#define	bump(p,s)	(p+=sizeof(s)/sizeof(int))

d188 1
a188 1
			elem.d = *(double *) iap;
a189 1
			cbp = _dtefg(c, elem.d, prec, cbp);
@
