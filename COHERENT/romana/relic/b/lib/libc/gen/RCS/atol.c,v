head     1.2;
access   ;
symbols  ;
locks    bin:1.2;
comment  @ * @;


1.2
date     91.02.08.20.40.43;  author bin;  state Exp;
branches ;
next	1.1;

1.1
date     91.02.08.20.36.55;  author bin;  state Exp;
branches ;
next	;


desc
@steve 2/8/91
Initial MWC RCS revision.
@


1.2
log
@steve 2/8/91
Replaced old source with almost equivalent ANSI library source.
The only significant change is that the old source tested for
leading whitespace ' ' or '\t' and for digits '0' <= c <= '9',
the new source uses isspace() and isdigit() as specified by ANSI.
@
text
@/*
 * C general utilities library.
 * atol()
 * ANSI 4.10.1.3.
 * Convert ASCII to long (the old fashioned way).
 */

#include <stdlib.h>
#include <ctype.h>

long
atol(nptr) register char *nptr;
{
	register long	val;
	register int	c;
	register int	sign;

	val = sign = 0;

	/* Leading whitespace. */
	while (isspace(c = *nptr++))
		;

	/* Optional sign. */
	if (c == '-') {
		sign = 1;
		c = *nptr++;
	} else if (c == '+')
		c = *nptr++;

	/* Process digit string. */
	for ( ; isdigit(c); c = *nptr++)
		val = val * 10 + c - '0';
	return (sign ? -val : val);
}

/* end of atol.c */
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
 * Non-floating ASCII to long conversion
 *
 * long atol(cp)
 * char *cp;
d8 3
d12 1
a12 2
atol(cp)
register char *cp;
d14 3
a16 3
	register long val;
	register c;
	register sign;
d19 6
a24 2
	while ((c = *cp)==' ' || c=='\t')
		cp++;
d27 1
a27 1
		cp++;
d29 6
a34 6
		cp++;
	while ((c = *cp++)>='0' && c<='9')
		val = val*10 - c + '0';
	if (!sign)
		val = -val;
	return (val);
d36 2
@
