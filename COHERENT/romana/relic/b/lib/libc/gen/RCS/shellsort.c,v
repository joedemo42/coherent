head     1.2;
access   ;
symbols  ;
locks    bin:1.2;
comment  @ * @;


1.2
date     92.05.06.21.42.44;  author bin;  state Exp;
branches ;
next	1.1;

1.1
date     92.05.06.21.41.26;  author bin;  state Exp;
branches ;
next	;


desc
@steve 5/6/92
Initial MWC RCS revision.
@


1.2
log
@steve 5/6/92
Replaced with new source from cef.
Performance is supposedly much improved on many common cases.
@
text
@/*
 * Shellsort algorithm from Donald L Shell cf. Knuth Vol. 3, pp. 84 ff.
 * Divide a set of n elements into n/2 groups. { 0, n/2 } .. {1, n/2+1}
 * etc. Sort the groups. Now divide into n/4 groups of 4 {0, n/4, 2n/4, 3n/4}
 * etc. Sort those and continue.
 */
#include <stdio.h>
#include <limits.h>
#include <string.h>

#define inOrder(h, l) ((*compar)((Void *)(h), (Void *)(l)) >= 0)

void
shellsort(base, nmemb, size, compar)
Void *base;
size_t nmemb, size;
int (*compar)();
{
	register char *bot;
	register j, gap, i, n;

	for (n = gap = size * nmemb;;) {
		if (nmemb & 1)
			gap -= size;
		if (!(nmemb >>= 1))
			break;
		for (i = gap >>= 1; i < n; i += size) {
			for (j = i - gap; j >= 0; j -= gap) {
				bot = base + j;
				if (inOrder(bot + gap, bot))
					break;
				_memxchg(bot, bot + gap, size);
			}
		}
	}
}
@


1.1
log
@Initial revision
@
text
@d2 4
a5 2
 * Shell sort with the calling sequence of
 * qsort.
d7 3
d11 1
a11 1
#define A(v,i)  ((v)+((i)*size))
d13 4
a16 2
shellsort(v, n, size, compar)
register char *v;
d19 2
a20 2
	int gap, i;
	register j;
d22 9
a30 4
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j = i-gap; j>=0; j -= gap) {
				if ((*compar)(A(v,j), A(v,j+gap)) <= 0)
d32 1
a32 1
				qexch(A(v,j), A(v,j+gap), size);
d34 2
a36 14

static
qexch(p1, p2, n)
register char *p1, *p2, n;
{
	int t;

	if (n)
		do {
			t = *p1;
			*p1++ = *p2;
			*p2++ = t;
		} while (--n);
}
@
