head     1.3;
access   ;
symbols  ;
locks    bin:1.3;
comment  @ * @;


1.3
date     92.05.06.21.42.10;  author bin;  state Exp;
branches ;
next	1.2;

1.2
date     91.02.06.18.47.49;  author bin;  state Exp;
branches ;
next	1.1;

1.1
date     91.02.06.18.47.32;  author bin;  state Exp;
branches ;
next	;


desc
@steve 2/6/91
Initial MWC RCS revision.
@


1.3
log
@steve 5/6/92
Replaced with new source from cef.
Performance is supposedly much improved on many common cases.
@
text
@/*
 * C general utilities library.
 * qsort()
 * ANSI 4.10.5.2.
 * Quicksort.
 * Algorithm from C. A. R. Hoare, cf. Knuth Vol. 3, pp. 114 ff.
 */

/*
 * qsort chooses a pivot element (Knuth recommends random choice),
 * partitions the input into sets less than and greater than the pivot,
 * puts the pivot into the correct slot in the sorted set, and
 * recursively sorts the two subpartitions. For small numbers of
 * elements, a shell sort is more efficient. The obvious recursive
 * implementation of qsort can easily use a lot of stack space.
 * The nonrecursive implementation here is less obvious but more
 * efficient.  It is based on two observations:
 *
 * (1) Using ordinary recursion on the smaller of the subpartitions and
 * tail recursion on the larger reduces recursion nesting to at most
 * log2(nmemb) levels.  This reduces stack usage enormously.
 *
 * (2) Since the maximum number of recursion levels is known by (1), the
 * recursion can be faked with auto arrays of fixed size. This provides
 * additional efficiency because the constant "size" and "compar" args
 * need not be passed recursively.
 *
 * This version of qsort reacts to conditions that make normal qsort run
 * slowly. These include repetative keys and strange cases like data
 * split into two sorted sets. It does this by checking how well pivot
 * choices do. First choose a center pivot, if there is order this is a
 * good guess and leads to a very efficient qsort. If this is a bad pick
 * we try 1/4 of the way in, then 1/8 of the way in. At some point qsort
 * assumes that all pivots are bad, as in a set of 1000 elements all 7
 * and 8. Qsort then reverts to shellsort. This is better than insertion
 * sort on large sets. This qsort has been tuned to the data provided
 * by tryqsort.c in masstest. I expect that other data might produce
 * other tuning values (M, FC, BC) and might even result in other
 * alternative sorts rather than shellsort.
 */

#include <stdio.h>
#include <limits.h>
#include <string.h>

#define inOrder(h, l) ((*compar)((Void *)(h), (Void *)(l)) >= 0)
#define ptrToIx(p) (((p) - (char *)base) / size)
#define ixToPtr(d) (base + ((d) * size))

#ifdef EXPERIMENT
int M, FC, BC;
#else
/* Experimentaly obtained values */
#define M  9	/* if (nmemb < M) shellsort() */
#define FC 2	/* if ((larger >> FC) > smaller) badPivot++ */
#define BC 5	/* if (badPivot >= BC) shellsort() */
#endif

extern void _memxchg();

/* Recursion stack frame */
typedef struct STACK {
	Void *s_base;
	size_t s_nmemb;
	int s_badPivot;
} STACK;

void
qsort(base, nmemb, size, compar)
Void *base;
size_t nmemb, size;
int (*compar)();
{
	register char *bot, *top;
	register STACK *sp;
	char *end;
	int badPivot;
	size_t n;
	STACK stack[CHAR_BIT * sizeof(size_t)];

	/*
	 * Initialize the stack, base, nmemb and badness.
	 */
	sp = stack;
	sp->s_base = base;
	sp->s_nmemb = nmemb;
	sp->s_badPivot = 1;	/* Lowest badness count */

	while (sp >= stack) {
		/* pop a base and nmemb pair off the stack */
		nmemb = sp->s_nmemb;
		base = sp->s_base;
		badPivot = sp->s_badPivot;
		sp--;

		while ((nmemb >= M) && (badPivot < BC)) {
			/* Select pivot element */
			_memxchg(base, ixToPtr(nmemb >> badPivot), size);

			/* 
			 * Partition set into <= base, == base and >= base.
			 *			     ^            ^
			 *			    top		 bot
			 */
			end = top = ixToPtr(nmemb);
			bot = ixToPtr(0);
			for (;;) {
				while (((top -= size) > base) &&
				       inOrder(top, base))
					;
				while (end > (bot += size) &&
				       inOrder(base, bot))
					;
				if (bot < top)
					_memxchg(bot, top, size);
				else
					break;
			}

			/* Put pivot into its correct place. */
			_memxchg(top, (char *)base, size);

			/*
			 * Recusively sort the partitions pushing stack
			 * for larger, recursion for smaller.
			 */
			sp++;
			if ((n = ptrToIx(top)) < (nmemb -= ptrToIx(bot))) {
				sp->s_base = (Void *)bot;
				sp->s_nmemb = nmemb;
				nmemb = n;
			} else {
				sp->s_base = base;
				sp->s_nmemb = n;
				base = (Void *)bot;
			}

			/*
			 * Test for very bad (unequal size) cuts
			 */
			if ((sp->s_nmemb >> FC) > nmemb)
				++badPivot;	/* bad pivot */
			else
				badPivot = 1;	/* good pivot */
			sp->s_badPivot = badPivot;
		}
		/* Use shellsort where qsort isn't working out */
		shellsort(base, nmemb, size, compar);
	}
}
@


1.2
log
@steve 2/6/91
Replaced with updated source from cef/steve.
@
text
@d12 7
a18 6
 * puts the pivot into the correct slot in the sorted set,
 * and recursively sorts the two subpartitions.
 * For small numbers of elements, a linear insertion sort is more efficient.
 * The obvious recursive implementation of qsort can easily use a lot of
 * stack space.  The nonrecursive implementation here is less obvious
 * but more efficient.  It is based on two observations:
d22 18
a39 4
 * (2) Since the maximum number of recursion levels is known by (1),
 * the recursion can be faked with auto arrays of fixed size.
 * This provides additional efficiency because the constant
 * "size" and "compar" args need not be passed recursively.
d42 1
a42 2
#if	__STDC__
#include <stdlib.h>
d44 8
d53 4
a56 1
#define	CHAR_BIT	8		/* in <limits.h> */
a57 1
#include <string.h>
d59 7
a65 4
#define	SSIZE	(CHAR_BIT * sizeof(size_t))	/* max recursion stack size */
typedef	struct	{
	Void *	s_base;
	size_t	s_nmemb;
a67 4
/* Use quicksort for M or more elements, linear insertion sort for fewer. */
/* The value is arrived at empirically and may differ for other processors. */
#define	M	8

d70 1
a70 1
register Void *base;
d75 5
a79 2
	register size_t n;
	STACK stack[SSIZE], *sp;
d81 4
a84 2
	/* Initialize the stack of base and nmemb args to be sorted. */
	sp = &stack[0];
d87 1
d89 3
a91 3
	while (sp >= &stack[0]) {

		/* Pop a base and nmemb pair from the stack. */
d93 1
a93 1
		nmemb = sp->s_nmemb;
d96 3
a98 1
		while (nmemb >= M) {
d100 7
a106 7
			bot = (char *)base;
			top = bot + nmemb * size;

			/* Put middle element into *base.  Helps on sorted input. */
			_memxchg(bot, bot + (nmemb/2)*size, size);

			/* Partition into sets less than and greater than *base. */
d108 2
a109 1
				while ((*compar)((Void *)(top -= size), base)>=0 && top > base)
d111 2
a112 1
				while ((*compar)(base, (Void *)(bot += size))>=0 && bot < top)
d120 1
a120 1
			/* Put *base into its correct place. */
d124 2
a125 3
			 * "Recusively" sort partitions.
			 * Fake recursion on local stack for the larger,
			 * tail recursion for the smaller.
d127 6
a132 5
			n = (top - (char *)base)/size;
			nmemb -= (bot - (char *)base) / size;
			if (n > nmemb) {
				/* qsort(base, n, size, compar); */
				sp++;
a134 1
				/* qsort(bot, nmemb, size, compar); */
a135 7
			} else {
				/* qsort(bot, nmemb, size, compar); */
				sp++;
				sp->s_base = bot;
				sp->s_nmemb = nmemb;
				/* qsort(base, n, size, compar); */
				nmemb = n;
d137 9
d147 2
a148 11

		/* Use linear insertion sort for less than M elements. */
		while (nmemb-- > 1) {
			top = bot = (char *)base;
			for (n = nmemb; n--; )
				if ((*compar)((Void *)(top += size), (Void *)bot) < 0)
					bot = top;
			if (bot != (char *)base)
				_memxchg(bot, (char *)base, size);
			base = (Void *)(((char *)base) + size);
		}
@


1.1
log
@Initial revision
@
text
@d2 5
a6 3
 * Quicker sort algorithm (from C. A. R. Hoare)
 * This uses linear insertion sort for number of elements
 * smaller than M in some partitioning.
d9 17
a25 1
char	*qmedian();
d27 7
a33 1
#define	M	10
d35 14
a48 3
qsort(base, nel, width, compar)
register char *base;
unsigned nel, width;
d52 2
d55 4
a58 22
	bot = base;
	top = base + nel*width;
	if (nel < M) {
		if (nel > 1)
			qlinsert(bot, nel, width, compar);
		return;
	}
	qexchange(bot, qmedian(compar, bot, bot+(nel/2)*width, top-width), width);
	for (;;) {
		while ((*compar)(base, bot+=width)>=0 && bot<top)
			;
		while ((*compar)(top-=width, base)>=0 && top>base)
			;
		if (bot < top)
			qexchange(bot, top, width);
		else
			break;
	}
	qexchange(top, base, width);
	qsort(base, (top-base)/width, width, compar);
	qsort(bot, nel - (bot-base)/width, width, compar);
}
d60 1
a60 11
/*
 * Exchange two records pointed to by
 * `p1' and `p2'.  Each record is of `width'
 * bytes.
 */
static
qexchange(p1, p2, width)
register char *p1, *p2;
register unsigned width;
{
	int save;
d62 4
a65 7
	if (width)
		do {
			save = *p1;
			*p1++ = *p2;
			*p2++ = save;
		} while (--width);
}
d67 1
a67 11
/*
 * Produce the median of the first, middle,
 * and last elements of a file by calling
 * the compare routine.
 */
static char *
qmedian(comp, a, b, c)
int (*comp)();
char *a, *b, *c;
{
	register char *bmin, *bmax;
d69 55
a123 6
	if ((*comp)(a, b) < 0) {
		bmin = a;
		bmax = b;
	} else {
		bmin = b;
		bmax = a;
a124 3
	if ((*comp)(bmax, c) < 0)
		return (bmax);
	return ((*comp)(bmin, c) < 0 ? c : bmin);
a125 29

/*
 * Linear insertion sort used to speed up
 * final sorts when parititions get relatively small.
 */
static
qlinsert(base, nel, width, compar)
char *base;
register unsigned nel;
unsigned width;
int (*compar)();
{
	register char *min, *mbase;
	int n;

	--nel;
	do {
		n = nel;
		min = base;
		mbase = min+width;
		do {
			if ((*compar)(mbase, min) < 0)
				min = mbase;
			mbase += width;
		} while (--n);
		qexchange(min, base, width);
		base += width;
	} while (--nel);
}
@
