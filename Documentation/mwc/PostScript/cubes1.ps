% cubes.ps 11/20/90
% Takes about two minutes to print.

% Convert inches to points.
/inch { 72 mul } bind def

% Rectangular solid, e.g. cube; initialized by rsinit.
/rsvertices [
	3 array			% vertex v0 coordinates [ v0x v0y v0z ]
	3 array
	3 array
	3 array
	3 array
	3 array
	3 array
	3 array
] def
/rsedges [		% indices of edge's vertices
	[ 0 1 ]	[ 0 2 ]	[ 0 4 ]	[ 1 3 ]	[ 1 5 ]	[ 2 3 ]
	[ 2 6 ]	[ 3 7 ]	[ 4 5 ]	[ 4 6 ]	[ 5 7 ]	[ 6 7 ]
] def

% Faces.
% The ordering of the vertices determines how the face gets filled.
/rsfaces [		% indices of face's vertices
	[ 0 1 3 2 ]	% front
	[ 1 0 5 4 ]	% bottom
	[ 0 2 4 6 ]	% left
	[ 1 3 5 7 ]	% right
	[ 3 2 7 6 ]	% top
	[ 4 5 7 6 ]	% back
] def

% Initialize rsvertices with coordinates of vertices.
% dx dy dz x y z rsinit -
/rsinit
{
	/z exch def
	/y exch def
	/x exch def
	/dz exch def
	/dy exch def
	/dx exch def

	0 1 7 {
		/i exch def
		/vi rsvertices i get def
 		vi 0 x dx i        2 mod mul add put
		vi 1 y dy i 2 idiv 2 mod mul add put
		vi 2 z dz i 4 idiv       mul add put
		rsvertices i vi put
	} for
} bind def

% Outline the given solid.
/rsoutline
{
	newpath
	rsedges {			% [ i j ]
		aload pop		% i j
		rsvertices exch get	% i [xj yj zj]
		aload pop pop		% i xj yj
		moveto			% i
		rsvertices exch get	% [xi yi zi]
		aload pop pop		% xi yi
		lineto			% from vi to vj
	} forall
	stroke
} bind def

% Observer coordinates.
/px 4.75 inch def
/py 6.25 inch def
/pz -7 inch def

% Project the vertices onto the z=0 plane.
% This can probably be done more efficiently with matrix operations.
/project
{
	0 1 7 {
		/i exch def
		/vi rsvertices i get def	
		vi aload pop			% x y z
		/z exch def			% x y
		/t pz z pz sub div neg def
		py sub t mul py add		% x y'
		exch				% y' x
		px sub t mul px add		% y' x'
		exch				% x' y'
		0 vi astore pop
		rsvertices i vi put
	} for
} bind def

% Shade one face.
% gray i shadeface -
/shadeface
{
	gsave
	newpath						% gray i
	rsfaces exch get				% gray [ v1 v2 v3 v4 ]
	aload pop					% gray v1 v2 v3 v4
	rsvertices exch get aload pop pop moveto	% gray v1 v2 v3
	rsvertices exch get aload pop pop lineto	% gray v1 v2
	rsvertices exch get aload pop pop lineto	% gray v1
	rsvertices exch get aload pop pop lineto	% gray
	closepath
	gsave stroke grestore
	setgray fill
	grestore
} bind def

% Draw rectangular solid.
/rsolid
{
	rsinit				% initialize vertex coordinates
	project				% project onto z=0 plane
	/g iz .05 mul def		% range 0 at front to .3 at back
	.7 g sub 5 shadeface		% back
	iy py gt {
		.6 g sub 1 shadeface	% bottom
		.6 g sub 4 shadeface	% top
	} {
		.6 g sub 4 shadeface	% top
		.6 g sub 1 shadeface	% bottom
	} ifelse
	ix px gt {
		.6 g sub 2 shadeface	% left
		.6 g sub 3 shadeface	% right
	} {
		.6 g sub 3 shadeface	% right
		.6 g sub 2 shadeface	% left
	} ifelse
	rsoutline			% to get edges
	.9 g sub 0 shadeface		% front
	lettershow
} bind def

% Put a letter in the front face of the solid.
% The scaling does not work as expected, don't know why.
/lettershow
{
	/s (X) def
	gsave
	s 0 (cubes) ix 2 idiv get put	% desired letter to s
	rsvertices 0 get aload pop pop	% x0 y0
	/y0 exch def /x0 exch def
	rsvertices 3 get aload pop pop	% x3 y3
	y0 sub /dy exch def		% dy = y3 - y0
	x0 sub /dx exch def		% dx = x3 - x0
	x0 y0 translate
	dx 6 div dy 6 div translate
	0 0 moveto
%	s stringwidth /wy exch def /wx exch def
%	dx 2 mul 3 div wx div dy 2 mul 3 div wy div scale
	s show
	grestore
} bind def

/NewCenturySchlbk-Bold findfont 12 scalefont setfont
90 rotate
0 -8.5 inch translate
.2 setlinewidth

10 -2 0 {
	/iz exch def
	1 2 9 {
		/ix exch def
		1 2 7 {
			/iy exch def
			1 inch dup dup ix inch iy inch iz inch rsolid
		} for
	} for
} for

/Times-Italic findfont 22 scalefont setfont
/caption (cubes 11/20/90) def
10 inch caption stringwidth pop sub .5 inch moveto
caption show

showpage

% end of cubes.ps
