
initgraphics
0 setlinewidth
% vertices of dodecahedron
/verts [
[+.809 +.809 +.809]
[+.809 +.809 -.809]
[+.809 -.809 +.809]
[+.809 -.809 -.809]
[-.809 +.809 +.809]
[-.809 +.809 -.809]
[-.809 -.809 +.809]
[-.809 -.809 -.809]
[+.5  0 +1.309]
[+.5  0 -1.309]
[-.5  0 +1.309]
[-.5  0 -1.309]
[+1.309 +.5  0]
[+1.309 -.5  0]
[-1.309 +.5  0]
[-1.309 -.5  0]
[ 0 +1.309 +.5]
[ 0 +1.309 -.5]
[ 0 -1.309 +.5]
[ 0 -1.309 -.5]
] def

% sets of vertices for each face
/faces [
[ 5 17  1  9 11]
[ 5 14 15  7 11]
[19  3  9 11  7]
[13 12  1  9  3]
[17 16  4 14  5]
[15  6 18 19  7]
[18  2 13  3 19]
[12  0 16 17  1]
[14  4 10  6 15]
[ 6 10  8  2 18]
[ 2  8  0 12 13]
[ 0  8 10  4 16]
] def

clear
280 400 translate
70 70 scale

/xrotate 12 matrix rotate def
/zrotate 20 matrix rotate def
/facepts 15 array def

% vector for light source
/lx .3 def
/ly .3 def
/lz .3 def

/facecolor
{
	% given x2 y2 z2 x1 y1 z1 on stack
	% given cx cy cz as third point
	% these 3 points give the triangular face
	% compute normal vector to face = (p1-pc) X (p2-pc)
	% d1 = p1-pc
	% d2 = p2-pc
	/d1x 3 index cx sub def
	/d1y 2 index cy sub def
	/d1z 1 index cz sub def
	/d2x 6 index cx sub def
	/d2y 5 index cy sub def
	/d2z 4 index cz sub def
	% calc d1 X d2 (normal to face)
	/nx d1y d2z mul d2y d1z mul sub def
	/ny d1z d2x mul d2z d1x mul sub def
	/nz d1x d2y mul d2x d1y mul sub def
	% calc dot product with light source
	/colr nx lx mul ny ly mul nz lz mul add add def
	/colr colr 2.0 add 4.0 div def
	colr setgray
} def

faces
{
	% now have 1 face on stack
	/i 0 def
	/cx 0 def
	/cy 0 def
	/cz 0 def
	{
		% now have 1 vertex on stack		
		verts exch get
		% now have [x y z] for vertex
		aload pop
		% now have x y z on stack
		% rotate y z about x axis
		xrotate transform
		% get z x y on stack
		3 1 roll
		% rotate x y about z axis
		zrotate transform
		% get x y z on stack
		3 2 roll
		% calc for center pt of face
		/cx 3 index cx add def
		/cy 2 index cy add def
		/cz 1 index cz add def
		% now have x y z on stack
		facepts i 4 index put
		/i i 1 add def
		facepts i 3 index put
		/i i 1 add def
		facepts i 2 index put
		/i i 1 add def
		% pop x y z
		pop pop pop
	}
	forall
	% finish center pt calc
	/cx cx 5 div 4 mul def
	/cy cy 5 div 4 mul def
	/cz cz 5 div 4 mul def
	facepts aload pop

	% dup last x y z pt at front
	14 index 14 index 14 index
	facecolor
	cx cy moveto 2 index 2 index lineto pop pop pop 2 index 2 index lineto closepath fill
	facecolor
	cx cy moveto 2 index 2 index lineto pop pop pop 2 index 2 index lineto closepath fill
	facecolor
	cx cy moveto 2 index 2 index lineto pop pop pop 2 index 2 index lineto closepath fill
	facecolor
	cx cy moveto 2 index 2 index lineto pop pop pop 2 index 2 index lineto closepath fill
	facecolor
	cx cy moveto 2 index 2 index lineto pop pop pop 2 index 2 index lineto closepath fill
	pop pop	pop
}
forall

showpage
