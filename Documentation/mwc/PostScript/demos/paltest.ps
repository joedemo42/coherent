%!PS-Adobe-2.0
%%Title: PageMaker - PALTEST1.PM3
%%For: Windows
% PageMaker - PALTEST1.PM3
statusdict begin statusdict /jobname (PageMaker - PALTEST1.PM3; user: Windows) put end
/WinDict 282 dict def WinDict begin
/SS { /Temp save def } bind def
/SaveState /SS load def
/RS { Temp restore } bind def
/RestoreState /RS load def
/#C{userdict begin /#copies exch def end}def
/SJT{statusdict begin setjobtimeout end}def
currentscreen
/proc exch def
/angle exch def
/frequency exch def
/mxDefault matrix defaultmatrix def
/mx1 matrix def
/mx2 matrix def
/mx3 matrix def
/x0 0 def
/y0 0 def
/x1 0 def
/y1 0 def
/hypot { dup mul exch dup mul add sqrt } def
/iRes 300 def
/iDevRes 72 0 mx1 defaultmatrix dtransform hypot def
/PenWidth iRes iDevRes div def 
/iPenGray 0 def 
/inch { 72 mul } def
/fLandscape false def 
/cxPaper 8.5 inch def 
/cyPaper 11 inch def 
/cxMargin .25 inch def 
/cyMargin .125 inch def 
/DefaultSetScreen /setscreen load def
/SetCTM
{
 mx1 defaultmatrix setmatrix
 fLandscape { 0 cyPaper translate -90 rotate } if
 SetMap
 
 /ScreenAdjust 1 0 dtransform exch atan def
 /setscreen {exch ScreenAdjust add exch DefaultSetScreen} def
} def
/SetMap
 {
 fLandscape
 {cyMargin cxPaper cxMargin sub}
 {cxMargin cyPaper cyMargin sub}
 ifelse
 translate
 72 iRes div dup neg
 scale
 } def
/SetMetrics
 {
 /fLandscape exch 0 ne def
 /iRes exch def
 fLandscape
 {
 /cxPaper exch iRes div inch def 
 /cyPaper exch iRes div inch def 
 /cxMargin exch iRes div inch def 
 /cyMargin exch iRes div inch def 
 }{
 /cyPaper exch iRes div inch def 
 /cxPaper exch iRes div inch def 
 /cyMargin exch iRes div inch def 
 /cxMargin exch iRes div inch def 
 }
 ifelse
 SetCTM
 } def
/ClipBox
 {
 2 {.5 add 4 1 roll} repeat
 2 {.5 sub 4 1 roll} repeat
 /y1 exch def /x1 exch def
 /y0 exch def /x0 exch def
 newpath
 x0 y0 moveto
 x1 y0 lineto
 x1 y1 lineto
 x0 y1 lineto
 closepath
 clip
 } def
/mxCharToUser matrix def
/mxAlpha matrix def
/str 1 string def
/BreakChar 32 def
/fBreakExtra false def
/ratGdiDev { iDevRes iRes div } def
/Align { ratGdiDev mul round ratGdiDev div } def
/AlignXY { iRes iDevRes ne {Align exch Align exch } if } def
/Underline
 {
 currentpoint currentlinewidth newpath
 cyUnderline setlinewidth
 x0 dxUnderline add y0 dyUnderline neg add AlignXY moveto
 dx dy rlineto stroke
 setlinewidth moveto
 } bind def
/Strikeout
 {
 currentpoint currentlinewidth newpath
 cyUnderline setlinewidth
 x0 dxStrikeout add y0 dyStrikeout neg add AlignXY moveto
 dx dy rlineto stroke
 setlinewidth moveto
 } bind def
/SetUnderline 
 {
 dup /FontInfo get /UnderlineThickness known not
 { pop /Courier findfont } if
 /FontInfo get dup /UnderlinePosition get
 Sy mul 1000 div
 0 exch mxAlpha transform
 /dyUnderline exch def
 /dxUnderline exch def
 /UnderlineThickness get Sy mul 1000 div /cyUnderline exch def
 } def
/SetStrikeout
 {
 0 Sy 0.3 mul mxAlpha transform
 /dyStrikeout exch def
 /dxStrikeout exch def
 } def
/SJ
{
 1 index 0 eq
 { pop pop /fBreakExtra false def }
 { div dup
 /dxBreak exch 1 mul def 
 /dyBreak exch 0 mul def 
 /fBreakExtra true def
 } ifelse
} def
/SetJustify /SJ load def
/SB
{
 grayCur setgray
 /str exch def
 /cbStr str length fBreakExtra not { dup 1 gt { 1 sub } if } if def 
 /dxGdi exch def
 alpha 0 ne
 { 
 dxGdi 0 mxAlpha transform 
 /dxGdi exch def /dyGdi exch def
 mxCharToUser transform AlignXY 
 /y0 exch def /x0 exch def
 str stringwidth
 neg dyGdi add cbStr div /dyExtra exch def
 neg dxGdi add cbStr div /dxExtra exch def
 }
 { 
 /y0 exch def
 
 /x0 exch def
 iRes iDevRes ne 
 { x0 y0 AlignXY /y0 exch def /x0 exch def } if
 str stringwidth pop
 neg dxGdi add cbStr div /dxExtra exch def /dyExtra 0 def
 } ifelse
 x0 y0 moveto
 fBreakExtra
 { dxBreak dyBreak BreakChar dxExtra dyExtra str awidthshow }
 { dxExtra dyExtra str ashow }
 ifelse
 fStrikeout fUnderline or
 {
 currentpoint
 exch dxExtra sub exch dyExtra sub
 y0 sub /dy exch def
 x0 sub /dx exch def
 fUnderline {Underline} if
 fStrikeout {Strikeout} if
 } if
 /fBreakExtra false def
} bind def
/StrBlt /SB load def
/ANSIVec[
16#0 /grave
16#1 /acute
16#2 /circumflex
16#3 /tilde
16#4 /macron
16#5 /breve
16#6 /dotaccent
16#7 /dieresis
16#8 /ring
16#9 /cedilla
16#A /hungarumlaut
16#B /ogonek
16#C /caron
16#D /dotlessi
16#27 /quotesingle
16#60 /grave
16#7C /bar 
16#91 /quoteleft
16#92 /quoteright
16#93 /quotedblleft
16#94 /quotedblright
16#95 /bullet
16#96 /endash
16#97 /emdash
16#A0 /space
16#A4 /currency
16#A6 /brokenbar 
16#A7 /section
16#A8 /dieresis
16#A9 /copyright 
16#AA /ordfeminine
16#AB /guillemotleft
16#AC /logicalnot 
16#AD /hyphen
16#AE /registered 
16#AF /macron
16#B0 /degree 
16#B1 /plusminus 
16#B2 /twosuperior 
16#B3 /threesuperior 
16#B4 /acute
16#B5 /mu 
16#B6 /paragraph
16#B7 /periodcentered
16#B8 /cedilla
16#B9 /onesuperior 
16#BA /ordmasculine
16#BB /guillemotright
16#BC /onequarter 
16#BD /onehalf 
16#BE /threequarters 
16#BF /questiondown
16#C0 /Agrave
16#C1 /Aacute
16#C2 /Acircumflex
16#C3 /Atilde
16#C4 /Adieresis
16#C5 /Aring
16#C6 /AE
16#C7 /Ccedilla
16#C8 /Egrave
16#C9 /Eacute
16#CA /Ecircumflex
16#CB /Edieresis
16#CC /Igrave
16#CD /Iacute
16#CE /Icircumflex
16#CF /Idieresis
16#D0 /Eth 
16#D1 /Ntilde
16#D2 /Ograve
16#D3 /Oacute
16#D4 /Ocircumflex
16#D5 /Otilde
16#D6 /Odieresis
16#D7 /multiply 
16#D8 /Oslash
16#D9 /Ugrave
16#DA /Uacute
16#DB /Ucircumflex
16#DC /Udieresis
16#DD /Yacute 
16#DE /Thorn 
16#DF /germandbls
16#E0 /agrave
16#E1 /aacute
16#E2 /acircumflex
16#E3 /atilde
16#E4 /adieresis
16#E5 /aring
16#E6 /ae
16#E7 /ccedilla
16#E8 /egrave
16#E9 /eacute
16#EA /ecircumflex
16#EB /edieresis
16#EC /igrave
16#ED /iacute
16#EE /icircumflex
16#EF /idieresis
16#F0 /eth 
16#F1 /ntilde
16#F2 /ograve
16#F3 /oacute
16#F4 /ocircumflex
16#F5 /otilde
16#F6 /odieresis
16#F7 /divide 
16#F8 /oslash
16#F9 /ugrave
16#FA /uacute
16#FB /ucircumflex
16#FC /udieresis
16#FD /yacute 
16#FE /thorn 
16#FF /ydieresis
] def
/reencdict 12 dict def
/IsChar {basefontdict /CharStrings get exch known} bind def
/MapCh {
 dup IsChar not 
 {pop /bullet} if 
 newfont /Encoding get 3 1 roll put 
 }bind def
/MapDegree{16#b0 /degree IsChar {/degree}{/ring} ifelse MapCh} bind def
/MapBB {16#a6 /brokenbar IsChar {/brokenbar}{/bar}ifelse MapCh} bind def
/ANSIFont
 {
 reencdict begin
 /newfontname exch def 
 /basefontname exch def
 FontDirectory newfontname known not
 {
 /basefontdict basefontname findfont def
 /newfont basefontdict maxlength dict def
 basefontdict
 { exch dup /FID ne
 { dup /Encoding eq
 { exch dup length array copy newfont 3 1 roll put }
 { exch newfont 3 1 roll put }
 ifelse
 }
 {pop pop}
 ifelse
 }forall
 newfont /FontName newfontname put
 127 1 159 {newfont /Encoding get exch /bullet put} for
 ANSIVec aload pop
 ANSIVec length 2 idiv
 {MapCh}repeat 
 MapDegree MapBB
 newfontname newfont definefont pop
 } if
 newfontname
 end
 } bind def
/font
 {
 9 1 roll
 0 ne {0} {1} ifelse 
 /grayCur exch def
 0 ne /fStrikeout exch def
 0 ne /fUnderline exch def
 /Sy exch def
 /Sx exch def
 /beta exch 10.0 div def
 /alpha exch 10.0 div def
 /BreakChar exch def
 alpha mxAlpha rotate pop
 findfont dup
 Sx Sy neg mx1 scale
 alpha mx2 rotate
 mx3 concatmatrix
 makefont setfont
 
 dup /FontBBox get
 dup 3 get dup 3 2 roll 1 get sub div
 Sy mul /dyFromTop exch def
 0 dyFromTop mx1 translate alpha mx2 rotate mxCharToUser concatmatrix pop
 0 0 mxCharToUser transform mxCharToUser translate pop
 SetUnderline
 SetStrikeout
 } def
/E { showpage SetCTM PenWidth setlinewidth } def
/eject /E load def
/m matrix def 
/cellsize 0 def 
/bitison
 {
 /iy exch def
 /ix exch def
 pat iy 7 and get 
 1 7 ix 7 and sub bitshift
 and 
 0 eq 
 } bind def
/spotfunction
 {
 exch
 1 add 4 mul cvi 
 exch
 1 add 4 mul cvi 
 bitison 
 { /onbits onbits 1 add def 1 }
 { /offbits offbits 1 add def 0 }
 ifelse
 } bind def
/PatGray { offbits offbits onbits add div setgray } def
/SolidGray { iBrushGray setgray } def
/PenGray { iPenGray setgray } def
/SetPattern
 {
 /pat exch def
 /cellsize iRes 300 16 div div def
 /rm 90 matrix rotate def
 /sm cellsize dup matrix scale def
 sm rm matrix concatmatrix
 matrix currentmatrix
 m concatmatrix pop
 1 0 m dtransform /dy exch def /dx exch def
 /onbits 0 def
 /offbits 0 def
 iDevRes dx dy hypot div 
 dx dy atan /spotfunction load setscreen
 {} settransfer
 0 setgray
 /fGrayScreen false def
 } bind def
/min { 1 index 1 index gt { exch } if pop } def
/NonZero { dup 0 eq { pop 1 } if } def
/sto { exch def } def
/iBrush 1 def 
/iPen 0 def 
/fGrayScreen true def 
/iBrushGray 0 def 
/picstr 1 string def
/cx 0 def
/cy 0 def
/FillPoly
 {
 iBrush 0 eq { SolidGray fill 0 setgray } if 
 iBrush 1 eq {} if 
 iBrush 2 eq {} if 
 iBrush 3 eq { PatGray fill 0 setgray } if 
 } def
/EOFillPoly
 {
 iBrush 0 eq { SolidGray eofill 0 setgray } if 
 iBrush 1 eq {} if 
 iBrush 2 eq {} if 
 iBrush 3 eq { PatGray eofill 0 setgray } if 
 } def
/GDIStroke
 {
 iPen 0 ge iPen 5 lt and
 { PenGray stroke 0 setgray }
 { newpath } 
 ifelse
 } def
/GetAngle
 {
 Ty sub
 Sy div
 exch
 Tx sub
 Sx div
 atan
 } def
/SetBrush
 {
 /iBrush exch def
 iBrush 0 eq
 {
 /iBrushGray exch 1000 div def
 fGrayScreen not 
 {
 frequency angle WinDict /proc get DefaultSetScreen
 } if
 /fGrayScreen true def
 0 setgray
 } if
 } def
/GapWidth { iRes 0.0825 mul PenWidth mul cvi } def
/DotWidth { iRes 0.020 mul PenWidth mul cvi } def
/DashWidth { iRes 0.125 mul PenWidth mul cvi } def
/SetPen
 {
 /iPenGray exch 1000 div def
 /PenWidth exch def
 /iPen exch def
 iPen 0 ge
 {
 iPen 0 eq 
 { [] 0 setdash } if
 iPen 1 eq 
 { [DashWidth GapWidth] 0 setdash } if
 iPen 2 eq 
 { [DotWidth GapWidth] 0 setdash } if
 iPen 3 eq 
 { [DashWidth GapWidth DotWidth GapWidth] 0 setdash } if
 iPen 4 eq 
 { [DashWidth GapWidth DotWidth GapWidth DotWidth GapWidth] 0 setdash} if
 } if
 PenWidth setlinewidth
 } bind def
/EBox {
 /y1 sto /x1 sto
 /y0 sto /x0 sto
 /Sx x1 x0 sub 2 div abs NonZero def
 /Sy y1 y0 sub 2 div abs NonZero def
 Sx Sy min /r sto
 x0 x1 add 2 div /Tx sto
 y0 y1 add 2 div /Ty sto
 Tx Ty translate
 Sx r div Sy r div scale
 0 0 r
 }def
/ABox
 {
 /y3 sto /x3 sto
 /y2 sto /x2 sto
 EBox
 
 x0 x1 eq y0 y1 eq or
 {
 y0 y1 eq
 { x2 x3 le { 90 180 } { 0 90 } ifelse }
 { y2 y3 le { 0 90 } { 270 360 } ifelse }
 ifelse
 }
 {x3 y3 GetAngle x2 y2 GetAngle}
 ifelse
 }def
/GDIEllipse
 {
 gsave EBox
 newpath 0 360 arc closepath SetCTM
 gsave FillPoly grestore GDIStroke
 grestore
 } def
/GDIArc {gsave ABox newpath arc SetCTM GDIStroke grestore} def
/GDIPie
 {
 gsave ABox newpath 0 0 moveto arc closepath SetCTM
 gsave FillPoly grestore GDIStroke grestore
 } def
/Box
 {
 save 5 1 roll
 dtransform exch 1 sub exch 1 sub idtransform
 /y2 sto /x2 sto
 newpath AlignXY moveto
 x2 0 rlineto
 0 y2 rlineto
 x2 neg 0 rlineto
 closepath FillPoly restore
 } bind def
/GDIRect
 {
 SaveState
 /y1 sto /x1 sto
 /y0 sto /x0 sto
 newpath
 x0 y0 moveto
 x0 y1 lineto
 x1 y1 lineto
 x1 y0 lineto
 closepath
 gsave FillPoly grestore GDIStroke
 RestoreState
 0 setgray 
 } bind def
/min {2 copy gt {exch} if pop} bind def
/max {2 copy lt {exch} if pop} bind def
/GDIRoundRect {
 SaveState
 /y2 sto /x2 sto
 /yscale y2 x2 div 1 max def
 /xscale x2 y2 div 1 max def
 /y1 exch yscale div def
 /x1 exch xscale div def
 /y0 exch yscale div def
 /x0 exch xscale div def
 /r2 x2 y2 min def
 xscale yscale scale
 newpath
 x0 r2 add y0 moveto
 x1 y0 x1 y1 r2 arcto 4 { pop } repeat
 x1 y1 x0 y1 r2 arcto 4 { pop } repeat
 x0 y1 x0 y0 r2 arcto 4 { pop } repeat
 x0 y0 x1 y0 r2 arcto 4 { pop } repeat
 closepath
 gsave FillPoly grestore
 SetCTM GDIStroke
 RestoreState
 0 setgray
} bind def
/StartFill
 {
 newpath
 moveto
 } def
/PolyPoints
 {
 { lineto } repeat
 } def
/EndFill
 {
 closepath
 gsave
 0 ne {EOFillPoly} {FillPoly} ifelse
 grestore
 GDIStroke
 } def
/PL
 {
 newpath
 3 1 roll
 .5 add exch .5 add exch moveto
 1 sub
 {.5 add exch .5 add exch lineto } repeat
 GDIStroke
 clear
} bind def
/GDIPolyLine /PL load def
/GDILine
 {
 SaveState
 newpath
 4 2 roll
 moveto
 lineto
 GDIStroke
 RestoreState
 } def
/SL
 {
 SaveState
 gsave
 0 eq
 {PenGray}
 {
 iBrush 0 eq {SolidGray} if 
 iBrush 1 eq {0 setgray} if 
 iBrush 2 eq iBrush 3 eq or {PatGray} if 
 1 setlinewidth
 [] 0 setdash
 } ifelse
 exch /y0 exch def
 {
 y0 moveto
 y0 lineto
 stroke
 } repeat
 PenWidth setlinewidth
 0 setgray
 grestore
 RestoreState
} bind def
/_S /SL load def
/cbRun 0 def
/cbPat 0 def
/cRep 0 def
/rgbRun 1024 string def
/rgbByte 1 string def
/GetByte { currentfile rgbByte readhexstring pop 0 get } bind def
/GetWord { GetByte 256 mul GetByte add } bind def
/GetString { currentfile exch readhexstring pop pop } bind def
/RepString
 {
 /cbRun cbPat cRep mul cvi store
 rgbRun 0 cbPat getinterval GetString
 cbPat
 {
 dup 2 mul exch rgbRun exch
 rgbRun 0 2 index getinterval
 putinterval
 dup 16 ge {exit} if
 } loop
 /cbPat exch def
 0 cbPat cbRun 1 sub 
 { rgbRun exch rgbRun 0 cbPat getinterval putinterval } for
 rgbRun 0 cbRun getinterval
 } bind def
/GetRun
 {
 /cRep GetWord def
 /cbPat GetByte def
 cbPat 0 eq { rgbRun 0 cRep getinterval GetString } { RepString } ifelse
 } bind def
/Scan
 {
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 gsave
 x0 y0 translate
 save
 cx 1 scale
 cx 1 false [cx 0 0 1 0 0] { GetRun } imagemask
 restore
 grestore
 } bind def
/BB
{
 SaveState
 /cy exch cvi def
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 /picstr cx 7 add 8 idiv string def 
 gsave
 0 setgray 
 x0 y0 translate
 cx cy false [1 0 0 1 0 0] {currentfile picstr readhexstring pop} imagemask
 grestore
 RestoreState
} bind def
/BitBlt /BB load def
/Bb
{
 SaveState
 /cy exch cvi def
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 /picstr cx 7 add 8 idiv string def 
 x0 y0 translate
 cx cy false [1 0 0 1 0 0] {currentfile picstr readstring pop} imagemask
 RestoreState
} bind def
/CPYBB
{
 SaveState
 /cy exch cvi def
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 /picstr cx 7 add 8 idiv string def 
 gsave
 0 setgray 
 x0 y0 translate
 cx cy 1 [1 0 0 1 0 0] {currentfile picstr readhexstring pop} image
 grestore
 RestoreState
} bind def
/CPYBb
{
 SaveState
 /cy exch cvi def
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 /picstr cx 7 add 8 idiv string def 
 x0 y0 translate
 cx cy 1 [1 0 0 1 0 0] {currentfile picstr readstring pop} image
 RestoreState
} bind def
/OB
 {
 /cy exch def
 /cx exch def
 /y0 exch def
 /x0 exch def
 gsave
 1 setgray
 newpath
 x0 y0 moveto
 x0 cx add y0 lineto
 x0 cx add y0 cy add lineto
 x0 y0 cy add lineto
 closepath
 fill
 grestore
 } bind def
/OpaqueBox /OB load def
letter
{
mark
1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0
counttomark dup 3 add -1 roll exch
2 sub mul dup floor cvi
dup 3 1 roll sub
exch dup
3 add index exch 2 add index dup
4 1 roll
sub mul add
counttomark 1 add 1 roll
cleartomark
}
settransfer
75 42 2550 3300 300 0 SetMetrics

SS
statusdict begin /manualfeed false store end
0 SJT
1 #C
1 #C
32 0 0 42 42 0 0 1 /Palatino-Bold /font30 ANSIFont font
913 129 631 (This is a test of the Palatino Font) SB
32 0 0 58 58 0 0 1 /Palatino-Roman /font29 ANSIFont font
1608 392 437 (Palatino 14 point) SB
-25 5 SJ
1608 534 667 (Text type that is too small) SB
114 3 SJ
1608 605 528 (or too large makes) SB
25 3 SJ
1608 676 617 (reading difficult.  That's) SB
105 2 SJ
1608 747 537 (because small type) SB
67 2 SJ
1608 817 575 (reduces visibility and) SB
100 3 SJ
1608 888 542 (large type forces the) SB
24 5 SJ
1608 959 618 (reader to look at type in) SB
2 4 SJ
1608 1030 640 (sections rather thatn as a) SB
-28 5 SJ
1608 1101 670 (whole.  It's usually best to) SB
8 6 SJ
1608 1172 634 (set type in the range of 9) SB
1608 1242 291 (to 12 point.) SB
32 0 0 58 58 0 0 1 /Palatino-Italic /font31 ANSIFont font
-47 7 SJ
1608 1384 689 (Text type that  is too small or) SB
88 3 SJ
1608 1455 554 (too large makes reading) SB
69 3 SJ
1608 1526 573 (difficult.  That's because) SB
-13 3 SJ
1608 1597 655 (small type reduces visibility) SB
72 4 SJ
1608 1668 570 (and large type forces the) SB
88 5 SJ
1608 1738 554 (reader to look at type in) SB
72 4 SJ
1608 1809 570 (sections rather than as a) SB
25 5 SJ
1608 1880 617 (whole.  It's usually best to) SB
-11 8 SJ
1608 1951 653 (set type in  the range of 9 to) SB
1608 2022 210 (12 point.) SB
32 0 0 58 58 0 0 1 /Palatino-Bold /font30 ANSIFont font
121 4 SJ
1608 2163 521 (Text type that is too) SB
-4 4 SJ
1608 2234 646 (small or too large makes) SB
1 3 SJ
1608 2305 641 (reading difficult.  That's) SB
92 2 SJ
1608 2376 550 (because small type) SB
71 2 SJ
1608 2447 571 (reduces visibility and) SB
108 3 SJ
1608 2518 534 (large type forces the) SB
13 5 SJ
1608 2588 629 (reader to look at type in) SB
10 4 SJ
1608 2659 632 (sections rather than as a) SB
19 4 SJ
1608 2730 623 (whole.  It's usually best) SB
-28 6 SJ
1608 2801 670 (to set type in the range of) SB
1608 2872 338 (9 to 12 point.) SB
32 0 0 50 50 0 0 1 /Palatino-Roman /font29 ANSIFont font
917 400 375 (Palatino 12 point) SB
10 6 SJ
917 521 632 (Text type that is too small or) SB
85 3 SJ
917 581 557 (too large makes reading) SB
81 3 SJ
917 642 561 (difficult.  That's because) SB
17 3 SJ
917 702 625 (small type reduces visibility) SB
95 4 SJ
917 763 547 (and large type forces the) SB
110 5 SJ
917 823 532 (reader to look at type in) SB
95 4 SJ
917 883 547 (sections rather thatn as a) SB
-7 6 SJ
917 944 649 (whole.  It's usually best to set) SB
52 7 SJ
917 1004 590 (type in the range of 9 to 12) SB
917 1065 130 (point.) SB
32 0 0 50 50 0 0 1 /Palatino-Italic /font31 ANSIFont font
-25 8 SJ
917 1185 667 (Text type that  is too small or too) SB
58 3 SJ
917 1246 584 (large makes reading difficult.) SB
115 4 SJ
917 1306 527 (That's because  small type) SB
2 4 SJ
917 1367 640 (reduces visibility and large type) SB
-32 7 SJ
917 1427 674 (forces the reader to look at type in) SB
14 5 SJ
917 1488 628 (sections rather than as a whole.) SB
-43 8 SJ
917 1548 685 (It's usually best to set type in  the) SB
917 1608 447 (range of 9 to 12 point.) SB
32 0 0 50 50 0 0 1 /Palatino-Bold /font30 ANSIFont font
-11 6 SJ
917 1729 653 (Text type that is too small or) SB
93 3 SJ
917 1790 549 (too large makes reading) SB
80 3 SJ
917 1850 562 (difficult.  That's because) SB
-9 3 SJ
917 1911 651 (small type reduces visibility) SB
80 4 SJ
917 1971 562 (and large type forces the) SB
93 5 SJ
917 2031 549 (reader to look at type in) SB
94 4 SJ
917 2092 548 (sections rather than as a) SB
41 5 SJ
917 2152 601 (whole.  It's usually best to) SB
-43 8 SJ
917 2213 685 (set type in the range of 9 to 12) SB
917 2273 137 (point.) SB
32 0 0 33 33 0 0 1 /Palatino-Roman /font29 ANSIFont font
225 396 233 (Palatino 8 point) SB
-14 9 SJ
225 476 656 (Text type that is too small or too large makes) SB
6 6 SJ
225 515 636 (reading difficult.  That's because small type) SB
22 6 SJ
225 555 620 (reduces visibility and large type forces the) SB
-15 8 SJ
225 594 657 (reader to look at type in sections rather thatn) SB
-14 11 SJ
225 634 656 (as a whole.  It's usually best to set type in the) SB
225 674 318 (range of 9 to 12 point.) SB
32 0 0 33 33 0 0 1 /Palatino-Italic /font31 ANSIFont font
36 10 SJ
225 753 606 (Text type that  is too small or too large makes) SB
55 7 SJ
225 792 587 (reading difficult.  That's because  small type) SB
-8 7 SJ
225 832 650 (reduces visibility and large type forces the reader) SB
-6 10 SJ
225 871 648 (to look at type in sections rather than as a whole.) SB
-25 13 SJ
225 911 667 (It's usually best to set type in  the range of 9 to 12) SB
225 951 78 (point.) SB
32 0 0 33 33 0 0 1 /Palatino-Bold /font30 ANSIFont font
-30 9 SJ
225 1030 672 (Text type that is too small or too large makes) SB
-17 6 SJ
225 1069 659 (reading difficult.  That's because small type) SB
2 6 SJ
225 1109 640 (reduces visibility and large type forces the) SB
-21 8 SJ
225 1149 663 (reader to look at type in sections rather than) SB
-34 11 SJ
225 1188 676 (as a whole.  It's usually best to set type in the) SB
225 1228 324 (range of 9 to 12 point.) SB
32 0 0 42 42 0 0 1 /Palatino-Roman /font29 ANSIFont font
225 1585 314 (Palatino 10 point) SB
38 7 SJ
225 1685 604 (Text type that is too small or too) SB
66 3 SJ
225 1735 576 (large makes reading difficult.) SB
13 4 SJ
225 1785 629 (That's because small type reduces) SB
10 5 SJ
225 1835 632 (visibility and large type forces the) SB
36 6 SJ
225 1885 606 (reader to look at type in sections) SB
-21 7 SJ
225 1935 663 (rather thatn as a whole.  It's usually) SB
3 9 SJ
225 1985 639 (best to set type in the range of 9 to) SB
225 2035 162 (12 point.) SB
32 0 0 42 42 0 0 1 /Palatino-Italic /font31 ANSIFont font
-17 9 SJ
225 2135 659 (Text type that  is too small or too large) SB
111 4 SJ
225 2185 531 (makes reading difficult.  That's) SB
21 5 SJ
225 2235 621 (because  small type reduces visibility) SB
-7 7 SJ
225 2285 649 (and large type forces the reader to look) SB
59 7 SJ
225 2335 583 (at type in sections rather than as a) SB
10 8 SJ
225 2385 632 (whole.  It's usually best to set type in) SB
225 2435 439 (the range of 9 to 12 point.) SB
32 0 0 42 42 0 0 1 /Palatino-Bold /font30 ANSIFont font
25 7 SJ
225 2535 617 (Text type that is too small or too) SB
73 3 SJ
225 2585 569 (large makes reading difficult.) SB
-10 4 SJ
225 2635 652 (That's because small type reduces) SB
225 2685 460 (visibility and large type) SB
E
RS

SS
statusdict begin /manualfeed false store end
0 SJT
1 #C
RS
end
