%!PS-Adobe-2.0
%%Title: PageMaker - ARTSAMP2.PM3
%%For: Windows
% PageMaker - ARTSAMP2.PM3
statusdict begin statusdict /jobname (PageMaker - ARTSAMP2.PM3; user: Windows) put end
/WinDict 282 dict def WinDict begin
/SS { /Temp save def } bind def
/SaveState /SS load def
/RS { Temp restore } bind def
/RestoreState /RS load def
/#C{userdict begin /#copies exch def end}def
/SJT{statusdict begin setjobtimeout end}def
currentscreen
/proc exch def
/angle exch def
/frequency exch def
/mxDefault matrix defaultmatrix def
/mx1 matrix def
/mx2 matrix def
/mx3 matrix def
/x0 0 def
/y0 0 def
/x1 0 def
/y1 0 def
/hypot { dup mul exch dup mul add sqrt } def
/iRes 300 def
/iDevRes 72 0 mx1 defaultmatrix dtransform hypot def
/PenWidth iRes iDevRes div def
/iPenGray 0 def
/inch { 72 mul } def
/fLandscape false def
/cxPaper 8.5 inch def
/cyPaper 11 inch def
/cxMargin .25 inch def
/cyMargin .125 inch def
/DefaultSetScreen /setscreen load def
/SetCTM
{
 mx1 defaultmatrix setmatrix
 fLandscape { 0 cyPaper translate -90 rotate } if
 SetMap

 /ScreenAdjust 1 0 dtransform exch atan def
 /setscreen {exch ScreenAdjust add exch DefaultSetScreen} def
} def
/SetMap
 {
 fLandscape
 {cyMargin cxPaper cxMargin sub}
 {cxMargin cyPaper cyMargin sub}
 ifelse
 translate
 72 iRes div dup neg
 scale
 } def
/SetMetrics
 {
 /fLandscape exch 0 ne def
 /iRes exch def
 fLandscape
 {
 /cxPaper exch iRes div inch def
 /cyPaper exch iRes div inch def
 /cxMargin exch iRes div inch def
 /cyMargin exch iRes div inch def
 }{
 /cyPaper exch iRes div inch def
 /cxPaper exch iRes div inch def
 /cyMargin exch iRes div inch def
 /cxMargin exch iRes div inch def
 }
 ifelse
 SetCTM
 } def
/ClipBox
 {
 2 {.5 add 4 1 roll} repeat
 2 {.5 sub 4 1 roll} repeat
 /y1 exch def /x1 exch def
 /y0 exch def /x0 exch def
 newpath
 x0 y0 moveto
 x1 y0 lineto
 x1 y1 lineto
 x0 y1 lineto
 closepath
 clip
 } def
/mxCharToUser matrix def
/mxAlpha matrix def
/str 1 string def
/BreakChar 32 def
/fBreakExtra false def
/ratGdiDev { iDevRes iRes div } def
/Align { ratGdiDev mul round ratGdiDev div } def
/AlignXY { iRes iDevRes ne {Align exch Align exch } if } def
/Underline
 {
 currentpoint currentlinewidth newpath
 cyUnderline setlinewidth
 x0 dxUnderline add y0 dyUnderline neg add AlignXY moveto
 dx dy rlineto stroke
 setlinewidth moveto
 } bind def
/Strikeout
 {
 currentpoint currentlinewidth newpath
 cyUnderline setlinewidth
 x0 dxStrikeout add y0 dyStrikeout neg add AlignXY moveto
 dx dy rlineto stroke
 setlinewidth moveto
 } bind def
/SetUnderline
 {
 dup /FontInfo get /UnderlineThickness known not
 { pop /Courier findfont } if
 /FontInfo get dup /UnderlinePosition get
 Sy mul 1000 div
 0 exch mxAlpha transform
 /dyUnderline exch def
 /dxUnderline exch def
 /UnderlineThickness get Sy mul 1000 div /cyUnderline exch def
 } def
/SetStrikeout
 {
 0 Sy 0.3 mul mxAlpha transform
 /dyStrikeout exch def
 /dxStrikeout exch def
 } def
/SJ
{
 1 index 0 eq
 { pop pop /fBreakExtra false def }
 { div dup
 /dxBreak exch 1 mul def
 /dyBreak exch 0 mul def
 /fBreakExtra true def
 } ifelse
} def
/SetJustify /SJ load def
/SB
{
 grayCur setgray
 /str exch def
 /cbStr str length fBreakExtra not { dup 1 gt { 1 sub } if } if def
 /dxGdi exch def
 alpha 0 ne
 {
 dxGdi 0 mxAlpha transform
 /dxGdi exch def /dyGdi exch def
 mxCharToUser transform AlignXY
 /y0 exch def /x0 exch def
 str stringwidth
 neg dyGdi add cbStr div /dyExtra exch def
 neg dxGdi add cbStr div /dxExtra exch def
 }
 {
 /y0 exch def

 /x0 exch def
 iRes iDevRes ne
 { x0 y0 AlignXY /y0 exch def /x0 exch def } if
 str stringwidth pop
 neg dxGdi add cbStr div /dxExtra exch def /dyExtra 0 def
 } ifelse
 x0 y0 moveto
 fBreakExtra
 { dxBreak dyBreak BreakChar dxExtra dyExtra str awidthshow }
 { dxExtra dyExtra str ashow }
 ifelse
 fStrikeout fUnderline or
 {
 currentpoint
 exch dxExtra sub exch dyExtra sub
 y0 sub /dy exch def
 x0 sub /dx exch def
 fUnderline {Underline} if
 fStrikeout {Strikeout} if
 } if
 /fBreakExtra false def
} bind def
/StrBlt /SB load def
/ANSIVec[
16#0 /grave
16#1 /acute
16#2 /circumflex
16#3 /tilde
16#4 /macron
16#5 /breve
16#6 /dotaccent
16#7 /dieresis
16#8 /ring
16#9 /cedilla
16#A /hungarumlaut
16#B /ogonek
16#C /caron
16#D /dotlessi
16#27 /quotesingle
16#60 /grave
16#7C /bar
16#91 /quoteleft
16#92 /quoteright
16#93 /quotedblleft
16#94 /quotedblright
16#95 /bullet
16#96 /endash
16#97 /emdash
16#A0 /space
16#A4 /currency
16#A6 /brokenbar
16#A7 /section
16#A8 /dieresis
16#A9 /copyright
16#AA /ordfeminine
16#AB /guillemotleft
16#AC /logicalnot
16#AD /hyphen
16#AE /registered
16#AF /macron
16#B0 /degree
16#B1 /plusminus
16#B2 /twosuperior
16#B3 /threesuperior
16#B4 /acute
16#B5 /mu
16#B6 /paragraph
16#B7 /periodcentered
16#B8 /cedilla
16#B9 /onesuperior
16#BA /ordmasculine
16#BB /guillemotright
16#BC /onequarter
16#BD /onehalf
16#BE /threequarters
16#BF /questiondown
16#C0 /Agrave
16#C1 /Aacute
16#C2 /Acircumflex
16#C3 /Atilde
16#C4 /Adieresis
16#C5 /Aring
16#C6 /AE
16#C7 /Ccedilla
16#C8 /Egrave
16#C9 /Eacute
16#CA /Ecircumflex
16#CB /Edieresis
16#CC /Igrave
16#CD /Iacute
16#CE /Icircumflex
16#CF /Idieresis
16#D0 /Eth
16#D1 /Ntilde
16#D2 /Ograve
16#D3 /Oacute
16#D4 /Ocircumflex
16#D5 /Otilde
16#D6 /Odieresis
16#D7 /multiply
16#D8 /Oslash
16#D9 /Ugrave
16#DA /Uacute
16#DB /Ucircumflex
16#DC /Udieresis
16#DD /Yacute
16#DE /Thorn
16#DF /germandbls
16#E0 /agrave
16#E1 /aacute
16#E2 /acircumflex
16#E3 /atilde
16#E4 /adieresis
16#E5 /aring
16#E6 /ae
16#E7 /ccedilla
16#E8 /egrave
16#E9 /eacute
16#EA /ecircumflex
16#EB /edieresis
16#EC /igrave
16#ED /iacute
16#EE /icircumflex
16#EF /idieresis
16#F0 /eth
16#F1 /ntilde
16#F2 /ograve
16#F3 /oacute
16#F4 /ocircumflex
16#F5 /otilde
16#F6 /odieresis
16#F7 /divide
16#F8 /oslash
16#F9 /ugrave
16#FA /uacute
16#FB /ucircumflex
16#FC /udieresis
16#FD /yacute
16#FE /thorn
16#FF /ydieresis
] def
/reencdict 12 dict def
/IsChar {basefontdict /CharStrings get exch known} bind def
/MapCh {
 dup IsChar not
 {pop /bullet} if
 newfont /Encoding get 3 1 roll put
 }bind def
/MapDegree{16#b0 /degree IsChar {/degree}{/ring} ifelse MapCh} bind def
/MapBB {16#a6 /brokenbar IsChar {/brokenbar}{/bar}ifelse MapCh} bind def
/ANSIFont
 {
 reencdict begin
 /newfontname exch def
 /basefontname exch def
 FontDirectory newfontname known not
 {
 /basefontdict basefontname findfont def
 /newfont basefontdict maxlength dict def
 basefontdict
 { exch dup /FID ne
 { dup /Encoding eq
 { exch dup length array copy newfont 3 1 roll put }
 { exch newfont 3 1 roll put }
 ifelse
 }
 {pop pop}
 ifelse
 }forall
 newfont /FontName newfontname put
 127 1 159 {newfont /Encoding get exch /bullet put} for
 ANSIVec aload pop
 ANSIVec length 2 idiv
 {MapCh}repeat
 MapDegree MapBB
 newfontname newfont definefont pop
 } if
 newfontname
 end
 } bind def
/font
 {
 9 1 roll
 0 ne {0} {1} ifelse
 /grayCur exch def
 0 ne /fStrikeout exch def
 0 ne /fUnderline exch def
 /Sy exch def
 /Sx exch def
 /beta exch 10.0 div def
 /alpha exch 10.0 div def
 /BreakChar exch def
 alpha mxAlpha rotate pop
 findfont dup
 Sx Sy neg mx1 scale
 alpha mx2 rotate
 mx3 concatmatrix
 makefont setfont

 dup /FontBBox get
 dup 3 get dup 3 2 roll 1 get sub div
 Sy mul /dyFromTop exch def
 0 dyFromTop mx1 translate alpha mx2 rotate mxCharToUser concatmatrix pop
 0 0 mxCharToUser transform mxCharToUser translate pop
 SetUnderline
 SetStrikeout
 } def
/E { showpage SetCTM PenWidth setlinewidth } def
/eject /E load def
/m matrix def
/cellsize 0 def
/bitison
 {
 /iy exch def
 /ix exch def
 pat iy 7 and get
 1 7 ix 7 and sub bitshift
 and
 0 eq
 } bind def
/spotfunction
 {
 exch
 1 add 4 mul cvi
 exch
 1 add 4 mul cvi
 bitison
 { /onbits onbits 1 add def 1 }
 { /offbits offbits 1 add def 0 }
 ifelse
 } bind def
/PatGray { offbits offbits onbits add div setgray } def
/SolidGray { iBrushGray setgray } def
/PenGray { iPenGray setgray } def
/SetPattern
 {
 /pat exch def
 /cellsize iRes 300 16 div div def
 /rm 90 matrix rotate def
 /sm cellsize dup matrix scale def
 sm rm matrix concatmatrix
 matrix currentmatrix
 m concatmatrix pop
 1 0 m dtransform /dy exch def /dx exch def
 /onbits 0 def
 /offbits 0 def
 iDevRes dx dy hypot div
 dx dy atan /spotfunction load setscreen
 {} settransfer
 0 setgray
 /fGrayScreen false def
 } bind def
/min { 1 index 1 index gt { exch } if pop } def
/NonZero { dup 0 eq { pop 1 } if } def
/sto { exch def } def
/iBrush 1 def
/iPen 0 def
/fGrayScreen true def
/iBrushGray 0 def
/picstr 1 string def
/cx 0 def
/cy 0 def
/FillPoly
 {
 iBrush 0 eq { SolidGray fill 0 setgray } if
 iBrush 1 eq {} if
 iBrush 2 eq {} if
 iBrush 3 eq { PatGray fill 0 setgray } if
 } def
/EOFillPoly
 {
 iBrush 0 eq { SolidGray eofill 0 setgray } if
 iBrush 1 eq {} if
 iBrush 2 eq {} if
 iBrush 3 eq { PatGray eofill 0 setgray } if
 } def
/GDIStroke
 {
 iPen 0 ge iPen 5 lt and
 { PenGray stroke 0 setgray }
 { newpath }
 ifelse
 } def
/GetAngle
 {
 Ty sub
 Sy div
 exch
 Tx sub
 Sx div
 atan
 } def
/SetBrush
 {
 /iBrush exch def
 iBrush 0 eq
 {
 /iBrushGray exch 1000 div def
 fGrayScreen not
 {
 frequency angle WinDict /proc get DefaultSetScreen
 } if
 /fGrayScreen true def
 0 setgray
 } if
 } def
/GapWidth { iRes 0.0825 mul PenWidth mul cvi } def
/DotWidth { iRes 0.020 mul PenWidth mul cvi } def
/DashWidth { iRes 0.125 mul PenWidth mul cvi } def
/SetPen
 {
 /iPenGray exch 1000 div def
 /PenWidth exch def
 /iPen exch def
 iPen 0 ge
 {
 iPen 0 eq
 { [] 0 setdash } if
 iPen 1 eq
 { [DashWidth GapWidth] 0 setdash } if
 iPen 2 eq
 { [DotWidth GapWidth] 0 setdash } if
 iPen 3 eq
 { [DashWidth GapWidth DotWidth GapWidth] 0 setdash } if
 iPen 4 eq
 { [DashWidth GapWidth DotWidth GapWidth DotWidth GapWidth] 0 setdash} if
 } if
 PenWidth setlinewidth
 } bind def
/EBox {
 /y1 sto /x1 sto
 /y0 sto /x0 sto
 /Sx x1 x0 sub 2 div abs NonZero def
 /Sy y1 y0 sub 2 div abs NonZero def
 Sx Sy min /r sto
 x0 x1 add 2 div /Tx sto
 y0 y1 add 2 div /Ty sto
 Tx Ty translate
 Sx r div Sy r div scale
 0 0 r
 }def
/ABox
 {
 /y3 sto /x3 sto
 /y2 sto /x2 sto
 EBox

 x0 x1 eq y0 y1 eq or
 {
 y0 y1 eq
 { x2 x3 le { 90 180 } { 0 90 } ifelse }
 { y2 y3 le { 0 90 } { 270 360 } ifelse }
 ifelse
 }
 {x3 y3 GetAngle x2 y2 GetAngle}
 ifelse
 }def
/GDIEllipse
 {
 gsave EBox
 newpath 0 360 arc closepath SetCTM
 gsave FillPoly grestore GDIStroke
 grestore
 } def
/GDIArc {gsave ABox newpath arc SetCTM GDIStroke grestore} def
/GDIPie
 {
 gsave ABox newpath 0 0 moveto arc closepath SetCTM
 gsave FillPoly grestore GDIStroke grestore
 } def
/Box
 {
 save 5 1 roll
 dtransform exch 1 sub exch 1 sub idtransform
 /y2 sto /x2 sto
 newpath AlignXY moveto
 x2 0 rlineto
 0 y2 rlineto
 x2 neg 0 rlineto
 closepath FillPoly restore
 } bind def
/GDIRect
 {
 SaveState
 /y1 sto /x1 sto
 /y0 sto /x0 sto
 newpath
 x0 y0 moveto
 x0 y1 lineto
 x1 y1 lineto
 x1 y0 lineto
 closepath
 gsave FillPoly grestore GDIStroke
 RestoreState
 0 setgray
 } bind def
/min {2 copy gt {exch} if pop} bind def
/max {2 copy lt {exch} if pop} bind def
/GDIRoundRect {
 SaveState
 /y2 sto /x2 sto
 /yscale y2 x2 div 1 max def
 /xscale x2 y2 div 1 max def
 /y1 exch yscale div def
 /x1 exch xscale div def
 /y0 exch yscale div def
 /x0 exch xscale div def
 /r2 x2 y2 min def
 xscale yscale scale
 newpath
 x0 r2 add y0 moveto
 x1 y0 x1 y1 r2 arcto 4 { pop } repeat
 x1 y1 x0 y1 r2 arcto 4 { pop } repeat
 x0 y1 x0 y0 r2 arcto 4 { pop } repeat
 x0 y0 x1 y0 r2 arcto 4 { pop } repeat
 closepath
 gsave FillPoly grestore
 SetCTM GDIStroke
 RestoreState
 0 setgray
} bind def
/StartFill
 {
 newpath
 moveto
 } def
/PolyPoints
 {
 { lineto } repeat
 } def
/EndFill
 {
 closepath
 gsave
 0 ne {EOFillPoly} {FillPoly} ifelse
 grestore
 GDIStroke
 } def
/PL
 {
 newpath
 3 1 roll
 .5 add exch .5 add exch moveto
 1 sub
 {.5 add exch .5 add exch lineto } repeat
 GDIStroke
 clear
} bind def
/GDIPolyLine /PL load def
/GDILine
 {
 SaveState
 newpath
 4 2 roll
 moveto
 lineto
 GDIStroke
 RestoreState
 } def
/SL
 {
 SaveState
 gsave
 0 eq
 {PenGray}
 {
 iBrush 0 eq {SolidGray} if
 iBrush 1 eq {0 setgray} if
 iBrush 2 eq iBrush 3 eq or {PatGray} if
 1 setlinewidth
 [] 0 setdash
 } ifelse
 exch /y0 exch def
 {
 y0 moveto
 y0 lineto
 stroke
 } repeat
 PenWidth setlinewidth
 0 setgray
 grestore
 RestoreState
} bind def
/_S /SL load def
/cbRun 0 def
/cbPat 0 def
/cRep 0 def
/rgbRun 1024 string def
/rgbByte 1 string def
/GetByte { currentfile rgbByte readhexstring pop 0 get } bind def
/GetWord { GetByte 256 mul GetByte add } bind def
/GetString { currentfile exch readhexstring pop pop } bind def
/RepString
 {
 /cbRun cbPat cRep mul cvi store
 rgbRun 0 cbPat getinterval GetString
 cbPat
 {
 dup 2 mul exch rgbRun exch
 rgbRun 0 2 index getinterval
 putinterval
 dup 16 ge {exit} if
 } loop
 /cbPat exch def
 0 cbPat cbRun 1 sub
 { rgbRun exch rgbRun 0 cbPat getinterval putinterval } for
 rgbRun 0 cbRun getinterval
 } bind def
/GetRun
 {
 /cRep GetWord def
 /cbPat GetByte def
 cbPat 0 eq { rgbRun 0 cRep getinterval GetString } { RepString } ifelse
 } bind def
/Scan
 {
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 gsave
 x0 y0 translate
 save
 cx 1 scale
 cx 1 false [cx 0 0 1 0 0] { GetRun } imagemask
 restore
 grestore
 } bind def
/BB
{
 SaveState
 /cy exch cvi def
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 /picstr cx 7 add 8 idiv string def
 gsave
 0 setgray
 x0 y0 translate
 cx cy false [1 0 0 1 0 0] {currentfile picstr readhexstring pop} imagemask
 grestore
 RestoreState
} bind def
/BitBlt /BB load def
/Bb
{
 SaveState
 /cy exch cvi def
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 /picstr cx 7 add 8 idiv string def
 x0 y0 translate
 cx cy false [1 0 0 1 0 0] {currentfile picstr readstring pop} imagemask
 RestoreState
} bind def
/CPYBB
{
 SaveState
 /cy exch cvi def
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 /picstr cx 7 add 8 idiv string def
 gsave
 0 setgray
 x0 y0 translate
 cx cy 1 [1 0 0 1 0 0] {currentfile picstr readhexstring pop} image
 grestore
 RestoreState
} bind def
/CPYBb
{
 SaveState
 /cy exch cvi def
 /cx exch cvi def
 /y0 exch cvi def
 /x0 exch cvi def
 /picstr cx 7 add 8 idiv string def
 x0 y0 translate
 cx cy 1 [1 0 0 1 0 0] {currentfile picstr readstring pop} image
 RestoreState
} bind def
/OB
 {
 /cy exch def
 /cx exch def
 /y0 exch def
 /x0 exch def
 gsave
 1 setgray
 newpath
 x0 y0 moveto
 x0 cx add y0 lineto
 x0 cx add y0 cy add lineto
 x0 y0 cy add lineto
 closepath
 fill
 grestore
 } bind def
/OpaqueBox /OB load def
letter
statusdict begin revision end 2 lt {
{}
}
{
{
mark
1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0
counttomark dup 3 add -1 roll exch
2 sub mul dup floor cvi
dup 3 1 roll sub
exch dup
3 add index exch 2 add index dup
4 1 roll
sub mul add
counttomark 1 add 1 roll
cleartomark
}
}ifelse
settransfer
72 42 2550 3300 300 0 SetMetrics

SS
statusdict begin /manualfeed false store end
0 SJT
1 #C
1 #C

 userdict /PMSAVE save put initgraphics userdict begin 

 /showpage {} def 0.0025 dup scale

100 100 div dup scale  100 100 div 1440 mul 300 div 20 mul dup  860 mul exch 225
mul translate 20 20 scale 0 0 translate 5771 108 div 13679 256 div scale

 0 0 moveto 0 256 lineto 108 256 lineto 108 0 lineto closepath clip newpath 
%!PS-Adobe-2.0 EPSF-1.2%%Creator:Adobe Illustrator(TM) 1.2d4%%For:Judy%%Title:Biker.EPSa%%CreationDate:11/15/87 2:08 PM%%DocumentProcSets:Adobe_Illustrator_1.2d1 0 0%%DocumentSuppliedProcSets:Adobe_Illustrator_1.2d1 0 0%%PageFonts:Courier56.000000 158.000000 translate
%%BoundingBox:-56 -158 52 98%%TemplateBox:288 -360 288 -360%%EndComments%%BeginProcSet:Adobe_Illustrator_1.2d1 0 0% Copyright (C) 1987 Adobe Systems Incorporated.% All Rights Reserved.% Adobe Illustrator is a trademark of Adobe Systems Incorporated./Adobe_Illustrator_1.2d1 dup 100 dict def load begin/Version 0 def/Revision 0 def% definition operators/bdef {bind def} bind def/ldef {load def} bdef/xdef {exch def} bdef% graphic state operators/_K {3 index add neg dup 0 lt {pop 0} if 3 1 roll} bdef/_k /setcmybcolor where{/setcmybcolor get} {{1 sub 4 1 roll _K _K _K setrgbcolor pop} bind} ifelse def/g {/_b xdef /p {_b setgray} def} bdef/G {/_B xdef /P {_B setgray} def} bdef/k {/_b xdef /_y xdef /_m xdef /_c xdef /p {_c _m _y _b _k} def} bdef/K {/_B xdef /_Y xdef /_M xdef /_C xdef /P {_C _M _Y _B _k} def} bdef/d /setdash ldef/_i currentflat def/i {dup 0 eq {pop _i} if setflat} bdef/j /setlinejoin ldef/J /setlinecap ldef/M /setmiterlimit ldef/w /setlinewidth ldef% path construction operators/_R {.25 sub round .25 add} bdef/_r {transform _R exch _R exch itransform} bdef/c {_r curveto} bdef/C /c ldef/v {currentpoint 6 2 roll _r curveto} bdef/V /v ldef/y {_r 2 copy curveto} bdef/Y /y ldef/l {_r lineto} bdef/L /l ldef/m {_r moveto} bdef% error operators/_e [] def/_E {_e length 0 ne {gsave 0 g 0 G 0 i 0 J 0 j 1 w 10 M [] 0 d/Courier 20 0 0 1 z [0.966 0.259 -0.259 0.966_e 0 get _e 2 get add 2 div _e 1 get _e 3 get add 2 div] e _f t T grestore} if} bdef/_fill {{fill} stopped{/_e [pathbbox] def /_f (ERROR: can't fill, increase flatness) def n _E} if} bdef/_stroke {{stroke} stopped{/_e [pathbbox] def /_f (ERROR: can't stroke, increase flatness) def n _E} if} bdef% path painting operators/n /newpath ldef/N /n ldef/F {p _fill} bdef/f {closepath F} bdef/S {P _stroke} bdef/s {closepath S} bdef/B {gsave F grestore S} bdef/b {closepath B} bdef% text block construction and painting operators/_s /ashow ldef/_S {(?) exch {2 copy 0 exch put pop dup false charpath currentpoint _g setmatrix_stroke _G setmatrix moveto 3 copy pop rmoveto} forall pop pop pop n} bdef/_A {_a moveto _t exch 0 exch} bdef/_L {0 _l neg translate _G currentmatrix pop} bdef/_w {dup stringwidth exch 3 -1 roll length 1 sub _t mul add exch} bdef/_z [{0 0} bind {dup _w exch neg 2 div exch neg 2 div} bind {dup _w exch neg exch neg} bind] def/z {_z exch get /_a xdef /_t xdef /_l xdef exch findfont exch scalefont setfont} bdef/_g matrix def/_G matrix def/_D {_g currentmatrix pop gsave concat _G currentmatrix pop} bdef/e {_D p /t {_A _s _L} def} bdef/r {_D P /t {_A _S _L} def} bdef/a {_D /t {dup p _A _s P _A _S _L} def} bdef/o {_D /t {pop _L} def} bdef/T {grestore} bdef% group construction operators/u {} bdef/U {} bdef% font construction operators/Z {findfont begin currentdict dup length 1 add dict begin{1 index /FID ne {def} {pop pop} ifelse} forall /FontName exch def dup length 0 ne{/Encoding Encoding 256 array copy def 0 exch {dup type /nametype eq{Encoding 2 index 2 index put pop 1 add} {exch pop} ifelse} forall} if popcurrentdict dup end end /FontName get exch definefont pop} bdefend%%EndProcSet%%EndProlog%%BeginSetupAdobe_Illustrator_1.2d1 beginn%%EndSetup0 g0 G0 i0 J0 j0.313 w10 M[]0 d%%Note:24.33 -7.857 m20.903 -20.979 L19.77 -25.188 13.001 -24.577 12.976 -21.574 C11.907 -6.515 L10.287 -3.918 10.202 1.299 10.87 5.699 C7.229 12.654 5.701 17.48 4.647 25.572 C4.066 26.219 3.891 26.745 V3.19 26.395 l-1.069 33.639 L6.575 36.285 13.727 42.316 14.995 45.176 C21.034 37.083 23.6 34.781 V25.002 32.677 26.086 27.909 24.33 -7.857 Cb1 J0.419 w-20.924 67.604 m-22.961 68.011 -26.883 69.76 -26.735 73.071 C-26.877 75.162 -26.728 77.126 -26.177 79.052 C-25.707 79.077 L-24.369 83.76 -22.062 87.731 -19.108 90.476 C-19.073 89.833 L-17.456 91.334 -15.646 92.47 -13.692 93.154 C-13.727 93.797 L-12.555 94.207 -11.333 94.455 -10.071 94.523 C-9.862 94.534 L-8.599 94.602 -7.358 94.486 -6.148 94.204 C-6.115 93.561 L-4.1 93.09 -2.177 92.156 -0.408 90.834 C-0.444 91.477 L2.788 89.066 5.507 85.366 7.338 80.852 C7.809 80.878 L8.564 79.021 8.923 77.084 9.005 74.992 C9.506 71.715 5.794 69.556 3.813 68.933 cB0.175 w-23.111 68.606 m-22.545 63.456 l-20.946 63.65 l-19.452 61.464 l-19.442 58.555 l-14.321 51.692 L-14.283 50.542 -12.983 49.954 -11.3 50.056 C-10.059 48.145 -7.086 47.483 -4.642 48.788 C-3.077 48.189 -2.562 49.845 -2.153 49.12 C-1.059 49.866 l-1.308 50.23 l0.034 51.582 l0.407 51.038 l1.166 51.8 l3.005 57.814 l5.047 63.996 l6.933 66.653 l7.666 71.232 l-23.111 68.606 Lb0 J0.157 w-20.398 -69.429 m-21.529 -69.517 -21.025 -70.626 -21.766 -70.87 C-22.012 -70.187 L-21.271 -69.944 -21.775 -68.835 -20.644 -68.747 cB0.392 w14.715 44.494 m-2.001 24.936 -24.973 33.826 -26.196 35.63 CS1 j0.017 w-44.811 27.371 m-42.83 24.347 -33.064 23.458 -31.264 24.954 C-31.058 25.015 L-32.12 19.412 -33.912 17.955 -35.372 15.895 C-34.197 13.251 l-30.336 2.947 L-28.107 3.322 -25.757 1.085 -26.195 -1.661 C-25.565 -2.707 -26.433 -5.695 -28.02 -5.862 C-28.093 -8.679 -28.384 -10.018 -28.878 -10.47 C-32.346 -14.74 -32.987 -13.302 -34.572 -13.429 C-34.597 -13.981 -34.755 -13.974 -37.049 -14.029 C-39.068 -14.138 -38.232 -13.845 -39.505 -13.157 C-43.636 -10.13 -42.608 -10.834 -43.039 -6.311 C-43.196 -3.911 -43.4 -1.905 -43.032 -0.735 C-43.682 0.551 -48.465 7.402 -48.033 10.055 C-48.789 10.883 -49.655 14.014 -48.133 16.615 cB0 j0.315 w15.728 50.99 m14.995 45.176 L24.935 51.436 26.077 59.852 V20.826 65.505 L19.365 64.622 17.221 63.248 16.201 58.079 C15.314 52.706 l15.728 50.99 lf26.845 32.718 m28.242 32.183 37.236 38.402 38.946 41.328 C38.274 35.056 l43.234 30.336 L46.214 24.528 41.397 9.589 37.067 4.563 C34.957 7.306 31.449 6.522 y31.519 8.098 L33.018 13.404 32.037 12.658 32.637 15.476 c33.235 18.293 34.083 23.154 35.114 25.004 C31.16 27.443 29.839 28.591 26.845 32.718 Cf1 J0.157 w-19.532 -56.156 m-21.021 -57.669 -20.923 -62.572 -20.629 -63.059 C-21.337 -64.765 -20.352 -67.496 -21.161 -67.934 C-21.353 -70.453 -20.598 -73.016 -18.144 -74.705 C-17.34 -76.163 -16.646 -78.325 -13.152 -77.929 C-10.31 -77.976 -8.932 -75.43 -8.806 -72.591 C-7.225 -61.916 -10.659 -62.712 -9.789 -57.378 C-10.185 -59.177 -11.223 -57.631 -11.652 -58.402 C-11.912 -57.126 -13.189 -55.647 -13.819 -55.619 C-15.396 -55.549 L-16.384 -56.453 -17.6 -57.111 -17.285 -58.941 C-19.408 -58.689 -19.954 -56.768 -19.532 -56.156 Cb0.946 w-13.432 -64.657 m-10.815 -64.889 -8.38 -65.681 -8.423 -69.289 cS1 G0.315 w-13.432 -64.657 m-10.815 -64.889 -8.38 -65.681 -8.423 -69.289 cS0 J1.893 w-14.32 -63.34 m-14.188 -67.453 -13.746 -71.74 -10.473 -76.309 cS-14.314 -63.339 m-14.005 -67.444 -13.985 -71.752 -16.75 -76.647 cS0 G0.315 w-16.032 -64.527 m-15.202 -64.564 -14.149 -64.586 -13.274 -64.664 cS1 J0.157 w-18.144 -74.705 m-17.34 -76.163 -16.646 -78.325 -13.152 -77.929 C-10.31 -77.976 -8.932 -75.43 -8.806 -72.591 CS0 J-21.689 -70.912 m-19.542 -70.613 lB1 G3.788 w-3.771 31.788 m-2.669 11.275 lS0 G0.392 w2.519 -81.25 m-3.704 32.718 l-1.599 23.507 -3.81 8.104 yS0.315 w-4.189 4.63 m-9.026 -25.281 L-9.139 -26.896 -9.971 -26.795 -10.08 -28.37 C-11.267 -45.304 L-11.081 -47.327 -18.102 -48.772 -18.568 -45.947 C-21.504 -25.887 L-26.523 -14.457 -20.708 -7.908 -23.063 -0.535 C-28.1 24.811 -28.4 32.252 V-26.196 35.63 L-24.973 33.826 -11.963 30.808 -3.724 32.976 C-2.498 16.233 -2.347 21.46 -4.189 4.63 Cb0.25 g-3.98 13.009 m-11.64 12.715 L-10.952 13.948 -10.97 17.285 Y-9.467 17.317 -7.914 16.714 -7.868 15.981 C-6.787 17.325 -5.385 22.409 -4.806 26.737 C-4.281 22.88 -3.717 14.061 -3.98 13.009 Cf-5.227 9.126 m-6.016 9.126 l-6.016 7.285 l-7.419 6.058 -6.455 5.094 v-5.49 4.129 -5.49 5.006 y-5.052 7.986 -5.227 9.126 Vb0 g4.083 w29.793 11.331 m27.454 13.048 18.223 12.459 -2.468 11.348 C-23.16 10.235 -32.4 9.834 -34.541 7.875 cS3.156 w0.59 10.71 m-0.583 10.647 -1.167 10.616 -2.425 10.547 C-3.823 10.473 -4.539 10.435 -5.833 10.366 cS1 J0.419 w-37.398 54.839 m-36.033 54.778 l-27.632 42.41 l-26.196 35.63 l-34.488 39.553 l-40.415 46.137 l-38.892 49.646 l-37.87 53.703 l-37.398 54.839 lb-40.415 46.137 m-43.881 36.165 l-45.145 27.514 L-44.745 26.889 lS-28.524 31.972 m-29.763 30.134 l-30.334 25.691 L-31.203 24.726 lS1 g0.017 w-3.197 58.67 m-3.074 58.223 l-2.536 58.376 l-2.448 58.637 l-0.979 58.366 -1.126 56.319 V-1.077 55.433 -0.391 55.148 -1.573 54.219 c-2.63 53.387 -2.935 54.452 -3.408 54.654 c-3.97 54.893 -4.729 54.149 y-3.028 52.66 l-2.588 53.08 l-2.586 52.329 l-5.043 49.606 l-4.63 49.052 L-3.668 48.834 -2.658 49.672 -1.161 51.549 C1.118 53.127 3.5 59.245 2.875 63.073 C2.773 63 L-1.335 59.384 L-2.008 59.023 -2.509 58.37 -3.204 58.708 C-3.197 58.67 Lf0.353 w-3.931 58.83 m-4.085 57.334 -5.821 58.03 -5.672 57.404 c-5.59 57.061 -6.229 56.812 -7.014 57.023 C-7.233 57.198 -6.539 57.252 -6.276 57.997 c-6.013 58.742 -5.706 61.197 Y-5.224 61.197 -4.785 60.627 -4.829 60.145 C-4.829 59.925 -5.355 59.706 -5.136 59.619 c-4.917 59.531 -4.566 59.531 -4.522 59.312 c-4.479 59.093 -4.347 59.049 -4.259 59.224 c-4.172 59.4 -4.172 59.838 y-3.865 59.399 l-3.931 58.83 Lf0 g0.85 w5.524 68.421 m5.602 65.862 l-1.364 59.733 L-2.581 59.078 -3.238 57.467 -5.512 62.521 C-6.175 64.002 -6.175 64.002 -7.507 64.226 C-8.823 63.921 -8.823 63.921 -9.394 62.402 C-11.356 57.22 -12.11 58.786 -13.364 59.367 C-20.692 65.06 l-20.785 67.253 lS1 G0.3 w5.524 68.421 m5.602 65.862 l-1.364 59.733 L-2.581 59.078 -3.238 57.467 -5.512 62.521 C-6.175 64.002 -6.175 64.002 -7.507 64.226 C-8.823 63.921 -8.823 63.921 -9.394 62.402 C-11.356 57.22 -12.11 58.786 -13.364 59.367 C-20.692 65.06 l-20.785 67.253 lS0.263 w-16.991 61.177 m-17.565 58.199 -16.335 54.08 -14.097 52.743 cS0.175 w-5.73 55.11 m-3.365 55.624 lS0.263 w-12.298 51.47 m-12.053 51.017 -11.427 50.194 yS1 g0.175 w-17.428 61.284 m-16.027 60.987 l-15.415 60.959 L-20.692 65.06 l-20.701 67.303 L-22.45 67.205 l-22.089 63.789 l-20.665 63.991 l-18.369 60.001 l-18.371 57.97 l-17.428 61.284 Lb0 g0.353 w1.865 67.937 m2.014 63.687 lS3.019 68.063 m3.119 64.61 lS0.044 w4.975 68.33 m5.046 66.116 lS0 G0.628 w12.976 -22.188 m11.671 -22.662 12.533 -25.077 11.966 -25.445 C10.282 -27.964 12.494 -31.408 12.299 -32.264 cS20.788 -21.514 m21.961 -21.644 21.567 -24.243 21.925 -25.366 c22.408 -26.882 20.704 -27.547 21.766 -33.727 cS0.314 w13.214 -50.748 m20.206 -50.756 l21.649 -50.151 23.543 -46.461 V26.286 -46.45 L26.286 -45.752 l27.949 -45.752 L27.937 -42.82 L26.669 -40.787 l25.927 -40.783 l25.937 -41.698 l24.841 -41.739 L24.824 -35.056 21.627 -32.713 20.143 -32.49 C17.99 -30.427 l14.889 -30.449 l14.01 -32.3 L11.175 -30.68 11.849 -33.379 12.252 -36.699 C11.9 -37.547 11.881 -39.747 V10.99 -40.336 10.649 -45.538 11.469 -46.517 C12.714 -49.296 L12.696 -50.748 l13.214 -50.748 L20.206 -50.756 l21.649 -50.151 23.543 -46.461 vB1 G0 J1.256 w17.049 -36.676 m17.241 -41.987 l22.009 -49.914 lS17.206 -41.95 m14.76 -47.5 l14.658 -51.178 lS0 G1 J0.314 w23.543 -46.461 m21.649 -50.151 20.206 -50.756 y13.214 -50.748 lS12.281 -32.533 m9.969 -31.487 8.414 -34.641 12.717 -35.068 cS21.885 -33.982 m23.771 -30.45 26.787 -33.335 23.088 -36.945 cS0 J1.884 w1.133 10.252 m8.009 -33.129 l6.554 -48.157 lS0.942 w6.091 -47.98 m10.076 -82.114 lS1.884 w11.847 -82.05 m9.557 -52.235 L9.441 -46.871 l12.621 -46.755 lS1 J2.826 w1.991 -83.642 m12.56 -83.257 lS0.392 w1.586 -71.518 m7.416 -81.84 lS1.368 -65.536 m7.416 -81.84 lS1.041 -56.543 m7.416 -81.84 lS0.679 -46.607 m7.416 -81.84 lS6.045 -73.76 m8.627 -82.6 lS6.045 -73.76 m9.605 -82.093 lS5.595 -52.045 m4.867 -57.83 lS3.036 -53.031 m4.707 -61.439 l6.115 -61.387 l5.975 -57.578 l4.454 -57.633 l3.036 -53.031 Lb0 J0.942 w7.032 -48.022 m9.762 -82.1 lS1 J0.392 w1.805 -77.552 m7.416 -81.84 lS0.4 -38.962 m7.416 -81.84 lS0.391 w7.532 -85.046 m2.686 -101.745 L2.468 -95.763 L7.532 -85.046 Lb0.392 w3.014 -110.738 m7.532 -85.046 lS3.375 -120.674 m7.532 -85.046 lS6.753 -93.202 m8.575 -84.565 lS6.753 -93.202 m9.697 -84.632 lS3.654 -128.319 m7.532 -85.046 lS0 J1.884 w-8.27 -82.783 m-7.835 -72.478 L-8.111 -67.12 l-11.29 -67.236 lS1 J2.826 w1.677 -83.653 m-8.893 -84.038 lS0.392 w1.199 -71.532 m-3.865 -82.25 lS0.981 -65.55 m-3.865 -82.25 lS0.655 -56.556 m-3.865 -82.25 lS0.292 -46.62 m-3.865 -82.25 lS-3.085 -74.093 m-4.818 -82.205 lS-3.085 -74.093 m-6.03 -82.663 lS1.418 -77.566 m-3.865 -82.25 lS0.013 -38.976 m-3.865 -82.25 lS-3.748 -85.455 m2.627 -110.752 L2.3 -101.76 L-3.748 -85.455 Ls2.989 -120.689 m-3.748 -85.455 lS-2.377 -93.535 m-4.96 -84.782 lS-2.377 -93.535 m-5.938 -85.201 lS3.267 -128.334 m-3.748 -85.455 lS0 J0.942 w-4.692 -48.372 m-5.873 -82.696 lS-5.629 -48.483 m-5.561 -82.658 lS1.884 w-3.982 10.066 m-7.685 -33.701 l-5.142 -48.584 lS1 J0.628 w12.976 -22.188 m11.578 -22.715 12.68 -25.033 12.343 -25.795 C10.659 -28.314 12.494 -31.408 12.299 -32.264 cS20.788 -21.514 m21.804 -21.637 21.696 -24.853 21.696 -26.03 c21.699 -27.76 20.704 -27.547 21.766 -33.727 cS0 J0.392 w25.967 59.614 m33.704 49.758 29.848 54.66 35.6 47.879 C38.873 43.726 39.333 43.469 38.74 40.745 c46.39 29.229 L47.033 27.785 46.349 26.558 46.875 25.984 c47.399 25.411 48.951 17.874 38.451 2.698 cS1 J0.419 w8.664 72.43 m14.704 69.236 l20.435 65.522 lS0 J0.392 w25.967 59.614 m33.704 49.758 28.811 55.623 34.563 48.844 C38.743 43.862 39.256 43.767 38.903 41.299 cS1 J0.419 w-37.398 54.839 m-35.758 56.191 L-29.176 63.52 l-23.484 68.419 lS-40.415 46.137 m-43.544 35.85 l-45.145 27.514 LS4.083 w-31.59 13.279 m-33.299 10.211 -32.267 -9.015 yS1 G0.526 w-30.935 13.303 m-31.986 11.416 -32 3.415 -31.855 -2.464 cS0 G4.083 w28.084 15.431 m30.01 12.494 30.38 -6.755 yS0.25 g0 J0.313 w22.385 -1.395 m23.437 -3.324 23.963 -4.551 23.525 -6.83 C22.385 -12.177 L22.472 -12.791 22.648 -12.879 22.911 -12.002 C24.051 -7.531 l26.242 -1.746 l24.139 -1.308 lF25.805 6.056 m23.701 10.439 l20.37 10.439 L21.86 6.757 22.386 5.618 v22.916 4.47 22.561 4.829 22.035 4.478 C23.306 4.829 25.586 6.187 25.805 6.056 Cf0 g1 J0.314 w37.122 -9.257 m38.644 -8.618 37.516 -7.467 38.236 -7.185 C39.038 -6.827 40.008 -7.046 39.895 -4.29 C40.155 -1.606 39.591 3.349 37.793 4.422 C36.658 7.593 32.137 6.712 31.133 6.473 c27.49 7.154 26.066 6.303 v23.205 4.595 21.02 4.739 20.396 2.54 c18.817 -3.009 24.961 -0.196 24.525 -1.052 c23.748 -2.579 25.884 -2.39 25.009 -2.918 c24.134 -3.446 24.146 -6.048 Y23.542 -8.538 25.753 -8.493 28.608 -8.262 C29.398 -9.197 L32.904 -9.198 33.08 -9.285 33.342 -9.461 c33.605 -9.636 36.235 -9.548 37.024 -9.549 C37.122 -9.257 Lb1 g0.07 w39.008 -6.796 m39.456 -6.269 39.79 -5.659 39.72 -4.992 C39.98 -2.307 39.591 3.349 37.793 4.422 C36.746 8.207 32.137 6.712 31.133 6.473 C29.837 6.406 L28.61 15.172 27.734 16.049 27.032 14.296 C27.909 10.789 28.96 2.023 28.96 -2.184 C28.785 -2.886 27.557 -3.587 25.278 -5.34 C24.752 -5.866 24.577 -6.392 25.804 -6.041 c27.031 -5.691 31.064 -4.113 30.713 -3.237 C30.012 -2.535 29.486 -1.834 29.837 -1.133 C30.363 -1.483 30.713 -1.483 Y30.538 -2.185 30.362 -3.237 31.239 -2.535 c32.116 -1.834 31.765 0.27 30.889 -0.431 C30.626 0.007 31.678 1.059 V32.949 1.278 32.993 1.146 32.729 0.226 C32.203 -0.651 31.765 -2.185 32.817 -1.308 c33.869 -0.432 32.992 -0.081 33.518 0.796 c34.045 1.672 34.063 1.719 34.395 2.549 C34.22 4.477 32.116 4.653 31.59 3.601 C31.59 4.521 32.467 5.135 33.519 4.784 c34.571 4.434 35.36 3.162 35.184 2.461 C36.236 3.075 L37.113 2.023 36.85 0.182 35.184 -0.958 C35.272 -1.922 35.096 -2.448 v34.921 -2.974 36.937 -1.133 37.814 0.182 C37.814 0.883 39.479 -2.185 38.34 -3.763 C37.814 -4.64 36.236 -4.289 35.71 -6.393 C36.762 -5.341 37.287 -5.691 V38.164 -5.604 38.88 -5.377 38.339 -6.218 c37.55 -7.445 36.937 -6.568 36.849 -7.971 C36.323 -8.234 35.183 -8.321 34.92 -7.883 c34.658 -7.445 34.307 -8.847 33.693 -9.198 C35.534 -9.373 37.024 -9.636 37.2 -8.497 C37.295 -8.354 37.669 -8.065 37.969 -7.814 C37.969 -7.485 37.902 -7.313 38.318 -7.16 c38.735 -7.006 38.92 -6.905 39.008 -6.796 Cb0.314 w16.583 43.052 mF0 g0.392 w-18.026 -46.612 m-19.258 -52.355 l-19.157 -53.618 l-19.767 -56.735 lS-18.026 -46.612 m-18.773 -52.062 l-18.672 -53.325 l-19.767 -56.735 lS-11.235 -45.166 m-9.844 -45.699 -9.9 -46.955 -9.386 -53.108 C-9.285 -54.371 -10.436 -55.584 -9.885 -57.338 cS-11.235 -45.166 m-9.844 -45.699 -10.213 -46.941 -9.7 -53.094 C-9.599 -54.357 -10.436 -55.584 -9.885 -57.338 cS0.942 w-3.378 -27.593 m-4.362 -21.417 lS-3.378 -27.588 m-4.668 -21.47 lS-3.379 -27.584 m-4.972 -21.538 lS-3.379 -27.58 m-5.271 -21.621 lS-3.38 -27.577 m-5.566 -21.718 lS1.796 -27.405 m2.328 -21.174 lS1.797 -27.4 m2.637 -21.204 lS2.944 -21.249 m1.795 -27.396 lS1.796 -27.392 m3.248 -21.311 lS1.796 -27.388 m3.549 -21.387 lS-1.527 10.528 m-2.18 -0.605 7.518 -19.431 -7.333 -31.662 cS0.549 w-4.077 -38.52 m-4.264 -33.37 L-0.366 -30.557 lS3.6 -38.24 m3.413 -33.091 L-0.679 -30.568 lS-3.103 3.366 m-2.581 -10.971 lS-2.266 -6.104 m-1.32 -25.02 lS-0.094 3.861 m0 2.442 l1.771 -7.226 l1.174 -17.105 L1.242 -19.151 L2.762 -20.319 lS4.397 w-0.274 -26.709 m3.663 -134.836 lS0.419 w-28.414 32.125 m-30.166 30.12 l-30.334 25.691 LS0 J0.392 w-9.292 -33.304 m-9.048 -34.887 l-7.779 -34.629 lS-8.257 -34.765 m-6.935 -36.867 -6.601 -43.484 yS-4.076 -29.134 m-2.594 -27.628 l-2.015 -28.754 l-3.169 -29.961 l-4.076 -29.134 ls-6.541 -31.54 m-4.735 -33.349 l-5.345 -36.466 l-6.806 -37.502 lS-5.345 -36.466 m-5.192 -47.164 lS-1.309 -50.627 m-4.07 -37.443 L-3.987 -38.379 l-4.066 -60.734 l-2.853 -61.731 l-1.309 -50.627 Lb-3.809 -62.003 m-4.478 -62.916 l-3.898 -64.043 l-3.909 -76.638 lS2 -28 m2.08 -29.733 l3.115 -31.194 l3.928 -30.601 l3.363 -29.161 l3.318 -26.644 l2.397 -26.131 l2 -28 lb5.128 -34.259 m4.662 -37.698 l3.756 -36.871 l3.316 -39.681 l3.825 -42.377 l4.561 -43.51 l3.535 -52.425 l4.351 -55.291 l5.167 -51.083 l5.582 -45.284 l6.594 -46.279 l7.868 -35.155 l5.128 -34.259 lb15.151 46.181 m15.018 43.2 l17.227 41.609 l14.331 45.432 16.717 47.841 vB1 g0.035 w-29.072 -3.758 m-29.948 -3.758 -29.598 -3.408 -29.247 -2.707 c-28.896 -2.005 -27.494 -1.83 -26.968 -2.707 c-26.442 -3.583 -26.267 -3.934 -27.143 -3.759 c-28.02 -3.583 -28.721 -3.233 -29.072 -3.758 Cb-27.143 -4.109 m-28.02 -3.934 -28.721 -3.583 -29.072 -4.109 CB-27.143 -4.46 m-28.02 -4.285 -28.721 -3.934 -29.072 -4.46 C-28.546 -5.336 -27.319 -5.161 -27.143 -4.46 Cb0.35 w-34.581 3.384 m-34.581 6.189 -33.541 11.451 Y-33.191 12.678 -33.103 14.256 -32.752 10.443 c-32.511 7.818 -32.797 -1.874 -32.622 -3.276 C-34.901 -1.347 -35.909 -1.479 -35.558 2.028 C-37.487 1.502 -40.818 0.275 -39.416 -2.355 C-39.24 -3.057 -41.519 -1.829 -40.117 0.976 C-41.519 -0.383 -41.294 -0.414 -41.344 0.275 c-41.394 0.955 -40.683 1.68 -39.766 2.028 C-39.244 1.602 l-34.581 3.384 Lf0.175 w-47.129 11.145 m-46.252 17.281 L-47.918 15.265 -50.022 12.635 -47.129 11.145 Cb0 g-34.156 2.027 m-34.156 -2.706 lS1 g0.035 w-36.435 0.099 m-37.487 0.45 l-38.188 -0.251 L-37.487 -0.777 -38.364 -2.005 -37.487 -2.005 c-36.61 -2.005 -35.909 -1.829 -35.383 -1.304 c-34.857 -0.778 -36.435 0.099 Yb-34.857 -1.83 m-34.857 -3.583 l-33.63 -3.583 L-33.981 -4.284 -34.331 -5.862 -33.63 -6.037 c-32.929 -6.213 -33.981 -4.985 -32.753 -4.109 c-31.526 -3.232 -34.857 -1.83 Yb0 g0.175 w-38.539 -3.933 m-38.364 -4.985 -36.435 -4.459 -36.611 -5.336 cS1 g0.035 w-35.734 -4.459 m-34.682 -4.635 l-34.507 -6.563 l-34.858 -7.089 l-35.734 -6.213 l-35.734 -4.459 Lb0 g1 G1 J0.35 w29.136 15.957 m30.175 14.373 30.761 8.045 31.08 2.55 cS27.733 14.949 m28.927 13.964 29.608 7.203 29.912 1.492 cS0 G29.912 1.492 m30.137 -2.741 30.204 -6.229 yS0.25 g0.035 w5.995 27.797 m8.975 23.764 L9.852 22.362 8.975 18.68 8.449 17.278 c7.923 15.875 7.397 15.875 6.871 17.278 c6.345 18.68 4.943 24.115 5.995 27.797 Cb0 J0.313 w15.638 38.403 m17.391 38.316 23.002 37.263 23.966 33.669 c24.93 30.075 24.578 15.523 Y24.052 14.296 22.649 13.946 22.124 15.962 c21.598 17.978 20.371 21.397 Y19.582 23.325 22.475 24.027 22.124 25.341 C21.598 28.234 19.144 30.426 19.144 32.267 C18.531 36.299 14.762 38.316 15.638 38.403 Cf1 g22.385 -1.22 m24.314 -1.22 l22.385 -1.22 Lf0 g25.061 10.044 m25.005 8.141 24.935 6.085 24.849 3.864 CB1 g1 J21.465 0.227 m21.465 1.016 L21.553 1.98 22.079 3.119 24.27 2.944 C24.27 1.366 L23.569 0.665 22.079 -0.738 23.394 1.016 C23.657 1.366 23.647 1.729 22.955 1.191 c22.166 0.577 21.377 -0.825 21.465 0.227 Cf0 g0.701 w29.604 6.058 m29.73 4.565 29.831 3.012 29.912 1.492 cS0.313 w37.122 -9.257 m38.644 -8.618 37.516 -7.467 38.236 -7.185 C39.038 -6.827 40.008 -7.046 39.895 -4.29 CS0 J15.017 45.176 m20.946 37.171 23.512 34.868 V26.332 32.705 l27.209 32.573 lS1 J0.788 w26.938 6.612 m26.604 6.545 26.304 6.445 26.066 6.303 c23.205 4.595 21.02 4.739 20.396 2.54 c18.817 -3.009 24.961 -0.196 24.525 -1.052 cS1 g0 J0.313 w25.849 6.187 m25.629 5.442 25.384 5.463 24.402 5.048 c23.01 4.459 19.23 3.426 21.071 -0.518 C20.457 -0.431 18.967 2.638 22.035 4.478 C22.824 4.873 25.761 6.012 25.849 6.187 Cf0 g1 G1 J0.35 w27.733 14.949 m28.927 13.964 29.608 7.203 29.912 1.492 cS27.908 14.949 m29.102 13.964 29.783 7.203 30.087 1.492 cS28.084 14.949 m29.278 13.964 29.958 7.203 30.263 1.492 cS28.259 14.949 m29.453 13.964 30.134 7.203 30.438 1.492 cS1 g0 G0.353 w-16.947 90.118 m-16.93 89.768 l-16.488 89.702 l-15.503 80.447 l-14.3 79.19 l-13.42 79.146 l-14.671 90.231 l-16.947 90.118 Lf-24.859 77.966 m-24.159 78 l-20.667 74.838 l-21.125 74.333 l-23.643 76.446 l-23.674 77.059 l-24.859 77.966 lf-2.588 90.829 m-2.571 90.479 l-3.004 90.369 l-3.071 81.063 l-4.144 79.693 l-5.015 79.562 l-4.865 90.716 l-2.588 90.829 Lf6.485 79.517 m5.785 79.482 l2.622 75.99 l3.128 75.533 l5.425 77.885 l5.394 78.497 l6.485 79.517 lf0 g0.419 w-37.398 54.839 m-35.068 57.575 L-29.319 63.841 l-23.484 68.419 lS1 G0.526 w-25.736 69.088 m-19.249 67.684 6.436 69.962 9.329 71.89 cS0 G0.419 w8.664 72.43 m16.094 68.92 l20.61 65.435 lS0 J0.07 w7.844 -82.391 m7.913 -84.582 l9.49 -84.532 l9.852 -84.871 l10.815 -84.84 l11.448 -85.434 l12.061 -85.415 l12.825 -84.601 l13.351 -84.585 l13.259 -81.693 l12.295 -81.724 l12.237 -79.884 l10.485 -79.939 l10.535 -81.517 l8.958 -81.567 l8.983 -82.355 l7.844 -82.391 lb-4.183 -82.829 m-4.092 -85.019 l-5.669 -85.084 l-6.005 -85.449 l-6.968 -85.488 l-7.556 -86.127 l-8.169 -86.152 l-8.99 -85.396 l-9.516 -85.418 l-9.634 -82.527 l-8.671 -82.488 l-8.747 -80.648 l-6.995 -80.576 l-6.93 -82.153 l-5.354 -82.088 l-5.321 -82.876 l-4.183 -82.829 lb1 G1 J0.35 w11.423 -80.552 m11.461 -81.603 lS0.175 w9.494 -82.568 m11.159 -82.481 l11.247 -83.094 l12.474 -83.007 lS0 G0.438 w3.683 -83.796 m3.759 -85.9 l4.752 -85.864 l4.916 -90.364 lS-2.516 -83.795 m1.636 -87.942 lS-2.604 -87.739 m1.341 -89.931 lS1 G0.263 w5.524 68.421 m5.602 65.862 l-1.364 59.733 L-2.581 59.078 -3.238 57.467 -5.512 62.521 C-6.175 64.002 -6.175 64.002 -7.507 64.226 C-8.823 63.921 -8.823 63.921 -9.394 62.402 C-11.356 57.22 -12.11 58.786 -13.364 59.367 C-20.692 65.06 l-20.785 67.253 lS0.526 w-33.081 13.229 m-33.91 11.911 -34.372 7.393 -34.629 2.772 cS0 G0.392 w-18.026 -46.612 m-18.949 -52.106 l-18.848 -53.369 l-19.767 -56.735 lS%%Trailer_E end  
 end clear userdict /PMSAVE get restore

32 0 0 58 58 0 0 1 /Times-Roman /font4 ANSIFont font
228 2948 129 (Biker) SB
354 2948 114 (.EPS) SB
E
RS

SS
statusdict begin /manualfeed false store end
0 SJT
1 #C
RS
end
