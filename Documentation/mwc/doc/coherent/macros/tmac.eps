.\" Coherent 386 release 4.2
.\" Copyright (c) 1982, 1993 by Mark Williams Company.
.\" All rights reserved. May not be copied without permission.
.\" For copying permission and licensing info, write licensing@mwc.com
.\"
.\" tmac.eps - position encapsulated PostScript images under COHERENT troff
.\" By fwb (fred@lepanto.mwc.com), 02/03/1992
.\"
.ig
mail from Steve Ness on handling encapsulated PostScript images - for the
reader's enlightenment:

"In the example you sent me, bounding box parameters are

	-257 298 -179 353

"which means that the lower left corner is [-257, 298] and the upper right
corner is [-179, 353].  Thus, the image is -179-(-257)=78 horizontal points by
353-298=55 vertical points, or about 1.08" x .76, and it is centered at
-257+(78/2) = -218 x, 298+(55/2) = 325.5 y.  If you want it centered at a 
given position [x, y] on the page, e.g. [4", 3"], compute as follows:

	4" = 288 pts., 288+218 = 506
	3" = 216 pts., 216-325.5 = -109.5

"Thus, if you do a

	506 -109.5 translate

before printing the image, it should land where you want, centered 4" from
the left margin and 3" up from bottom (not down from top) of the page."

This set of macros uses the following number registers:

	lX - X point of the image's lower-left corner
	lY - Y point of the image's lower-left corner
	uX - X point of the image's upper-right corner
	uY - Y point of the image's upper-right corner
	iW - image width:  point at which the image is centered horizontally
	iH - image height:  point at which the image is centered vertically
	iB - breadth of the image, in decipoints
	iL - length of the image, in decipoints
	lW - width of an image set flush left, plus gutter
	rW - width of an image set flush right, plus gutter

And the string bN, which holds image's name.

These are all computed internally from the image's bindings and troff's
internal registers that record just where on the page we are right now.
Do not manipulate these registers by hand.
..
.\" Read the bounding-box from the image file.
.de BB
.if \\n(.$>4 \{\
.tm "tmac.eps: File \\$1 is not a .eps file; exiting"
.ex \}
.nr lX \\$1
.nr lY \\$2
.nr uX \\$3
.nr uY \\$4
..
.\" Picture Initialize - initialize registers used by the picture macros
.\" It is adapted from the groff macro set "tmac.pspic".
.\" "readbb" is a shell script that consists basically of the command
.\" grep BoundingBox $1 | read JUNK lx ly ux uy ; echo .BB $lx $ly $ux $uy
.de PI
.nr lX 0
.nr lY 0
.nr uX 0
.nr uY 0
.sy grep BoundingBox \\$1|read JUNK lx ly ux uy;echo .BB $lx $ly $ux $uy>/tmp/roff\\n($$
.so /tmp/roff\\n($$
.sy rm /tmp/roff\\n($$
..
.\"
.\" Translate Picture - reset the printer to center image on selected field.
.\" This takes five arguments:
.\" X,Y coordinates of point on page where image is to be centered;
.\" the image's X,Y scaling factors; and the name of the image's file.
.\" All X,Y elements must be in points - *not* troff-style decipoints.
.de TP
.nr iW (\\n(lX*\\$3)+(((\\n(uX*\\$3)-(\\n(lX*\\$3))/2)
.nr iH (\\n(lY*\\$4)+(((\\n(uY*\\$4)-(\\n(lY*\\$4))/2)
.br
.co
gsave
.co
.co \\$1-\\n(iW \\$2-\\n(iH
translate
.co
.co \\$3 \\$4
scale
.co
.rb \\$5
.co
grestore
.co
..
.\" Picture Here - center a picture on the page at the point where this
.\" macro is called.  Takes three arguments:
.\" the image's X scaling factor;
.\" the image's Y scaling factor;
.\" and full path name of the image.
.\" The macro ensures that enough space is on the page to print the
.\" and repositions the text and the image appropriately so there's
.\" no collision or overwriting.  If there's not enough space, the image
.\" is bumped to the next page.
.\" example call:  .PH 1 1 /usr/PostScript/bbl/pj12.eps
.de PH
.nr iB 0
.nr iL 0
.nr iW 0
.nr iH 0
.nr iB 0
.nr lX 0
.nr lY 0
.nr uX 0
.nr uY 0
.sp \\n(pDu
.PI \\$3
.nr iL ((\\n(uY-\\n(lY)*\\$2)*10
.if \\n(iL>\\n(.t .bp
.nr iB (\\n(.l/2)+\\n(.o
.TP \\n(iB/10 (\\n(.p-(\\n(.h+(\\n(iL/2)))/10 \\$1 \\$2 \\$3
.sp \\n(iLu
.sp \\n(pDu
..
.\" Picture Fill - fill up the rest of the white space on the current page with
.\" a picture.  Takes three arguments:
.\" the image's X scaling factor;
.\" the image's Y scaling factor;
.\" and full path name of the image.
.\" If the remaining white space on the page cannot hold the image, it
.\" prints nothing.
.\" example call:  .PF 1 1 /usr/PostScript/bbl/pj12.eps
.de PF
.nr iB 0
.nr iL 0
.nr iW 0
.nr iH 0
.nr lX 0
.nr lY 0
.nr uX 0
.nr uY 0
.sp \\n(pDu
.PI \\$3
.nr iL ((\\n(uY-\\n(lY)*\\$2)*10
.nr iB (\\n(.l/2)+\\n(.o
.if \\n(iL<\\n(.t \\{\\
.TP \\n(iB/10 (\\n(.p-(\\n(.h+((\\n(.t-\\n(iL)/2)+(\\n(iL/2)))/10 \\$1 \\$2 \\$3\\}
..
.\" Picture Left - an image flush left on the page at the point where this
.\" macro is called.  Takes three arguments:
.\" the image's X scaling factor;
.\" the image's Y scaling factor;
.\" and full path name of the image.
.\" Unlike the IF and IH macros, which clear clear out a horizontal band
.\" on the page, PL sets a trap and indents properly, so text can flow
.\" around the image.  If the image will not fit on this page, do nothing.
.\" example call:  .PL 1 1 /usr/PostScript/bbl/pj12.eps
.de PL
.\" set a trap to ensure that no line break occurs
.nr sX 0
.nr sY 0
.nr sX \\$1
.nr sY \\$2
.ds bN \\$3
.wh \\n(.hu+\\n(.vu Pl
..
.de Pl
.nr iB 0
.nr iL 0
.nr iH 0
.nr iW 0
.nr lX 0
.nr lY 0
.nr uX 0
.nr uY 0
.PI \\*(bN
.nr iB ((\\n(uX-\\n(lX)*\\n(sX)*10
.nr iL ((\\n(uY-\\n(lY)*\\n(sY)*10
.\" IF THERE'S NOT ENOUGH SPACE ON THE PAGE, THE IMAGE SHOULD BE PLACED
.\" AT THE TOP OF THE NEXT PAGE; BUT I'M NOT SURE YET HOW TO DO THAT.
.if \\n(iL<\\n(.t \\{\\
.TP (\\n(.o+(\\n(iB/2))/10 (\\n(.p-(\\n(.h+(\\n(iL/2)))/10 \\n(sX \\n(sY \\*(bN
.nr lW \\n(iBu+0.1i
.po +\\n(lWu
.ll -\\n(lWu
.wh \\n(.hu+\\n(iLu+\\n(.vu LU\\}
.ch Pl
..
.\" Picture Beginning - an image flush left on the page at the point where this
.\" macro is called.  Unlike .PL, does *not* have to have text appear before
.\" it on the page.  Used for initial capitals and things like that.
.\" Takes three arguments:
.\" the image's X scaling factor;
.\" the image's Y scaling factor;
.\" and full path name of the image.
.\" example call:  .PB 1 1 /usr/PostScript/bbl/pj12.eps
.de PB
.nr iB 0
.nr iL 0
.nr iH 0
.nr iW 0
.nr lX 0
.nr lY 0
.nr uX 0
.nr uY 0
.PI \\$3
.sp \\n(.vu
.nr iB ((\\n(uX-\\n(lX)*\\$1)*10
.nr iL ((\\n(uY-\\n(lY)*\\$2)*10
.TP (\\n(.o+(\\n(iB/2))/10 (\\n(.p-(\\n(.h+(\\n(iL/2)))/10 \\$1 \\$2 \\$3
.nr lW \\n(iBu+0.1i
.po +\\n(lWu
.ll -\\n(lWu
.wh \\n(.hu+\\n(iLu+\\n(.vu LU
.sp \\n(.vu
..
.\" Left Undo - undo the indentation set by .PL or .PB
.de LU
'po -\\n(lWu
'll +\\n(lWu
'ch LU
..
.\" Picture Right - set an image flush right on the page at the point where this
.\" macro is called.  Takes three arguments:
.\" the image's X scaling factor;
.\" the image's Y scaling factor;
.\" and full path name of the image.
.\" example call:  .PR 1 1 /usr/PostScript/bbl/pj12.eps
.de PR
.\" set a trap to ensure that no line break occurs
.nr sX 0
.nr sY 0
.nr sX \\$1
.nr sY \\$2
.ds bN \\$3
.wh \\n(.hu+\\n(.vu Pr
..
.de Pr
.nr iB 0
.nr iL 0
.nr iH 0
.nr iW 0
.nr lX 0
.nr lY 0
.nr uX 0
.nr uY 0
.PI \\*(bN
.nr iB ((\\n(uX-\\n(lX)*\\n(sX)*10
.nr iL ((\\n(uY-\\n(lY)*\\n(sY)*10
.if \\n(iL<\\n(.t \\{\\
.TP (\\n(.o+(\\n(.l-(\\n(iB/2)))/10 (\\n(.p-(\\n(.h+(\\n(iL/2)))/10 \\n(sX \\n(sY \\*(bN
.nr rW \\n(iBu+0.1i
.ll -\\n(rWu
.wh \\n(.hu+\\n(iLu+\\n(.vu RU\\}
.ch Pr
..
.\" Right Undo - undo the indentation set by .PR
.de RU
.ll +\\n(rWu
.ch RU
..
.\" End of tmac.eps
