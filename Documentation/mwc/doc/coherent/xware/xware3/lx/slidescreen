.TH slidescreen "" "" "X Application"
.PC "Divide and shuffle the screen"
.fi
\fBslidescreen
[\fBbackground \fIcolor\^\fB]
[\-delay \fImicroseconds\^\fB]
[\-delay2 \fImicroseconds\^\fB]
[\-grid-size \fIinteger\^\fB]
[\-increment \fIinteger\^\fB]
[\-foreground \fIcolor\fB]
[\-mono]
[\-root]
[\-window]\fR
.PP
.B slidescreen
takes a picture of the root window.
It then divided its picture into equally sized, square chunks and slides them
randomly around the screen, much like one of those
maddening scrambled-number puzzles.
.PP
.B slidescreen
recognizes the following command-line options:
.IP "\fB\-delay \fImicroseconds\fR"
Delay
.I microseconds
between steps of the sliding process.
The default is 50,000.
.IP "\fB\-delay2 \fImicroseconds\fR"
Delay
.I microseconds
before beginning to slide another chunk of the screen.
The default is 100,000.
.IP "\fB\-grid-size \fIinteger\fR"
Divide the picture of the root window into
.I integer
equally sized chunks.
.IP "\fB\-increment \fIinteger\^\fR"
Shift the chunk by
.I integer
pixels between frames.
The higher
.I integer
is, the faster
.B slidescreen
shifts the chunks.
.IP \fB\-mono\fR
Map the application into black and white, even if you run it on a color server.
.IP \fB\-root\fR
Run the application in the root window.
.IP \fB\-window\fR
Run the application in its own window.
This is the default
.SH "See Also"
.B
X,
X application,
xscreensaver
.R
