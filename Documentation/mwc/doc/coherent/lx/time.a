.TH time "" "" Overview
.PC
.PP
\*(CO includes a number of routines that allow you to set and manipulate time,
as recorded on the system's clock, into a variety of formats.
These routines should be adequate for nearly any task
that involves temporal calculations or the maintenance of data gathered
over a long period of time.
.PP
All functions, global variables, and manifest constants used in
connection with time are defined and described in the header
files \fBtime.h\fR and \fBtimeb.h\fR.
In brief, time manipulates two data elements:
the type
.BR time_t ,
and the structure
.BR tm .
.PP
.II time_t
.B time_t
is defined in the header file
.BR <time.h> .
\*(PN follows the \*(UN standard and initializes
.B time_t
to the number of seconds since January 1, 1970, 0h00m00s GMT;
this moment, in turn, is rendered as day 2,440,587.5 on the
Julian calendar.
This allows accurate calculation of time as far back as January 1, 4713 B.C.
.PP
.II tm
The structure
.B tm
is defined in the header file
.BR <time.h> .
It is defined as follows:
.DM
.ta 0.5i 2.0i
struct tm {
	int tm_sec;	/* current time, seconds */
	int tm_min;	/* current time, minutes */
	int tm_hour;	/* current time, hour */
	int tm_mday;	/* day of the month, 1-31 */
	int tm_mon;	/* month, 1-12 */
	int tm_year;	/* year since 1900 */
	int tm_wday;	/* day of the week, Sunday = 0 */
	int tm_yday;	/* day in the current year */
	int tm_isdst;	/* is daylight-savings time now in effect? */
};
.DE
.PP
For an example of manipulating this structure in a C program, see the
Lexicon entry for
.BR localtime() .
.SH "Standard Time Functions"
The \*(CO system includes the following functions to manipulate time:
.LB
\fBasctime()\fR	Convert time structure to ASCII string
\fBclock()\fR	Get processor time
\fBctime()\fR	Convert system time to an ASCII string
\fBdifftime()\fR	Return difference between two times
\fBgmtime()\fR	Convert system time to calendar structure
\fBlocaltime()\fR	Convert system time to calendar structure
\fBmktime()\fR	Turn broken-down time into calendar time
\fBstrftime()\fR	Format locale-specific time
\fBtime()\fR	Get the current time
\fBtzset()\fR	Set local time zone
.PP
To print out the local time, a program must perform the following tasks:
.IP \fB1.\fR 0.3i
Read the system time with
.BR time() .
This function returns a
.BR time_t .
.IP \fB2.\fR
Pass the
.B time_t
returned by
.B time()
to the function
.BR localtime() .
This function breaks it down into the
.B tm
structure,
.IP \fB3.\fR
Pass
.BR localtime() 's
output to
.BR asctime() ,
which transforms the
.B tm
structure into an ASCII string.
.IP \fB4.\fR
Finally, pass the output of
.B asctime()
to
.BR printf() ,
to displays it on the standard output device.
.PP
See the entry for
.B asctime()
for an example C program that goes through the above steps.
.SH "Special Time Functions"
\*(PN includes a number of extensions to the time functions used by
standard \*(UN systems.
These are designed to increase the scope and accuracy of time-handling,
and to ease calculation of some time elements.
.PP
.II TIMEZONE
\*(PN holds information about your time locale in the
environmental variable
.BR TIMEZONE .
This variable is described in detail in its Lexicon article.
In brief, it consists of seven fields:
.DS
	1. Name of the local standard time zone
	2. Offset from Greenwich Mean Time, in minutes
	3. Name of the local daylight time zone
	4. Date when daylight-savings time begins
	5. Date when daylight-savings time ends
	6. Hour when daylight-savings time begins
	7. Hour when daylight-savings time ends
.DE
.PP
The fields are defined in such a way that any form of daylight-saving
adjustment can be handled correctly.
For example, the United States shifts into daylight-savings time on the first
Sunday in April; whereas Brazil shifts into daylight-savings time on a set
day each spring.
.PP
.II tzset()
The function
.B tzset()
parses
.B TIMEZONE
into the following external variables:
.II timezone
.II tzname
.DS
.ta 1.0i
\fBtimezone\fR	Seconds from GMT to give local time
.\"\fBdstadjust\fR	Seconds to local standard, if any
\fBtzname[2][16]\fR	Character array of names of standard and daylight times
.DE
.PP
For details on manipulations these variable, see the Lexicon entry for
.BR tzset() .
.\".PP
.\"The following functions return information about the calendar:
.\".DS
.\".ta 1.0i
.\"\fBisleapyear()\fR	Is this year AD a leap year?
.\"\fBdayspermonth()\fR	How many days in this historical month?
.\".DE
.\".PP
.\"Time on \*(PN is modelled after time on the \*(CO operating system.
The library
.B libmisc.a
contains the following functions that convert time from Julian to Gregorian
form:
.DS
.ta 1.0i
\fBtime_to_jday()\fR	Convert \fBtime_t\fR to the Julian date
\fBjday_to_time()\fR	Convert Julian date to \fBtime_t\fR
\fBtm_to_jday()\fR	Convert \fBtm\fR structure to Julian date
\fBjday_to_tm()\fR	Convert Julian date to \fBtm\fR structure
.DE
.PP
.II "Gregorian calendar"
.II "Julian date"
.II "British Empire"
\*(CO's time functions assume that conversion to the Gregorian calendar
occurred October 1582, when it was first adopted in Rome.
However, various nations adopted the Gregorian calendar at different times;
for example, it was adopted in the British Empire (including its
American colonies) only in September 1752.
(This, by the way, is the date assumed by the \*(CO command
.BR cal ,
as you would see if you typed the command
.BR "cal 9 1752" .)
Users in northern and eastern Europe, and in
European-influenced areas of Asia (e.g., India)
may wish to to write their own functions to convert historical data properly
from the Julian to the Gregorian calendar.
.SH Example
For an example of some time functions, see the entry for
.BR asctime() .
.SH "See Also"
.Xr "cal," cal
.Xr "libc," libc
.Xr "libmisc" libmisc
.SH Notes
\*(CO also includes the system call
.BR ftime() ,
which returns the current system time.
Because the \*(AS eliminates
.BR ftime() ,
users are urged to replace this system call with calls to
.BR time() .
.PP
\*(UN System V defines
.B time_t
in header file
.BR <sys/types.h> ,
whereas \*(CO defines it in
.BR time.h .
This should not affect the porting of programs from \*(UN to \*(CO,
but it may affect the porting of programs in the other direction.
