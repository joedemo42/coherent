.TH "internal kernel routines" "" "" "Overview"
.PC
.PP
The following routines are internal to the \*(CO kernel.
.nf
.ie t .ta 1.5i
.el   .ta 3.0i
.tc . 0.1i
\fBactvsig()\fR	Activate signal handler
\fBaltclk_in()\fR	Install polling function
\fBaltclk_out()\fR	Uninstall polling function
\fBbclaim()\fR	Claim a buffer
\fBbdone()\fR	Block I/O completed
\fBbflush()\fR	Flush buffer cache
\fBbread()\fR	Read into buffer cache
\fBbrelease()\fR	Release a buffer
\fBbsync()\fR	Flush modified buffers
\fBbusyWait()\fR	Busy-wait the system, pending some event
\fBbusyWait2()\fR	Busy-wait the system, pending some event
\fBbwrite()\fR	Write buffer to disk
\fBclrivec()\fR	Clear interrupt vector
\fBclrq()\fR	Clear character queue
\fBcltgetq()\fR	Get a char from a character queue
\fBcltputq()\fR	Put a character on a character queue
\fBdblock()\fR	Call the device block interface
\fBdclose()\fR	Invoke the driver's close routine
\fBdefend()\fR	Execute deferred functions
\fBdefer()\fR	Defer function execution
\fBdevmsg()\fR	Print a message from a device driver
\fBdioctl()\fR	Call a device-driver's I/O control point
\fBdmago()\fR	Enable DMA transfers
\fBdmain()\fR	Copy from system global memory to kernel data
\fBdmaoff()\fR	Disable DMA transfers
\fBdmaon()\fR	Prepare for DMA transfer
\fBdmaout()\fR	Copy from kernel data to system global memory
\fBdmareq()\fR	Request block I/O, avoiding DMA straddles
\fBdopen()\fR	Invoke the driver's open routine
\fBdpoll()\fR	Invoke the driver's poll routine
\fBdpower()\fR	Invoke the driver's power-fail routine
\fBdread()\fR	Invoke the driver's read routine
\fBdtime()\fR	Invoke the driver's timeout routine
\fBdwrite()\fR	Invoke the driver's device write routine
\fBfdisk()\fR	Hard-disk partitioning
\fBgetDmaMem()\fR	Request virtual address of physical memory
\fBgetPhysMem()\fR	Request reserved physical memory
\fBgetubd()\fR	Get a byte from user data space
\fBgetusd()\fR	Get a 16-bit short integer from user data space
\fBgetuwd()\fR	Get a 32-bit word from user data space
\fBgetuwi()\fR	Get a word from user code space
\fBiogetc()\fR	Get a character from I/O segment
\fBiomapand()\fR	Set bits in the I/O privilege bitmap
\fBiomapOr()\fR	Clear bits in the I/O privilege bitmap
\fBioputc()\fR	Put a character into I/O segment
\fBioread()\fR	Read from I/O segment
\fBioreq()\fR	Re-queue I/O request through block routine
\fBiowrite()\fR	Write to I/O segment
\fBkalloc()\fR	Allocate kernel memory
\fBkfree()\fR	Free kernel memory
\fBkiopriv()\fR	Write a bit into the I/O privilege bitmap
\fBkucopy()\fR	Kernel-to-user data copy
\fBlock()\fR	Lock a gate
\fBlocked()\fR	See if a gate is locked
\fBmajor()\fR	Extract major-device number
\fBmap_pv()\fR	Map physical to virtual addresses
\fBMAPIO()\fR	Return global address
\fBmapPhysUser()\fR	Overlay user data with memory-mapped hardware
\fBminor()\fR	Extract minor-device number
\fBnondsig()\fR	Non-default signal pending
\fBP2P()\fR	Convert system global to physical address
\fBpanic()\fR	Fatal system error
\fBpollopen()\fR	Initiate driver polled event
\fBpollwake()\fR	Terminate driver polled event
\fBprintf()\fR	Formatted print
\fBputubd()\fR	Store a byte into user data space
\fBputusd()\fR	Store a short into user data data
\fBputuwd()\fR	Store a 32-bit word into user data space
\fBputuwi()\fR	Put a word into user code space
\fBpxcopy()\fR	Copy from physical or system global memory to kernel data
\fBread_t0()\fR	Read the system clock t0
\fBsalloc()\fR	Allocate a memory segment
\fBsendsig()\fR	Send a signal
\fBsetivec()\fR	Set an interrupt vector
\fBsigdump()\fR	Generate core dump
\fBsphi()\fR	Disable interrupts
\fBspl()\fR	Adjust interrupt mask
\fBsplo()\fR	Enable interrupts
\fBsuper()\fR	Verify super-user
\fBtimeout()\fR	Defer function execution
\fBttclose()\fR	Close tty
\fBttflush()\fR	Flush a tty
\fBtthup()\fR	tty hangup
\fBttin()\fR	Pass character to tty input queue
\fBttinp()\fR	See if tty input queue has room for more input
\fBttioctl()\fR	Perform tty I/O control
\fBttopen()\fR	Open a tty
\fBttout()\fR	Get next character from tty output queue
\fBttoutp()\fR	See if tty input queue has data available
\fBttread()\fR	Read from tty
\fBttread0()\fR	Read from tty
\fBttsetgrp()\fR	Set tty process group
\fBttsignal()\fR	Send tty signal
\fBttstart()\fR	Start tty output
\fBttwrite()\fR	Write to tty
\fBttwrite0()\fR	Write to tty
\fBukcopy()\fR	User to kernel data copy
\fBunlock()\fR	Unlock a gate
\fBunmap_pv()\fR	Dissociate virtual addresses from physical addresses
\fBvtop()\fR	Translate virtual address to physical address
\fBwakeup()\fR	Wakeup processes sleeping on an event
\fBx_sleep()\fR	Wait for event or signal
\fBxpcopy()\fR	Copy from kernel data to physical or system global memory
.fi
.SH "See Also"
.B
DDI/DKI kernel routines,
device driver,
internal data structures,
STREAMS
.R
